{
  "address": "0x5c1a97C144A97E9b370F833a06c70Ca8F2f30DE5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_sharedDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidLocalDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Path_AlreadyHasCredit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Path_InsufficientCredit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Path_UnlimitedCredit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountLD",
          "type": "uint256"
        }
      ],
      "name": "SlippageExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_InsufficientFare",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_InvalidPath",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_InvalidTokenDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_LzTokenUnavailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_OutflowFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_RecoverTokenUnsupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_SlippageTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Stargate_UnreceivedTokenNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Transfer_ApproveFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Transfer_TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "feeLib",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "planner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasurer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenMessaging",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creditMessaging",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lzToken",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct StargateBase.AddressConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "AddressConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "amount",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Credit[]",
          "name": "credits",
          "type": "tuple[]"
        }
      ],
      "name": "CreditsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "amount",
              "type": "uint64"
            }
          ],
          "indexed": false,
          "internalType": "struct Credit[]",
          "name": "credits",
          "type": "tuple[]"
        }
      ],
      "name": "CreditsSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oft",
          "type": "bool"
        }
      ],
      "name": "OFTPathSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceivedLD",
          "type": "uint256"
        }
      ],
      "name": "OFTReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "dstEid",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountSentLD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountReceivedLD",
          "type": "uint256"
        }
      ],
      "name": "OFTSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "PauseSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PlannerFeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "amountSD",
          "type": "uint64"
        }
      ],
      "name": "TreasuryFeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "amountSD",
          "type": "uint64"
        }
      ],
      "name": "TreasuryFeeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "srcEid",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountLD",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "composeMsg",
          "type": "bytes"
        }
      ],
      "name": "UnreceivedTokenCached",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        }
      ],
      "name": "addTreasuryFee",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "approvalRequired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpointV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAddressConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "feeLib",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "planner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasurer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenMessaging",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creditMessaging",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lzToken",
              "type": "address"
            }
          ],
          "internalType": "struct StargateBase.AddressConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTransferGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "localEid",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oftVersion",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        },
        {
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "eid",
          "type": "uint32"
        }
      ],
      "name": "paths",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "credit",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "plannerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "to",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amountLD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minAmountLD",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraOptions",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "composeMsg",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "oftCmd",
              "type": "bytes"
            }
          ],
          "internalType": "struct SendParam",
          "name": "_sendParam",
          "type": "tuple"
        }
      ],
      "name": "quoteOFT",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minAmountLD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxAmountLD",
              "type": "uint256"
            }
          ],
          "internalType": "struct OFTLimit",
          "name": "limit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "feeAmountLD",
              "type": "int256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct OFTFeeDetail[]",
          "name": "oftFeeDetails",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountSentLD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountReceivedLD",
              "type": "uint256"
            }
          ],
          "internalType": "struct OFTReceipt",
          "name": "receipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "to",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amountLD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minAmountLD",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraOptions",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "composeMsg",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "oftCmd",
              "type": "bytes"
            }
          ],
          "internalType": "struct SendParam",
          "name": "_sendParam",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "_payInLzToken",
          "type": "bool"
        }
      ],
      "name": "quoteSend",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "fee",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "amount",
              "type": "uint64"
            }
          ],
          "internalType": "struct Credit[]",
          "name": "_credits",
          "type": "tuple[]"
        }
      ],
      "name": "receiveCredits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_seatNumber",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_amountSD",
          "type": "uint64"
        }
      ],
      "name": "receiveTokenBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "sender",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ],
          "internalType": "struct Origin",
          "name": "_origin",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_amountSD",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_composeMsg",
          "type": "bytes"
        }
      ],
      "name": "receiveTokenTaxi",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_guid",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "_srcEid",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountLD",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_composeMsg",
          "type": "bytes"
        }
      ],
      "name": "retryReceiveToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "to",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amountLD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minAmountLD",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraOptions",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "composeMsg",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "oftCmd",
              "type": "bytes"
            }
          ],
          "internalType": "struct SendParam",
          "name": "_sendParam",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "_fee",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_refundAddress",
          "type": "address"
        }
      ],
      "name": "send",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "msgReceipt",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountSentLD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountReceivedLD",
              "type": "uint256"
            }
          ],
          "internalType": "struct OFTReceipt",
          "name": "oftReceipt",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "amount",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "minAmount",
              "type": "uint64"
            }
          ],
          "internalType": "struct TargetCredit[]",
          "name": "_credits",
          "type": "tuple[]"
        }
      ],
      "name": "sendCredits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "srcEid",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "amount",
              "type": "uint64"
            }
          ],
          "internalType": "struct Credit[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "dstEid",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "to",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "amountLD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minAmountLD",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraOptions",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "composeMsg",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "oftCmd",
              "type": "bytes"
            }
          ],
          "internalType": "struct SendParam",
          "name": "_sendParam",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "nativeFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lzTokenFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct MessagingFee",
          "name": "_fee",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_refundAddress",
          "type": "address"
        }
      ],
      "name": "sendToken",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "guid",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "nativeFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "lzTokenFee",
                  "type": "uint256"
                }
              ],
              "internalType": "struct MessagingFee",
              "name": "fee",
              "type": "tuple"
            }
          ],
          "internalType": "struct MessagingReceipt",
          "name": "msgReceipt",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountSentLD",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountReceivedLD",
              "type": "uint256"
            }
          ],
          "internalType": "struct OFTReceipt",
          "name": "oftReceipt",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "ticketId",
              "type": "uint72"
            },
            {
              "internalType": "bytes",
              "name": "passengerBytes",
              "type": "bytes"
            }
          ],
          "internalType": "struct Ticket",
          "name": "ticket",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "feeLib",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "planner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "treasurer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenMessaging",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "creditMessaging",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lzToken",
              "type": "address"
            }
          ],
          "internalType": "struct StargateBase.AddressConfig",
          "name": "_config",
          "type": "tuple"
        }
      ],
      "name": "setAddressConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_dstEid",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "_oft",
          "type": "bool"
        }
      ],
      "name": "setOFTPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        }
      ],
      "name": "setTransferGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharedDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateType",
      "outputs": [
        {
          "internalType": "enum StargateType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "status",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "guid",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "index",
          "type": "uint8"
        }
      ],
      "name": "unreceivedTokens",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawPlannerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_amountSD",
          "type": "uint64"
        }
      ],
      "name": "withdrawTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc40eecb692a5126bbd3a58405c93531692b0ff976fb790cca20beb7a4e734ff8",
  "receipt": {
    "to": null,
    "from": "0x1D7C6783328C145393e84fb47a7f7C548f5Ee28d",
    "contractAddress": "0x5c1a97C144A97E9b370F833a06c70Ca8F2f30DE5",
    "transactionIndex": 0,
    "gasUsed": "4080866",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000020000000000000000000000000000000020000000002000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080020000010000000000000000000000000000000000000000000008000000000000000",
    "blockHash": "0x44dc8433449e41941416e785d8cd3be0f0cbdcbb3e330c8e87c5fd9d829440a3",
    "transactionHash": "0xc40eecb692a5126bbd3a58405c93531692b0ff976fb790cca20beb7a4e734ff8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2612382,
        "transactionHash": "0xc40eecb692a5126bbd3a58405c93531692b0ff976fb790cca20beb7a4e734ff8",
        "address": "0x5c1a97C144A97E9b370F833a06c70Ca8F2f30DE5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001d7c6783328c145393e84fb47a7f7c548f5ee28d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x44dc8433449e41941416e785d8cd3be0f0cbdcbb3e330c8e87c5fd9d829440a3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2612382,
        "transactionHash": "0xc40eecb692a5126bbd3a58405c93531692b0ff976fb790cca20beb7a4e734ff8",
        "address": "0x5c1a97C144A97E9b370F833a06c70Ca8F2f30DE5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000001d7c6783328c145393e84fb47a7f7c548f5ee28d",
          "0x0000000000000000000000001d7c6783328c145393e84fb47a7f7c548f5ee28d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x44dc8433449e41941416e785d8cd3be0f0cbdcbb3e330c8e87c5fd9d829440a3"
      }
    ],
    "blockNumber": 2612382,
    "cumulativeGasUsed": "4080866",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbbA60da06c2c5424f03f7434542280FCAd453d10",
    6,
    "0x6F475642a6e85809B1c36Fa62763669b1b48DD5B",
    "0x1D7C6783328C145393e84fb47a7f7C548f5Ee28d"
  ],
  "numDeployments": 1,
  "solcInputHash": "5a796ce3686d19e01db9dd5de30438b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_sharedDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidLocalDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Path_AlreadyHasCredit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Path_InsufficientCredit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Path_UnlimitedCredit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"}],\"name\":\"SlippageExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_InsufficientFare\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_InvalidPath\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_InvalidTokenDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_LzTokenUnavailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_OutflowFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_RecoverTokenUnsupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_ReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_SlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stargate_UnreceivedTokenNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Transfer_ApproveFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Transfer_TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"feeLib\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"planner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasurer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMessaging\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creditMessaging\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lzToken\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct StargateBase.AddressConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"AddressConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Credit[]\",\"name\":\"credits\",\"type\":\"tuple[]\"}],\"name\":\"CreditsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"indexed\":false,\"internalType\":\"struct Credit[]\",\"name\":\"credits\",\"type\":\"tuple[]\"}],\"name\":\"CreditsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oft\",\"type\":\"bool\"}],\"name\":\"OFTPathSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceivedLD\",\"type\":\"uint256\"}],\"name\":\"OFTReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSentLD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceivedLD\",\"type\":\"uint256\"}],\"name\":\"OFTSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"PauseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PlannerFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amountSD\",\"type\":\"uint64\"}],\"name\":\"TreasuryFeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"amountSD\",\"type\":\"uint64\"}],\"name\":\"TreasuryFeeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"composeMsg\",\"type\":\"bytes\"}],\"name\":\"UnreceivedTokenCached\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"}],\"name\":\"addTreasuryFee\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"approvalRequired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpointV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"feeLib\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"planner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasurer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMessaging\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creditMessaging\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lzToken\",\"type\":\"address\"}],\"internalType\":\"struct StargateBase.AddressConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localEid\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oftVersion\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"},{\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"eid\",\"type\":\"uint32\"}],\"name\":\"paths\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"credit\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plannerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraOptions\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"composeMsg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oftCmd\",\"type\":\"bytes\"}],\"internalType\":\"struct SendParam\",\"name\":\"_sendParam\",\"type\":\"tuple\"}],\"name\":\"quoteOFT\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountLD\",\"type\":\"uint256\"}],\"internalType\":\"struct OFTLimit\",\"name\":\"limit\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"feeAmountLD\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct OFTFeeDetail[]\",\"name\":\"oftFeeDetails\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountSentLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReceivedLD\",\"type\":\"uint256\"}],\"internalType\":\"struct OFTReceipt\",\"name\":\"receipt\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraOptions\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"composeMsg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oftCmd\",\"type\":\"bytes\"}],\"internalType\":\"struct SendParam\",\"name\":\"_sendParam\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"_payInLzToken\",\"type\":\"bool\"}],\"name\":\"quoteSend\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Credit[]\",\"name\":\"_credits\",\"type\":\"tuple[]\"}],\"name\":\"receiveCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_seatNumber\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_amountSD\",\"type\":\"uint64\"}],\"name\":\"receiveTokenBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"sender\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"internalType\":\"struct Origin\",\"name\":\"_origin\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_amountSD\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_composeMsg\",\"type\":\"bytes\"}],\"name\":\"receiveTokenTaxi\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"_srcEid\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_composeMsg\",\"type\":\"bytes\"}],\"name\":\"retryReceiveToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraOptions\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"composeMsg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oftCmd\",\"type\":\"bytes\"}],\"internalType\":\"struct SendParam\",\"name\":\"_sendParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"_fee\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"}],\"name\":\"send\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"msgReceipt\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountSentLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReceivedLD\",\"type\":\"uint256\"}],\"internalType\":\"struct OFTReceipt\",\"name\":\"oftReceipt\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minAmount\",\"type\":\"uint64\"}],\"internalType\":\"struct TargetCredit[]\",\"name\":\"_credits\",\"type\":\"tuple[]\"}],\"name\":\"sendCredits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"srcEid\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"internalType\":\"struct Credit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"to\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountLD\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraOptions\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"composeMsg\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"oftCmd\",\"type\":\"bytes\"}],\"internalType\":\"struct SendParam\",\"name\":\"_sendParam\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"_fee\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_refundAddress\",\"type\":\"address\"}],\"name\":\"sendToken\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lzTokenFee\",\"type\":\"uint256\"}],\"internalType\":\"struct MessagingFee\",\"name\":\"fee\",\"type\":\"tuple\"}],\"internalType\":\"struct MessagingReceipt\",\"name\":\"msgReceipt\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountSentLD\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReceivedLD\",\"type\":\"uint256\"}],\"internalType\":\"struct OFTReceipt\",\"name\":\"oftReceipt\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint72\",\"name\":\"ticketId\",\"type\":\"uint72\"},{\"internalType\":\"bytes\",\"name\":\"passengerBytes\",\"type\":\"bytes\"}],\"internalType\":\"struct Ticket\",\"name\":\"ticket\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"feeLib\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"planner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasurer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenMessaging\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"creditMessaging\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lzToken\",\"type\":\"address\"}],\"internalType\":\"struct StargateBase.AddressConfig\",\"name\":\"_config\",\"type\":\"tuple\"}],\"name\":\"setAddressConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_dstEid\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"_oft\",\"type\":\"bool\"}],\"name\":\"setOFTPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"}],\"name\":\"setTransferGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharedDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateType\",\"outputs\":[{\"internalType\":\"enum StargateType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"status\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"guid\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"unreceivedTokens\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawPlannerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_amountSD\",\"type\":\"uint64\"}],\"name\":\"withdrawTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"designed for bridged USDC migration perhttps://github.com/circlefin/stablecoin-evm/blob/master/doc/bridged_USDC_standard.md\",\"kind\":\"dev\",\"methods\":{\"addTreasuryFee(uint256)\":{\"details\":\"Only used for increasing the overall budget for transaction rewardsThe treasuryFee is essentially the reward pool.Rewards are capped to the treasury amount, which limits exposure soStargate does not pay beyond what it's charged.\",\"params\":{\"_amountLD\":\"The amount to add in LD\"}},\"approvalRequired()\":{\"details\":\"Implements the IOFT interface.\",\"returns\":{\"_0\":\"Whether approval of the underlying token implementation is required\"}},\"getAddressConfig()\":{\"returns\":{\"_0\":\"An AddressConfig struct containing the current configuration\"}},\"oftVersion()\":{\"details\":\"Implements the IOFT interface.0 version means the message encoding is not compatible with the default OFT.\",\"returns\":{\"interfaceId\":\"The ERC165 interface ID for this contract\",\"version\":\"The cross-chain compatible message encoding version.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))\":{\"details\":\"Implements the IOFT interface\",\"params\":{\"_sendParam\":\"The parameters for the send operation\"},\"returns\":{\"limit\":\"The information on OFT transfer limits\",\"oftFeeDetails\":\"The details of OFT transaction cost or reward\",\"receipt\":\"The OFT receipt information, indicating how many tokens would be sent and received\"}},\"quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)\":{\"details\":\"Implements the IOFT interface.Reverts with InvalidAmount if send mode is drive but value is specified.MessagingFee: LayerZero message fee   - nativeFee: The native fee.   - lzTokenFee: The LZ token fee.\",\"params\":{\"_payInLzToken\":\"Flag indicating whether the caller is paying in the LZ token\",\"_sendParam\":\"The parameters for the send() operation\"},\"returns\":{\"fee\":\"The calculated LayerZero messaging fee from the send() operation\"}},\"receiveCredits(uint32,(uint32,uint64)[])\":{\"details\":\"Emits CreditsReceived when credits are received\",\"params\":{\"_credits\":\"An array indicating to which paths and how much credits to add\",\"_srcEid\":\"The endpoint ID of the source of credits\"}},\"receiveTokenBus((uint32,bytes32,uint64),bytes32,uint8,address,uint64)\":{\"details\":\"Emits OFTReceived when the OFT token is correctly receivedEmits UnreceivedTokenCached when the OFT token is not received\",\"params\":{\"_guid\":\"The global unique ID for this message, useful for composing\",\"_origin\":\"The Origin struct describing the origin, useful for composing\"}},\"recoverToken(address,address,uint256)\":{\"details\":\"Recover tokens sent to this contract by mistake.Only the treasurer can recover the token.Reverts with Stargate_RecoverTokenUnsupported if the treasurer attempts to withdraw StargateBase.token().\",\"params\":{\"_amount\":\"the amount to send\",\"_to\":\"the address to send the token to\",\"_token\":\"the token to recover. if 0x0 then it is native token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"retryReceiveToken(bytes32,uint8,uint32,address,uint256,bytes)\":{\"details\":\"The message has been delivered by the Messaging layer, so it is ok for anyone to retry.try to receive the token if the previous attempt failed in lzReceiveReverts with UnreceivedTokenNotFound if the message is not found in the cacheEmits OFTReceived if the receive succeeds\",\"params\":{\"_amountLD\":\"The amount of tokens in LD to transfer to the account\",\"_composeMsg\":\"The bytes representing the compose message in the message that failed\",\"_guid\":\"The global unique ID for the message that failed\",\"_index\":\"The index of the message that failed\",\"_receiver\":\"The account receiver for the message that failed\",\"_srcEid\":\"The source endpoint ID for the message that failed\"}},\"send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)\":{\"details\":\"Emits OFTSent when the send is successful\",\"params\":{\"_fee\":\"The MessagingFee object describing the fee to pay\",\"_refundAddress\":\"The address to refund any LZ fees paid in excess\",\"_sendParam\":\"The SendParam object detailing the transaction\"},\"returns\":{\"msgReceipt\":\"The receipt proving the message was sent\",\"oftReceipt\":\"The receipt proving the OFT swap\"}},\"sendToken((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)\":{\"details\":\"This function is same as `send` in OFT interface but returns the ticket data if in the bus ride mode, which allows the caller to ride and drive the bus in the same transaction.\"},\"setAddressConfig((address,address,address,address,address,address))\":{\"params\":{\"_config\":\"An AddressConfig object containing the addresses for the different roles used by Stargate.\"}},\"setOFTPath(uint32,bool)\":{\"details\":\"Set the path as OFT if the remote chain is using OFT.When migrating from OFT to pool on remote chain (e.g. migrate USDC to circles), reset the path to non-OFT.Reverts with InvalidPath if the destination chain is the same as local.\",\"params\":{\"_dstEid\":\"The destination chain endpoint ID\",\"_oft\":\"Whether to set or reset the path\"}},\"setPause(bool)\":{\"details\":\"Be careful with this call, as it unsets the re-entry guard.\",\"params\":{\"_paused\":\"Whether to pause or unpause the stargate\"}},\"stargateType()\":{\"details\":\"Fulfills the IStargate interface.\",\"returns\":{\"_0\":\"The type of Stargate contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawPlannerFee()\":{\"details\":\"The planner fee is accumulated in StargateBase to avoid the cost of passing msg.value to TokenMessaging.\"},\"withdrawTreasuryFee(address,uint64)\":{\"params\":{\"_amountSD\":\"The amount to withdraw in SD\",\"_to\":\"The destination account\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTreasuryFee(uint256)\":{\"notice\":\"Add tokens to the treasury, from the senders account.\"},\"approvalRequired()\":{\"notice\":\"Indicates whether the OFT contract requires approval of the 'token()' to send.\"},\"getAddressConfig()\":{\"notice\":\"Returns the current roles configured.\"},\"oftVersion()\":{\"notice\":\"Get the OFT version information\"},\"quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))\":{\"notice\":\"Provides a quote for sending OFT to another chain.\"},\"quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)\":{\"notice\":\"Provides a quote for the send() operation.\"},\"receiveCredits(uint32,(uint32,uint64)[])\":{\"notice\":\"Entrypoint for receiving credits into paths\"},\"receiveTokenBus((uint32,bytes32,uint64),bytes32,uint8,address,uint64)\":{\"notice\":\"Entrypoint for receiving tokens\"},\"retryReceiveToken(bytes32,uint8,uint32,address,uint256,bytes)\":{\"notice\":\"Retry receiving a token that initially failed.\"},\"send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)\":{\"notice\":\"Send tokens through the Stargate\"},\"setAddressConfig((address,address,address,address,address,address))\":{\"notice\":\"Configure the roles for this contract.\"},\"setOFTPath(uint32,bool)\":{\"notice\":\"Sets a given Path as using OFT or resets it from OFT.\"},\"setPause(bool)\":{\"notice\":\"Pause or unpause a Stargate\"},\"stargateType()\":{\"notice\":\"Returns the type of Stargate contract.\"},\"withdrawPlannerFee()\":{\"notice\":\"Withdraw planner fees accumulated in StargateBase.\"},\"withdrawTreasuryFee(address,uint64)\":{\"notice\":\"Withdraw from the accrued fees in the treasury.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/usdc/StargateOFTUSDC.sol\":\"StargateOFTUSDC\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\n// @dev Import the 'MessagingFee' and 'MessagingReceipt' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppSender, MessagingFee, MessagingReceipt } from \\\"./OAppSender.sol\\\";\\n// @dev Import the 'Origin' so it's exposed to OApp implementers\\n// solhint-disable-next-line no-unused-import\\nimport { OAppReceiver, Origin } from \\\"./OAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OApp\\n * @dev Abstract contract serving as the base for OApp implementation, combining OAppSender and OAppReceiver functionality.\\n */\\nabstract contract OApp is OAppSender, OAppReceiver {\\n    /**\\n     * @dev Constructor to initialize the OApp with the provided endpoint and owner.\\n     * @param _endpoint The address of the LOCAL LayerZero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     */\\n    constructor(address _endpoint, address _delegate) OAppCore(_endpoint, _delegate) {}\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol implementation.\\n     * @return receiverVersion The version of the OAppReceiver.sol implementation.\\n     */\\n    function oAppVersion()\\n        public\\n        pure\\n        virtual\\n        override(OAppSender, OAppReceiver)\\n        returns (uint64 senderVersion, uint64 receiverVersion)\\n    {\\n        return (SENDER_VERSION, RECEIVER_VERSION);\\n    }\\n}\\n\",\"keccak256\":\"0xac362c4c291fad2f1511a968424b2e78a5ad502d1c867bd31da04be742aca8c5\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IOAppCore, ILayerZeroEndpointV2 } from \\\"./interfaces/IOAppCore.sol\\\";\\n\\n/**\\n * @title OAppCore\\n * @dev Abstract contract implementing the IOAppCore interface with basic OApp configurations.\\n */\\nabstract contract OAppCore is IOAppCore, Ownable {\\n    // The LayerZero endpoint associated with the given OApp\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n\\n    // Mapping to store peers associated with corresponding endpoints\\n    mapping(uint32 eid => bytes32 peer) public peers;\\n\\n    /**\\n     * @dev Constructor to initialize the OAppCore with the provided endpoint and delegate.\\n     * @param _endpoint The address of the LOCAL Layer Zero endpoint.\\n     * @param _delegate The delegate capable of making OApp configurations inside of the endpoint.\\n     *\\n     * @dev The delegate typically should be set as the owner of the contract.\\n     */\\n    constructor(address _endpoint, address _delegate) {\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n\\n        if (_delegate == address(0)) revert InvalidDelegate();\\n        endpoint.setDelegate(_delegate);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) public virtual onlyOwner {\\n        _setPeer(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     *\\n     * @dev Indicates that the peer is trusted to send LayerZero messages to this OApp.\\n     * @dev Set this to bytes32(0) to remove the peer address.\\n     * @dev Peer is a bytes32 to accommodate non-evm chains.\\n     */\\n    function _setPeer(uint32 _eid, bytes32 _peer) internal virtual {\\n        peers[_eid] = _peer;\\n        emit PeerSet(_eid, _peer);\\n    }\\n\\n    /**\\n     * @notice Internal function to get the peer address associated with a specific endpoint; reverts if NOT set.\\n     * ie. the peer is set to bytes32(0).\\n     * @param _eid The endpoint ID.\\n     * @return peer The address of the peer associated with the specified endpoint.\\n     */\\n    function _getPeerOrRevert(uint32 _eid) internal view virtual returns (bytes32) {\\n        bytes32 peer = peers[_eid];\\n        if (peer == bytes32(0)) revert NoPeer(_eid);\\n        return peer;\\n    }\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp.\\n     * @param _delegate The address of the delegate to be set.\\n     *\\n     * @dev Only the owner/admin of the OApp can call this function.\\n     * @dev Provides the ability for a delegate to set configs, on behalf of the OApp, directly on the Endpoint contract.\\n     */\\n    function setDelegate(address _delegate) public onlyOwner {\\n        endpoint.setDelegate(_delegate);\\n    }\\n}\\n\",\"keccak256\":\"0x13a9c2d1d2c1f086b8624f2e84c4a4702212daae36f701d92bb915b535cbe4cc\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { IOAppReceiver, Origin } from \\\"./interfaces/IOAppReceiver.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppReceiver\\n * @dev Abstract contract implementing the ILayerZeroReceiver interface and extending OAppCore for OApp receivers.\\n */\\nabstract contract OAppReceiver is IOAppReceiver, OAppCore {\\n    // Custom error message for when the caller is not the registered endpoint/\\n    error OnlyEndpoint(address addr);\\n\\n    // @dev The version of the OAppReceiver implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant RECEIVER_VERSION = 2;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppSender version. Indicates that the OAppSender is not implemented.\\n     * ie. this is a RECEIVE only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions.\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (0, RECEIVER_VERSION);\\n    }\\n\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @dev _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @dev _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement separate composeMsg senders that are NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata /*_origin*/,\\n        bytes calldata /*_message*/,\\n        address _sender\\n    ) public view virtual returns (bool) {\\n        return _sender == address(this);\\n    }\\n\\n    /**\\n     * @notice Checks if the path initialization is allowed based on the provided origin.\\n     * @param origin The origin information containing the source endpoint and sender address.\\n     * @return Whether the path has been initialized.\\n     *\\n     * @dev This indicates to the endpoint that the OApp has enabled msgs for this particular path to be received.\\n     * @dev This defaults to assuming if a peer has been set, its initialized.\\n     * Can be overridden by the OApp if there is other logic to determine this.\\n     */\\n    function allowInitializePath(Origin calldata origin) public view virtual returns (bool) {\\n        return peers[origin.srcEid] == origin.sender;\\n    }\\n\\n    /**\\n     * @notice Retrieves the next nonce for a given source endpoint and sender address.\\n     * @dev _srcEid The source endpoint ID.\\n     * @dev _sender The sender address.\\n     * @return nonce The next nonce.\\n     *\\n     * @dev The path nonce starts from 1. If 0 is returned it means that there is NO nonce ordered enforcement.\\n     * @dev Is required by the off-chain executor to determine the OApp expects msg execution is ordered.\\n     * @dev This is also enforced by the OApp.\\n     * @dev By default this is NOT enabled. ie. nextNonce is hardcoded to return 0.\\n     */\\n    function nextNonce(uint32 /*_srcEid*/, bytes32 /*_sender*/) public view virtual returns (uint64 nonce) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Entry point for receiving messages or packets from the endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _guid The unique identifier for the received LayerZero message.\\n     * @param _message The payload of the received message.\\n     * @param _executor The address of the executor for the received message.\\n     * @param _extraData Additional arbitrary data provided by the corresponding executor.\\n     *\\n     * @dev Entry point for receiving msg/packet from the LayerZero endpoint.\\n     */\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) public payable virtual {\\n        // Ensures that only the endpoint can attempt to lzReceive() messages to this OApp.\\n        if (address(endpoint) != msg.sender) revert OnlyEndpoint(msg.sender);\\n\\n        // Ensure that the sender matches the expected peer for the source endpoint.\\n        if (_getPeerOrRevert(_origin.srcEid) != _origin.sender) revert OnlyPeer(_origin.srcEid, _origin.sender);\\n\\n        // Call the internal OApp implementation of lzReceive.\\n        _lzReceive(_origin, _guid, _message, _executor, _extraData);\\n    }\\n\\n    /**\\n     * @dev Internal function to implement lzReceive logic without needing to copy the basic parameter validation.\\n     */\\n    function _lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x0174e9f1ec4cefe4b5adc26c392269c699b9ff75965364e5b7264426a462c70b\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OAppSender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { SafeERC20, IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MessagingParams, MessagingFee, MessagingReceipt } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\nimport { OAppCore } from \\\"./OAppCore.sol\\\";\\n\\n/**\\n * @title OAppSender\\n * @dev Abstract contract implementing the OAppSender functionality for sending messages to a LayerZero endpoint.\\n */\\nabstract contract OAppSender is OAppCore {\\n    using SafeERC20 for IERC20;\\n\\n    // Custom error messages\\n    error NotEnoughNative(uint256 msgValue);\\n    error LzTokenUnavailable();\\n\\n    // @dev The version of the OAppSender implementation.\\n    // @dev Version is bumped when changes are made to this contract.\\n    uint64 internal constant SENDER_VERSION = 1;\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     *\\n     * @dev Providing 0 as the default for OAppReceiver version. Indicates that the OAppReceiver is not implemented.\\n     * ie. this is a SEND only OApp.\\n     * @dev If the OApp uses both OAppSender and OAppReceiver, then this needs to be override returning the correct versions\\n     */\\n    function oAppVersion() public view virtual returns (uint64 senderVersion, uint64 receiverVersion) {\\n        return (SENDER_VERSION, 0);\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.quote() for fee calculation.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _payInLzToken Flag indicating whether to pay the fee in LZ tokens.\\n     * @return fee The calculated MessagingFee for the message.\\n     *      - nativeFee: The native fee for the message.\\n     *      - lzTokenFee: The LZ token fee for the message.\\n     */\\n    function _quote(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        bool _payInLzToken\\n    ) internal view virtual returns (MessagingFee memory fee) {\\n        return\\n            endpoint.quote(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _payInLzToken),\\n                address(this)\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to interact with the LayerZero EndpointV2.send() for sending a message.\\n     * @param _dstEid The destination endpoint ID.\\n     * @param _message The message payload.\\n     * @param _options Additional options for the message.\\n     * @param _fee The calculated LayerZero fee for the message.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess fee values sent to the endpoint.\\n     * @return receipt The receipt for the sent message.\\n     *      - guid: The unique identifier for the sent message.\\n     *      - nonce: The nonce of the sent message.\\n     *      - fee: The LayerZero fee incurred for the message.\\n     */\\n    function _lzSend(\\n        uint32 _dstEid,\\n        bytes memory _message,\\n        bytes memory _options,\\n        MessagingFee memory _fee,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt) {\\n        // @dev Push corresponding fees to the endpoint, any excess is sent back to the _refundAddress from the endpoint.\\n        uint256 messageValue = _payNative(_fee.nativeFee);\\n        if (_fee.lzTokenFee > 0) _payLzToken(_fee.lzTokenFee);\\n\\n        return\\n            // solhint-disable-next-line check-send-result\\n            endpoint.send{ value: messageValue }(\\n                MessagingParams(_dstEid, _getPeerOrRevert(_dstEid), _message, _options, _fee.lzTokenFee > 0),\\n                _refundAddress\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the native fee associated with the message.\\n     * @param _nativeFee The native fee to be paid.\\n     * @return nativeFee The amount of native currency paid.\\n     *\\n     * @dev If the OApp needs to initiate MULTIPLE LayerZero messages in a single transaction,\\n     * this will need to be overridden because msg.value would contain multiple lzFees.\\n     * @dev Should be overridden in the event the LayerZero endpoint requires a different native currency.\\n     * @dev Some EVMs use an ERC20 as a method for paying transactions/gasFees.\\n     * @dev The endpoint is EITHER/OR, ie. it will NOT support both types of native payment at a time.\\n     */\\n    function _payNative(uint256 _nativeFee) internal virtual returns (uint256 nativeFee) {\\n        if (msg.value != _nativeFee) revert NotEnoughNative(msg.value);\\n        return _nativeFee;\\n    }\\n\\n    /**\\n     * @dev Internal function to pay the LZ token fee associated with the message.\\n     * @param _lzTokenFee The LZ token fee to be paid.\\n     *\\n     * @dev If the caller is trying to pay in the specified lzToken, then the lzTokenFee is passed to the endpoint.\\n     * @dev Any excess sent, is passed back to the specified _refundAddress in the _lzSend().\\n     */\\n    function _payLzToken(uint256 _lzTokenFee) internal virtual {\\n        // @dev Cannot cache the token because it is not immutable in the endpoint.\\n        address lzToken = endpoint.lzToken();\\n        if (lzToken == address(0)) revert LzTokenUnavailable();\\n\\n        // Pay LZ token fee by sending tokens to the endpoint.\\n        IERC20(lzToken).safeTransferFrom(msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n}\\n\",\"keccak256\":\"0x518cf4adca601923ed4baa6619846a253ea32b8d8775f8bc1faa3dfac7f67c20\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\\\";\\n\\n/**\\n * @title IOAppCore\\n */\\ninterface IOAppCore {\\n    // Custom error messages\\n    error OnlyPeer(uint32 eid, bytes32 sender);\\n    error NoPeer(uint32 eid);\\n    error InvalidEndpointCall();\\n    error InvalidDelegate();\\n\\n    // Event emitted when a peer (OApp) is set for a corresponding endpoint\\n    event PeerSet(uint32 eid, bytes32 peer);\\n\\n    /**\\n     * @notice Retrieves the OApp version information.\\n     * @return senderVersion The version of the OAppSender.sol contract.\\n     * @return receiverVersion The version of the OAppReceiver.sol contract.\\n     */\\n    function oAppVersion() external view returns (uint64 senderVersion, uint64 receiverVersion);\\n\\n    /**\\n     * @notice Retrieves the LayerZero endpoint associated with the OApp.\\n     * @return iEndpoint The LayerZero endpoint as an interface.\\n     */\\n    function endpoint() external view returns (ILayerZeroEndpointV2 iEndpoint);\\n\\n    /**\\n     * @notice Retrieves the peer (OApp) associated with a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @return peer The peer address (OApp instance) associated with the corresponding endpoint.\\n     */\\n    function peers(uint32 _eid) external view returns (bytes32 peer);\\n\\n    /**\\n     * @notice Sets the peer address (OApp instance) for a corresponding endpoint.\\n     * @param _eid The endpoint ID.\\n     * @param _peer The address of the peer to be associated with the corresponding endpoint.\\n     */\\n    function setPeer(uint32 _eid, bytes32 _peer) external;\\n\\n    /**\\n     * @notice Sets the delegate address for the OApp Core.\\n     * @param _delegate The address of the delegate to be set.\\n     */\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0x40e49f2de74506e1da5dcaed53a39853f691647f4ceb0fccc8f49a68d3f47c58\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport { ILayerZeroReceiver, Origin } from \\\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\\\";\\n\\ninterface IOAppReceiver is ILayerZeroReceiver {\\n    /**\\n     * @notice Indicates whether an address is an approved composeMsg sender to the Endpoint.\\n     * @param _origin The origin information containing the source endpoint and sender address.\\n     *  - srcEid: The source chain endpoint ID.\\n     *  - sender: The sender address on the src chain.\\n     *  - nonce: The nonce of the message.\\n     * @param _message The lzReceive payload.\\n     * @param _sender The sender address.\\n     * @return isSender Is a valid sender.\\n     *\\n     * @dev Applications can optionally choose to implement a separate composeMsg sender that is NOT the bridging layer.\\n     * @dev The default sender IS the OAppReceiver implementer.\\n     */\\n    function isComposeMsgSender(\\n        Origin calldata _origin,\\n        bytes calldata _message,\\n        address _sender\\n    ) external view returns (bool isSender);\\n}\\n\",\"keccak256\":\"0xd26135185e19b3732746d4a9e2923e896f28dec8664bab161faea2ee26fcdc3d\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/interfaces/IOFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport { MessagingReceipt, MessagingFee } from \\\"../../oapp/OAppSender.sol\\\";\\n\\n/**\\n * @dev Struct representing token parameters for the OFT send() operation.\\n */\\nstruct SendParam {\\n    uint32 dstEid; // Destination endpoint ID.\\n    bytes32 to; // Recipient address.\\n    uint256 amountLD; // Amount to send in local decimals.\\n    uint256 minAmountLD; // Minimum amount to send in local decimals.\\n    bytes extraOptions; // Additional options supplied by the caller to be used in the LayerZero message.\\n    bytes composeMsg; // The composed message for the send() operation.\\n    bytes oftCmd; // The OFT command to be executed, unused in default OFT implementations.\\n}\\n\\n/**\\n * @dev Struct representing OFT limit information.\\n * @dev These amounts can change dynamically and are up the the specific oft implementation.\\n */\\nstruct OFTLimit {\\n    uint256 minAmountLD; // Minimum amount in local decimals that can be sent to the recipient.\\n    uint256 maxAmountLD; // Maximum amount in local decimals that can be sent to the recipient.\\n}\\n\\n/**\\n * @dev Struct representing OFT receipt information.\\n */\\nstruct OFTReceipt {\\n    uint256 amountSentLD; // Amount of tokens ACTUALLY debited from the sender in local decimals.\\n    // @dev In non-default implementations, the amountReceivedLD COULD differ from this value.\\n    uint256 amountReceivedLD; // Amount of tokens to be received on the remote side.\\n}\\n\\n/**\\n * @dev Struct representing OFT fee details.\\n * @dev Future proof mechanism to provide a standardized way to communicate fees to things like a UI.\\n */\\nstruct OFTFeeDetail {\\n    int256 feeAmountLD; // Amount of the fee in local decimals.\\n    string description; // Description of the fee.\\n}\\n\\n/**\\n * @title IOFT\\n * @dev Interface for the OftChain (OFT) token.\\n * @dev Does not inherit ERC20 to accommodate usage by OFTAdapter as well.\\n * @dev This specific interface ID is '0x02e49c2c'.\\n */\\ninterface IOFT {\\n    // Custom error messages\\n    error InvalidLocalDecimals();\\n    error SlippageExceeded(uint256 amountLD, uint256 minAmountLD);\\n\\n    // Events\\n    event OFTSent(\\n        bytes32 indexed guid, // GUID of the OFT message.\\n        uint32 dstEid, // Destination Endpoint ID.\\n        address indexed fromAddress, // Address of the sender on the src chain.\\n        uint256 amountSentLD, // Amount of tokens sent in local decimals.\\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\\n    );\\n    event OFTReceived(\\n        bytes32 indexed guid, // GUID of the OFT message.\\n        uint32 srcEid, // Source Endpoint ID.\\n        address indexed toAddress, // Address of the recipient on the dst chain.\\n        uint256 amountReceivedLD // Amount of tokens received in local decimals.\\n    );\\n\\n    /**\\n     * @notice Retrieves interfaceID and the version of the OFT.\\n     * @return interfaceId The interface ID.\\n     * @return version The version.\\n     *\\n     * @dev interfaceId: This specific interface ID is '0x02e49c2c'.\\n     * @dev version: Indicates a cross-chain compatible msg encoding with other OFTs.\\n     * @dev If a new feature is added to the OFT cross-chain msg encoding, the version will be incremented.\\n     * ie. localOFT version(x,1) CAN send messages to remoteOFT version(x,1)\\n     */\\n    function oftVersion() external view returns (bytes4 interfaceId, uint64 version);\\n\\n    /**\\n     * @notice Retrieves the address of the token associated with the OFT.\\n     * @return token The address of the ERC20 token implementation.\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\\n     * @return requiresApproval Needs approval of the underlying token implementation.\\n     *\\n     * @dev Allows things like wallet implementers to determine integration requirements,\\n     * without understanding the underlying token implementation.\\n     */\\n    function approvalRequired() external view returns (bool);\\n\\n    /**\\n     * @notice Retrieves the shared decimals of the OFT.\\n     * @return sharedDecimals The shared decimals of the OFT.\\n     */\\n    function sharedDecimals() external view returns (uint8);\\n\\n    /**\\n     * @notice Provides a quote for OFT-related operations.\\n     * @param _sendParam The parameters for the send operation.\\n     * @return limit The OFT limit information.\\n     * @return oftFeeDetails The details of OFT fees.\\n     * @return receipt The OFT receipt information.\\n     */\\n    function quoteOFT(\\n        SendParam calldata _sendParam\\n    ) external view returns (OFTLimit memory, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory);\\n\\n    /**\\n     * @notice Provides a quote for the send() operation.\\n     * @param _sendParam The parameters for the send() operation.\\n     * @param _payInLzToken Flag indicating whether the caller is paying in the LZ token.\\n     * @return fee The calculated LayerZero messaging fee from the send() operation.\\n     *\\n     * @dev MessagingFee: LayerZero msg fee\\n     *  - nativeFee: The native fee.\\n     *  - lzTokenFee: The lzToken fee.\\n     */\\n    function quoteSend(SendParam calldata _sendParam, bool _payInLzToken) external view returns (MessagingFee memory);\\n\\n    /**\\n     * @notice Executes the send() operation.\\n     * @param _sendParam The parameters for the send operation.\\n     * @param _fee The fee information supplied by the caller.\\n     *      - nativeFee: The native fee.\\n     *      - lzTokenFee: The lzToken fee.\\n     * @param _refundAddress The address to receive any excess funds from fees etc. on the src.\\n     * @return receipt The LayerZero messaging receipt from the send() operation.\\n     * @return oftReceipt The OFT receipt information.\\n     *\\n     * @dev MessagingReceipt: LayerZero msg receipt\\n     *  - guid: The unique identifier for the sent message.\\n     *  - nonce: The nonce of the sent message.\\n     *  - fee: The LayerZero fee incurred for the message.\\n     */\\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory, OFTReceipt memory);\\n}\\n\",\"keccak256\":\"0x42431bdbe135f7cfefd0be6cd345a6a1045124f6ea707a06756ef2322140eef5\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/libs/OFTComposeMsgCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nlibrary OFTComposeMsgCodec {\\n    // Offset constants for decoding composed messages\\n    uint8 private constant NONCE_OFFSET = 8;\\n    uint8 private constant SRC_EID_OFFSET = 12;\\n    uint8 private constant AMOUNT_LD_OFFSET = 44;\\n    uint8 private constant COMPOSE_FROM_OFFSET = 76;\\n\\n    /**\\n     * @dev Encodes a OFT composed message.\\n     * @param _nonce The nonce value.\\n     * @param _srcEid The source endpoint ID.\\n     * @param _amountLD The amount in local decimals.\\n     * @param _composeMsg The composed message.\\n     * @return _msg The encoded Composed message.\\n     */\\n    function encode(\\n        uint64 _nonce,\\n        uint32 _srcEid,\\n        uint256 _amountLD,\\n        bytes memory _composeMsg // 0x[composeFrom][composeMsg]\\n    ) internal pure returns (bytes memory _msg) {\\n        _msg = abi.encodePacked(_nonce, _srcEid, _amountLD, _composeMsg);\\n    }\\n\\n    /**\\n     * @dev Retrieves the nonce from the composed message.\\n     * @param _msg The message.\\n     * @return The nonce value.\\n     */\\n    function nonce(bytes calldata _msg) internal pure returns (uint64) {\\n        return uint64(bytes8(_msg[:NONCE_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the source endpoint ID from the composed message.\\n     * @param _msg The message.\\n     * @return The source endpoint ID.\\n     */\\n    function srcEid(bytes calldata _msg) internal pure returns (uint32) {\\n        return uint32(bytes4(_msg[NONCE_OFFSET:SRC_EID_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the amount in local decimals from the composed message.\\n     * @param _msg The message.\\n     * @return The amount in local decimals.\\n     */\\n    function amountLD(bytes calldata _msg) internal pure returns (uint256) {\\n        return uint256(bytes32(_msg[SRC_EID_OFFSET:AMOUNT_LD_OFFSET]));\\n    }\\n\\n    /**\\n     * @dev Retrieves the composeFrom value from the composed message.\\n     * @param _msg The message.\\n     * @return The composeFrom value.\\n     */\\n    function composeFrom(bytes calldata _msg) internal pure returns (bytes32) {\\n        return bytes32(_msg[AMOUNT_LD_OFFSET:COMPOSE_FROM_OFFSET]);\\n    }\\n\\n    /**\\n     * @dev Retrieves the composed message.\\n     * @param _msg The message.\\n     * @return The composed message.\\n     */\\n    function composeMsg(bytes calldata _msg) internal pure returns (bytes memory) {\\n        return _msg[COMPOSE_FROM_OFFSET:];\\n    }\\n\\n    /**\\n     * @dev Converts an address to bytes32.\\n     * @param _addr The address to convert.\\n     * @return The bytes32 representation of the address.\\n     */\\n    function addressToBytes32(address _addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_addr)));\\n    }\\n\\n    /**\\n     * @dev Converts bytes32 to an address.\\n     * @param _b The bytes32 value to convert.\\n     * @return The address representation of bytes32.\\n     */\\n    function bytes32ToAddress(bytes32 _b) internal pure returns (address) {\\n        return address(uint160(uint256(_b)));\\n    }\\n}\\n\",\"keccak256\":\"0xfbdaf41743232e6ff64cd00b495ee854d0225e2bb73a66fe9b413d2780359902\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroEndpointV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { IMessageLibManager } from \\\"./IMessageLibManager.sol\\\";\\nimport { IMessagingComposer } from \\\"./IMessagingComposer.sol\\\";\\nimport { IMessagingChannel } from \\\"./IMessagingChannel.sol\\\";\\nimport { IMessagingContext } from \\\"./IMessagingContext.sol\\\";\\n\\nstruct MessagingParams {\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    bytes message;\\n    bytes options;\\n    bool payInLzToken;\\n}\\n\\nstruct MessagingReceipt {\\n    bytes32 guid;\\n    uint64 nonce;\\n    MessagingFee fee;\\n}\\n\\nstruct MessagingFee {\\n    uint256 nativeFee;\\n    uint256 lzTokenFee;\\n}\\n\\nstruct Origin {\\n    uint32 srcEid;\\n    bytes32 sender;\\n    uint64 nonce;\\n}\\n\\nenum ExecutionState {\\n    NotExecutable,\\n    Executable,\\n    Executed\\n}\\n\\ninterface ILayerZeroEndpointV2 is IMessageLibManager, IMessagingComposer, IMessagingChannel, IMessagingContext {\\n    event PacketSent(bytes encodedPayload, bytes options, address sendLibrary);\\n\\n    event PacketVerified(Origin origin, address receiver, bytes32 payloadHash);\\n\\n    event PacketDelivered(Origin origin, address receiver);\\n\\n    event LzReceiveAlert(\\n        address indexed receiver,\\n        address indexed executor,\\n        Origin origin,\\n        bytes32 guid,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    event LzTokenSet(address token);\\n\\n    function quote(MessagingParams calldata _params, address _sender) external view returns (MessagingFee memory);\\n\\n    function send(\\n        MessagingParams calldata _params,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory);\\n\\n    function verify(Origin calldata _origin, address _receiver, bytes32 _payloadHash) external;\\n\\n    function verifiable(\\n        Origin calldata _origin,\\n        address _receiver,\\n        address _receiveLib,\\n        bytes32 _payloadHash\\n    ) external view returns (bool);\\n\\n    function executable(Origin calldata _origin, address _receiver) external view returns (ExecutionState);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        address _receiver,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n\\n    // oapp can burn messages partially by calling this function with its own business logic if messages are verified in order\\n    function clear(address _oapp, Origin calldata _origin, bytes32 _guid, bytes calldata _message) external;\\n\\n    function setLzToken(address _lzToken) external;\\n\\n    function lzToken() external view returns (address);\\n\\n    function nativeToken() external view returns (address);\\n\\n    function setDelegate(address _delegate) external;\\n}\\n\",\"keccak256\":\"0xbc3b4a31ccf905e2f61fe248c57da6591670d286e910d634502598c490c7c671\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nimport { Origin } from \\\"./ILayerZeroEndpointV2.sol\\\";\\n\\ninterface ILayerZeroReceiver {\\n    function allowInitializePath(Origin calldata _origin) external view returns (bool);\\n\\n    // todo: move to OAppReceiver? it is just convention for executor. we may can change it in a new Receiver version\\n    function nextNonce(uint32 _eid, bytes32 _sender) external view returns (uint64);\\n\\n    function lzReceive(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        bytes calldata _message,\\n        address _executor,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x236fc24440589ea45c226b24397632b2b1f328818151be3d791df9e286596fbb\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessageLibManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\nstruct SetConfigParam {\\n    uint32 eid;\\n    uint32 configType;\\n    bytes config;\\n}\\n\\ninterface IMessageLibManager {\\n    struct Timeout {\\n        address lib;\\n        uint256 expiry;\\n    }\\n\\n    event LibraryRegistered(address newLib);\\n    event DefaultSendLibrarySet(uint32 eid, address newLib);\\n    event DefaultReceiveLibrarySet(uint32 eid, address oldLib, address newLib);\\n    event DefaultReceiveLibraryTimeoutSet(uint32 eid, address oldLib, uint256 expiry);\\n    event SendLibrarySet(address sender, uint32 eid, address newLib);\\n    event ReceiveLibrarySet(address receiver, uint32 eid, address oldLib, address newLib);\\n    event ReceiveLibraryTimeoutSet(address receiver, uint32 eid, address oldLib, uint256 timeout);\\n\\n    function registerLibrary(address _lib) external;\\n\\n    function isRegisteredLibrary(address _lib) external view returns (bool);\\n\\n    function getRegisteredLibraries() external view returns (address[] memory);\\n\\n    function setDefaultSendLibrary(uint32 _eid, address _newLib) external;\\n\\n    function defaultSendLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibrary(uint32 _eid, address _newLib, uint256 _timeout) external;\\n\\n    function defaultReceiveLibrary(uint32 _eid) external view returns (address);\\n\\n    function setDefaultReceiveLibraryTimeout(uint32 _eid, address _lib, uint256 _expiry) external;\\n\\n    function defaultReceiveLibraryTimeout(uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function isSupportedEid(uint32 _eid) external view returns (bool);\\n\\n    /// ------------------- OApp interfaces -------------------\\n    function setSendLibrary(address _oapp, uint32 _eid, address _newLib) external;\\n\\n    function getSendLibrary(address _sender, uint32 _eid) external view returns (address lib);\\n\\n    function isDefaultSendLibrary(address _sender, uint32 _eid) external view returns (bool);\\n\\n    function setReceiveLibrary(address _oapp, uint32 _eid, address _newLib, uint256 _gracePeriod) external;\\n\\n    function getReceiveLibrary(address _receiver, uint32 _eid) external view returns (address lib, bool isDefault);\\n\\n    function setReceiveLibraryTimeout(address _oapp, uint32 _eid, address _lib, uint256 _gracePeriod) external;\\n\\n    function receiveLibraryTimeout(address _receiver, uint32 _eid) external view returns (address lib, uint256 expiry);\\n\\n    function setConfig(address _oapp, address _lib, SetConfigParam[] calldata _params) external;\\n\\n    function getConfig(\\n        address _oapp,\\n        address _lib,\\n        uint32 _eid,\\n        uint32 _configType\\n    ) external view returns (bytes memory config);\\n}\\n\",\"keccak256\":\"0xe47b048f28b0705b66bdd62c62990c0d068ce0568c15962c2d6f2feed3fdf06e\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingChannel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingChannel {\\n    event InboundNonceSkipped(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce);\\n    event PacketNilified(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n    event PacketBurnt(uint32 srcEid, bytes32 sender, address receiver, uint64 nonce, bytes32 payloadHash);\\n\\n    function eid() external view returns (uint32);\\n\\n    // this is an emergency function if a message cannot be verified for some reasons\\n    // required to provide _nextNonce to avoid race condition\\n    function skip(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce) external;\\n\\n    function nilify(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function burn(address _oapp, uint32 _srcEid, bytes32 _sender, uint64 _nonce, bytes32 _payloadHash) external;\\n\\n    function nextGuid(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (bytes32);\\n\\n    function inboundNonce(address _receiver, uint32 _srcEid, bytes32 _sender) external view returns (uint64);\\n\\n    function outboundNonce(address _sender, uint32 _dstEid, bytes32 _receiver) external view returns (uint64);\\n\\n    function inboundPayloadHash(\\n        address _receiver,\\n        uint32 _srcEid,\\n        bytes32 _sender,\\n        uint64 _nonce\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x37e57a48c2019d37d77913bed32a349c2958423723bac6aa75cf271b57d8ba51\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingComposer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingComposer {\\n    event ComposeSent(address from, address to, bytes32 guid, uint16 index, bytes message);\\n    event ComposeDelivered(address from, address to, bytes32 guid, uint16 index);\\n    event LzComposeAlert(\\n        address indexed from,\\n        address indexed to,\\n        address indexed executor,\\n        bytes32 guid,\\n        uint16 index,\\n        uint256 gas,\\n        uint256 value,\\n        bytes message,\\n        bytes extraData,\\n        bytes reason\\n    );\\n\\n    function composeQueue(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index\\n    ) external view returns (bytes32 messageHash);\\n\\n    function sendCompose(address _to, bytes32 _guid, uint16 _index, bytes calldata _message) external;\\n\\n    function lzCompose(\\n        address _from,\\n        address _to,\\n        bytes32 _guid,\\n        uint16 _index,\\n        bytes calldata _message,\\n        bytes calldata _extraData\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x85bc7090134529ec474866dc4bb1c48692d518c756eb0a961c82574829c51901\",\"license\":\"MIT\"},\"@layerzerolabs/lz-evm-protocol-v2/contracts/interfaces/IMessagingContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessagingContext {\\n    function isSendingMessage() external view returns (bool);\\n\\n    function getSendContext() external view returns (uint32 dstEid, address sender);\\n}\\n\",\"keccak256\":\"0xff0c546c2813dae3e440882f46b377375f7461b0714efd80bd3f0c6e5cb8da4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"src/StargateBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ILayerZeroEndpointV2 } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/interfaces/IOAppCore.sol\\\";\\nimport { Origin } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OApp.sol\\\";\\n// Solidity does not support splitting import across multiple lines\\n// solhint-disable-next-line max-line-length\\nimport { OFTLimit, OFTFeeDetail, OFTReceipt, SendParam, MessagingReceipt, MessagingFee, IOFT } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/interfaces/IOFT.sol\\\";\\nimport { OFTComposeMsgCodec } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/libs/OFTComposeMsgCodec.sol\\\";\\n\\nimport { IStargate, Ticket } from \\\"./interfaces/IStargate.sol\\\";\\nimport { IStargateFeeLib, FeeParams } from \\\"./interfaces/IStargateFeeLib.sol\\\";\\nimport { ITokenMessaging, RideBusParams, TaxiParams } from \\\"./interfaces/ITokenMessaging.sol\\\";\\nimport { ITokenMessagingHandler } from \\\"./interfaces/ITokenMessagingHandler.sol\\\";\\nimport { ICreditMessagingHandler, Credit, TargetCredit } from \\\"./interfaces/ICreditMessagingHandler.sol\\\";\\nimport { Path } from \\\"./libs/Path.sol\\\";\\nimport { Transfer } from \\\"./libs/Transfer.sol\\\";\\n\\n/// @title The base contract for StargateOFT, StargatePool, StargatePoolMigratable, and StargatePoolNative.\\nabstract contract StargateBase is Transfer, IStargate, ITokenMessagingHandler, ICreditMessagingHandler {\\n    using SafeCast for uint256;\\n\\n    // Stargate status\\n    uint8 internal constant NOT_ENTERED = 1;\\n    uint8 internal constant ENTERED = 2;\\n    uint8 internal constant PAUSED = 3;\\n\\n    /// @dev The token for the Pool or OFT.\\n    /// @dev address(0) indicates native coin, such as ETH.\\n    address public immutable override token;\\n    /// @dev The shared decimals (lowest common decimals between chains).\\n    uint8 public immutable override sharedDecimals;\\n    /// @dev The rate between local decimals and shared decimals.\\n    uint256 internal immutable convertRate;\\n\\n    /// @dev The local LayerZero EndpointV2.\\n    ILayerZeroEndpointV2 public immutable endpoint;\\n    /// @dev The local LayerZero endpoint ID\\n    uint32 public immutable localEid;\\n\\n    address internal feeLib;\\n    /// @dev The StargateBase status.  Options include 1. NOT_ENTERED 2. ENTERED and 3. PAUSED.\\n    uint8 public status = NOT_ENTERED;\\n    /// @dev The treasury accrued fees, stored in SD.\\n    uint64 public treasuryFee;\\n\\n    address internal creditMessaging;\\n    address internal lzToken;\\n    address internal planner;\\n    address internal tokenMessaging;\\n    address internal treasurer;\\n\\n    /// @dev Mapping of paths from this chain to other chains identified by their endpoint ID.\\n    mapping(uint32 eid => Path path) public paths;\\n\\n    /// @dev A store for tokens that could not be delivered because _outflow() failed.\\n    /// @dev retryReceiveToken() can be called to retry the receive.\\n    mapping(bytes32 guid => mapping(uint8 index => bytes32 hash)) public unreceivedTokens;\\n\\n    modifier onlyCaller(address _caller) {\\n        if (msg.sender != _caller) revert Stargate_Unauthorized();\\n        _;\\n    }\\n\\n    modifier nonReentrantAndNotPaused() {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        if (status != NOT_ENTERED) {\\n            if (status == ENTERED) revert Stargate_ReentrantCall();\\n            revert Stargate_Paused();\\n        }\\n        // Any calls to nonReentrant after this point will fail\\n        status = ENTERED;\\n        _;\\n        status = NOT_ENTERED;\\n    }\\n\\n    error Stargate_ReentrantCall();\\n    error Stargate_InvalidTokenDecimals();\\n    error Stargate_Unauthorized();\\n    error Stargate_SlippageTooHigh();\\n    error Stargate_UnreceivedTokenNotFound();\\n    error Stargate_OutflowFailed();\\n    error Stargate_InvalidAmount();\\n    error Stargate_InsufficientFare();\\n    error Stargate_InvalidPath();\\n    error Stargate_LzTokenUnavailable();\\n    error Stargate_Paused();\\n    error Stargate_RecoverTokenUnsupported();\\n\\n    event AddressConfigSet(AddressConfig config);\\n    event CreditsSent(uint32 dstEid, Credit[] credits);\\n    event CreditsReceived(uint32 srcEid, Credit[] credits);\\n    event UnreceivedTokenCached(\\n        bytes32 guid,\\n        uint8 index,\\n        uint32 srcEid,\\n        address receiver,\\n        uint256 amountLD,\\n        bytes composeMsg\\n    );\\n    event OFTPathSet(uint32 dstEid, bool oft);\\n    event PauseSet(bool paused);\\n    event PlannerFeeWithdrawn(uint256 amount);\\n    event TreasuryFeeAdded(uint64 amountSD);\\n    event TreasuryFeeWithdrawn(address to, uint64 amountSD);\\n\\n    struct AddressConfig {\\n        address feeLib;\\n        address planner;\\n        address treasurer;\\n        address tokenMessaging;\\n        address creditMessaging;\\n        address lzToken;\\n    }\\n\\n    /// @notice Create a new Stargate contract\\n    /// @dev Reverts with InvalidTokenDecimals if the token decimals are smaller than the shared decimals.\\n    /// @param _token The token for the pool or oft. If the token is address(0), it is the native coin\\n    /// @param _tokenDecimals The number of decimals for this tokens implementation on this chain\\n    /// @param _sharedDecimals The number of decimals shared between all implementations of the OFT\\n    /// @param _endpoint The LZ endpoint contract\\n    /// @param _owner The owner of this contract\\n    constructor(address _token, uint8 _tokenDecimals, uint8 _sharedDecimals, address _endpoint, address _owner) {\\n        token = _token;\\n        if (_tokenDecimals < _sharedDecimals) revert Stargate_InvalidTokenDecimals();\\n        convertRate = 10 ** (_tokenDecimals - _sharedDecimals);\\n        sharedDecimals = _sharedDecimals;\\n\\n        endpoint = ILayerZeroEndpointV2(_endpoint);\\n        localEid = endpoint.eid();\\n        _transferOwnership(_owner);\\n    }\\n\\n    // ---------------------------------- Only Owner ------------------------------------------\\n\\n    /// @notice Configure the roles for this contract.\\n    /// @param _config An AddressConfig object containing the addresses for the different roles used by Stargate.\\n    function setAddressConfig(AddressConfig calldata _config) external onlyOwner {\\n        feeLib = _config.feeLib;\\n        planner = _config.planner;\\n        treasurer = _config.treasurer;\\n        tokenMessaging = _config.tokenMessaging;\\n        creditMessaging = _config.creditMessaging;\\n        lzToken = _config.lzToken;\\n        emit AddressConfigSet(_config);\\n    }\\n\\n    /// @notice Sets a given Path as using OFT or resets it from OFT.\\n    /// @dev Set the path as OFT if the remote chain is using OFT.\\n    /// @dev When migrating from OFT to pool on remote chain (e.g. migrate USDC to circles), reset the path to non-OFT.\\n    /// @dev Reverts with InvalidPath if the destination chain is the same as local.\\n    /// @param _dstEid The destination chain endpoint ID\\n    /// @param _oft Whether to set or reset the path\\n    function setOFTPath(uint32 _dstEid, bool _oft) external onlyOwner {\\n        if (_dstEid == localEid) revert Stargate_InvalidPath();\\n        paths[_dstEid].setOFTPath(_oft);\\n        emit OFTPathSet(_dstEid, _oft);\\n    }\\n\\n    // ---------------------------------- Only Treasurer ------------------------------------------\\n\\n    /// @notice Withdraw from the accrued fees in the treasury.\\n    /// @param _to The destination account\\n    /// @param _amountSD The amount to withdraw in SD\\n    function withdrawTreasuryFee(address _to, uint64 _amountSD) external onlyCaller(treasurer) {\\n        treasuryFee -= _amountSD;\\n        _safeOutflow(_to, _sd2ld(_amountSD));\\n        emit TreasuryFeeWithdrawn(_to, _amountSD);\\n    }\\n\\n    /// @notice Add tokens to the treasury, from the senders account.\\n    /// @dev Only used for increasing the overall budget for transaction rewards\\n    /// @dev The treasuryFee is essentially the reward pool.\\n    /// @dev Rewards are capped to the treasury amount, which limits exposure so\\n    /// @dev Stargate does not pay beyond what it's charged.\\n    /// @param _amountLD The amount to add in LD\\n    function addTreasuryFee(uint256 _amountLD) external payable onlyCaller(treasurer) {\\n        _assertMsgValue(_amountLD);\\n        uint64 amountSD = _inflow(msg.sender, _amountLD);\\n        treasuryFee += amountSD;\\n        emit TreasuryFeeAdded(amountSD);\\n    }\\n\\n    /// @dev Recover tokens sent to this contract by mistake.\\n    /// @dev Only the treasurer can recover the token.\\n    /// @dev Reverts with Stargate_RecoverTokenUnsupported if the treasurer attempts to withdraw StargateBase.token().\\n    /// @param _token the token to recover. if 0x0 then it is native token\\n    /// @param _to the address to send the token to\\n    /// @param _amount the amount to send\\n    function recoverToken(\\n        address _token,\\n        address _to,\\n        uint256 _amount\\n    ) public virtual nonReentrantAndNotPaused onlyCaller(treasurer) returns (uint256) {\\n        /// @dev Excess native is considered planner accumulated fees.\\n        if (_token == address(0)) revert Stargate_RecoverTokenUnsupported();\\n        Transfer.safeTransfer(_token, _to, _amount, false);\\n        return _amount;\\n    }\\n\\n    // ---------------------------------- Only Planner ------------------------------------------\\n\\n    /// @notice Pause or unpause a Stargate\\n    /// @dev Be careful with this call, as it unsets the re-entry guard.\\n    /// @param _paused Whether to pause or unpause the stargate\\n    function setPause(bool _paused) external onlyCaller(planner) {\\n        if (status == ENTERED) revert Stargate_ReentrantCall();\\n        status = _paused ? PAUSED : NOT_ENTERED;\\n        emit PauseSet(_paused);\\n    }\\n\\n    function _plannerFee() internal view virtual returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function plannerFee() external view returns (uint256 available) {\\n        available = _plannerFee();\\n    }\\n\\n    /// @notice Withdraw planner fees accumulated in StargateBase.\\n    /// @dev The planner fee is accumulated in StargateBase to avoid the cost of passing msg.value to TokenMessaging.\\n    function withdrawPlannerFee() external virtual onlyCaller(planner) {\\n        uint256 available = _plannerFee();\\n        Transfer.safeTransferNative(msg.sender, available, false);\\n        emit PlannerFeeWithdrawn(available);\\n    }\\n\\n    // ------------------------------- Public Functions ---------------------------------------\\n\\n    /// @notice Send tokens through the Stargate\\n    /// @dev Emits OFTSent when the send is successful\\n    /// @param _sendParam The SendParam object detailing the transaction\\n    /// @param _fee The MessagingFee object describing the fee to pay\\n    /// @param _refundAddress The address to refund any LZ fees paid in excess\\n    /// @return msgReceipt The receipt proving the message was sent\\n    /// @return oftReceipt The receipt proving the OFT swap\\n    function send(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable override returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt) {\\n        (msgReceipt, oftReceipt, ) = sendToken(_sendParam, _fee, _refundAddress);\\n    }\\n\\n    function sendToken(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    )\\n        public\\n        payable\\n        override\\n        nonReentrantAndNotPaused\\n        returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt, Ticket memory ticket)\\n    {\\n        // step 1: assets inflows and apply the fee to the input amount\\n        (bool isTaxi, uint64 amountInSD, uint64 amountOutSD) = _inflowAndCharge(_sendParam);\\n\\n        // step 2: generate the oft receipt\\n        oftReceipt = OFTReceipt(_sd2ld(amountInSD), _sd2ld(amountOutSD));\\n\\n        // step 3: assert the messaging fee\\n        MessagingFee memory messagingFee = _assertMessagingFee(_fee, oftReceipt.amountSentLD);\\n\\n        // step 4: send the token depending on the mode Taxi or Bus\\n        if (isTaxi) {\\n            msgReceipt = _taxi(_sendParam, messagingFee, amountOutSD, _refundAddress);\\n        } else {\\n            (msgReceipt, ticket) = _rideBus(_sendParam, messagingFee, amountOutSD, _refundAddress);\\n        }\\n\\n        emit OFTSent(\\n            msgReceipt.guid,\\n            _sendParam.dstEid,\\n            msg.sender,\\n            oftReceipt.amountSentLD,\\n            oftReceipt.amountReceivedLD\\n        );\\n    }\\n\\n    /// @notice Retry receiving a token that initially failed.\\n    /// @dev The message has been delivered by the Messaging layer, so it is ok for anyone to retry.\\n    /// @dev try to receive the token if the previous attempt failed in lzReceive\\n    /// @dev Reverts with UnreceivedTokenNotFound if the message is not found in the cache\\n    /// @dev Emits OFTReceived if the receive succeeds\\n    /// @param _guid The global unique ID for the message that failed\\n    /// @param _index The index of the message that failed\\n    /// @param _srcEid The source endpoint ID for the message that failed\\n    /// @param _receiver The account receiver for the message that failed\\n    /// @param _amountLD The amount of tokens in LD to transfer to the account\\n    /// @param _composeMsg The bytes representing the compose message in the message that failed\\n    function retryReceiveToken(\\n        bytes32 _guid,\\n        uint8 _index,\\n        uint32 _srcEid,\\n        address _receiver,\\n        uint256 _amountLD,\\n        bytes calldata _composeMsg\\n    ) external nonReentrantAndNotPaused {\\n        if (unreceivedTokens[_guid][_index] != keccak256(abi.encodePacked(_srcEid, _receiver, _amountLD, _composeMsg)))\\n            revert Stargate_UnreceivedTokenNotFound();\\n        delete unreceivedTokens[_guid][_index];\\n\\n        _safeOutflow(_receiver, _amountLD);\\n        _postOutflow(_ld2sd(_amountLD));\\n        if (_composeMsg.length > 0) {\\n            endpoint.sendCompose(_receiver, _guid, 0, _composeMsg);\\n        }\\n        emit OFTReceived(_guid, _srcEid, _receiver, _amountLD);\\n    }\\n\\n    // ------------------------------- Only Messaging ---------------------------------------\\n\\n    /// @notice Entrypoint for receiving tokens\\n    /// @dev Emits OFTReceived when the OFT token is correctly received\\n    /// @dev Emits UnreceivedTokenCached when the OFT token is not received\\n    /// @param _origin The Origin struct describing the origin, useful for composing\\n    /// @param _guid The global unique ID for this message, useful for composing\\n    function receiveTokenBus(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        uint8 _seatNumber,\\n        address _receiver,\\n        uint64 _amountSD\\n    ) external nonReentrantAndNotPaused onlyCaller(tokenMessaging) {\\n        uint256 amountLD = _sd2ld(_amountSD);\\n\\n        bool success = _outflow(_receiver, amountLD);\\n        if (success) {\\n            _postOutflow(_amountSD);\\n            emit OFTReceived(_guid, _origin.srcEid, _receiver, amountLD);\\n        } else {\\n            /**\\n             * @dev The busRide mode does not support composeMsg in any form. Thus we hardcode it to \\\"\\\"\\n             */\\n            unreceivedTokens[_guid][_seatNumber] = keccak256(abi.encodePacked(_origin.srcEid, _receiver, amountLD, \\\"\\\"));\\n            emit UnreceivedTokenCached(_guid, _seatNumber, _origin.srcEid, _receiver, amountLD, \\\"\\\");\\n        }\\n    }\\n\\n    // taxi mode\\n    function receiveTokenTaxi(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        address _receiver,\\n        uint64 _amountSD,\\n        bytes calldata _composeMsg\\n    ) external nonReentrantAndNotPaused onlyCaller(tokenMessaging) {\\n        uint256 amountLD = _sd2ld(_amountSD);\\n        bool hasCompose = _composeMsg.length > 0;\\n        bytes memory composeMsg;\\n        if (hasCompose) {\\n            composeMsg = OFTComposeMsgCodec.encode(_origin.nonce, _origin.srcEid, amountLD, _composeMsg);\\n        }\\n\\n        bool success = _outflow(_receiver, amountLD);\\n        if (success) {\\n            _postOutflow(_amountSD);\\n            // send the composeMsg to the endpoint\\n            if (hasCompose) {\\n                endpoint.sendCompose(_receiver, _guid, 0, composeMsg);\\n            }\\n            emit OFTReceived(_guid, _origin.srcEid, _receiver, amountLD);\\n        } else {\\n            /**\\n             * @dev We use the '0' index to represent the seat number. This is because for a type 'taxi' msg,\\n             *      there is only ever one corresponding receiveTokenTaxi function per GUID.\\n             */\\n            unreceivedTokens[_guid][0] = keccak256(abi.encodePacked(_origin.srcEid, _receiver, amountLD, composeMsg));\\n            emit UnreceivedTokenCached(_guid, 0, _origin.srcEid, _receiver, amountLD, composeMsg);\\n        }\\n    }\\n\\n    function sendCredits(\\n        uint32 _dstEid,\\n        TargetCredit[] calldata _credits\\n    ) external nonReentrantAndNotPaused onlyCaller(creditMessaging) returns (Credit[] memory) {\\n        Credit[] memory credits = new Credit[](_credits.length);\\n        uint256 index = 0;\\n        for (uint256 i = 0; i < _credits.length; i++) {\\n            TargetCredit calldata c = _credits[i];\\n            uint64 decreased = paths[c.srcEid].tryDecreaseCredit(c.amount, c.minAmount);\\n            if (decreased > 0) credits[index++] = Credit(c.srcEid, decreased);\\n        }\\n        // resize the array to the actual number of credits\\n        assembly {\\n            mstore(credits, index)\\n        }\\n        emit CreditsSent(_dstEid, credits);\\n        return credits;\\n    }\\n\\n    /// @notice Entrypoint for receiving credits into paths\\n    /// @dev Emits CreditsReceived when credits are received\\n    /// @param _srcEid The endpoint ID of the source of credits\\n    /// @param _credits An array indicating to which paths and how much credits to add\\n    function receiveCredits(\\n        uint32 _srcEid,\\n        Credit[] calldata _credits\\n    ) external nonReentrantAndNotPaused onlyCaller(creditMessaging) {\\n        for (uint256 i = 0; i < _credits.length; i++) {\\n            Credit calldata c = _credits[i];\\n            paths[c.srcEid].increaseCredit(c.amount);\\n        }\\n        emit CreditsReceived(_srcEid, _credits);\\n    }\\n\\n    // ---------------------------------- View Functions ------------------------------------------\\n\\n    /// @notice Provides a quote for sending OFT to another chain.\\n    /// @dev Implements the IOFT interface\\n    /// @param _sendParam The parameters for the send operation\\n    /// @return limit The information on OFT transfer limits\\n    /// @return oftFeeDetails The details of OFT transaction cost or reward\\n    /// @return receipt The OFT receipt information, indicating how many tokens would be sent and received\\n    function quoteOFT(\\n        SendParam calldata _sendParam\\n    ) external view returns (OFTLimit memory limit, OFTFeeDetail[] memory oftFeeDetails, OFTReceipt memory receipt) {\\n        // cap the transfer to the paths limit\\n        limit = OFTLimit(_sd2ld(1), _sd2ld(paths[_sendParam.dstEid].credit));\\n\\n        // get the expected amount in the destination chain from FeeLib\\n        uint64 amountInSD = _ld2sd(_sendParam.amountLD > limit.maxAmountLD ? limit.maxAmountLD : _sendParam.amountLD);\\n        FeeParams memory params = _buildFeeParams(_sendParam.dstEid, amountInSD, _isTaxiMode(_sendParam.oftCmd));\\n        uint64 amountOutSD = IStargateFeeLib(feeLib).applyFeeView(params);\\n\\n        // fill in the FeeDetails if there is a fee or reward\\n        if (amountOutSD != amountInSD) {\\n            oftFeeDetails = new OFTFeeDetail[](1);\\n            if (amountOutSD < amountInSD) {\\n                // fee\\n                oftFeeDetails[0] = OFTFeeDetail(-1 * _sd2ld(amountInSD - amountOutSD).toInt256(), \\\"protocol fee\\\");\\n            } else if (amountOutSD > amountInSD) {\\n                // reward\\n                uint64 reward = amountOutSD - amountInSD;\\n                (amountOutSD, reward) = _capReward(amountOutSD, reward);\\n                if (amountOutSD == amountInSD) {\\n                    // hide the Fee detail if the reward is capped to 0\\n                    oftFeeDetails = new OFTFeeDetail[](0);\\n                } else {\\n                    oftFeeDetails[0] = OFTFeeDetail(_sd2ld(reward).toInt256(), \\\"reward\\\");\\n                }\\n            }\\n        }\\n\\n        receipt = OFTReceipt(_sd2ld(amountInSD), _sd2ld(amountOutSD));\\n    }\\n\\n    /// @notice Provides a quote for the send() operation.\\n    /// @dev Implements the IOFT interface.\\n    /// @dev Reverts with InvalidAmount if send mode is drive but value is specified.\\n    /// @param _sendParam The parameters for the send() operation\\n    /// @param _payInLzToken Flag indicating whether the caller is paying in the LZ token\\n    /// @return fee The calculated LayerZero messaging fee from the send() operation\\n    /// @dev MessagingFee: LayerZero message fee\\n    ///   - nativeFee: The native fee.\\n    ///   - lzTokenFee: The LZ token fee.\\n    function quoteSend(\\n        SendParam calldata _sendParam,\\n        bool _payInLzToken\\n    ) external view returns (MessagingFee memory fee) {\\n        uint64 amountSD = _ld2sd(_sendParam.amountLD);\\n        if (amountSD == 0) revert Stargate_InvalidAmount();\\n\\n        bool isTaxi = _isTaxiMode(_sendParam.oftCmd);\\n        if (isTaxi) {\\n            fee = ITokenMessaging(tokenMessaging).quoteTaxi(\\n                TaxiParams({\\n                    sender: msg.sender,\\n                    dstEid: _sendParam.dstEid,\\n                    receiver: _sendParam.to,\\n                    amountSD: amountSD,\\n                    composeMsg: _sendParam.composeMsg,\\n                    extraOptions: _sendParam.extraOptions\\n                }),\\n                _payInLzToken\\n            );\\n        } else {\\n            bool nativeDrop = _sendParam.extraOptions.length > 0;\\n            fee = ITokenMessaging(tokenMessaging).quoteRideBus(_sendParam.dstEid, nativeDrop);\\n        }\\n    }\\n\\n    /// @notice Returns the current roles configured.\\n    /// @return An AddressConfig struct containing the current configuration\\n    function getAddressConfig() external view returns (AddressConfig memory) {\\n        return\\n            AddressConfig({\\n                feeLib: feeLib,\\n                planner: planner,\\n                treasurer: treasurer,\\n                tokenMessaging: tokenMessaging,\\n                creditMessaging: creditMessaging,\\n                lzToken: lzToken\\n            });\\n    }\\n\\n    /// @notice Get the OFT version information\\n    /// @dev Implements the IOFT interface.\\n    /// @dev 0 version means the message encoding is not compatible with the default OFT.\\n    /// @return interfaceId The ERC165 interface ID for this contract\\n    /// @return version The cross-chain compatible message encoding version.\\n    function oftVersion() external pure override returns (bytes4 interfaceId, uint64 version) {\\n        return (type(IOFT).interfaceId, 0);\\n    }\\n\\n    /// @notice Indicates whether the OFT contract requires approval of the 'token()' to send.\\n    /// @dev Implements the IOFT interface.\\n    /// @return Whether approval of the underlying token implementation is required\\n    function approvalRequired() external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    // ---------------------------------- Internal Functions ------------------------------------------\\n\\n    /// @notice Ingest value into the contract and charge the Stargate fee.\\n    /// @dev This is triggered when value is transferred from an account into Stargate to execute a swap.\\n    /// @param _sendParam A SendParam struct containing the swap information\\n    function _inflowAndCharge(\\n        SendParam calldata _sendParam\\n    ) internal returns (bool isTaxi, uint64 amountInSD, uint64 amountOutSD) {\\n        isTaxi = _isTaxiMode(_sendParam.oftCmd);\\n        amountInSD = _inflow(msg.sender, _sendParam.amountLD);\\n\\n        FeeParams memory feeParams = _buildFeeParams(_sendParam.dstEid, amountInSD, isTaxi);\\n\\n        amountOutSD = _chargeFee(feeParams, _ld2sd(_sendParam.minAmountLD));\\n\\n        paths[_sendParam.dstEid].decreaseCredit(amountOutSD); // remove the credit from the path\\n        _postInflow(amountOutSD); // post inflow actions with the amount deducted by the fee\\n    }\\n\\n    /// @notice Consult the FeeLib the fee/reward for sending this token\\n    /// @dev Reverts with SlippageTooHigh when the slippage amount sent would be below the desired minimum or zero.\\n    /// @return amountOutSD The actual amount that would be sent after applying fees/rewards\\n    function _chargeFee(FeeParams memory _feeParams, uint64 _minAmountOutSD) internal returns (uint64 amountOutSD) {\\n        // get the output amount from the fee library\\n        amountOutSD = IStargateFeeLib(feeLib).applyFee(_feeParams);\\n\\n        uint64 amountInSD = _feeParams.amountInSD;\\n        if (amountOutSD < amountInSD) {\\n            // fee\\n            treasuryFee += amountInSD - amountOutSD;\\n        } else if (amountOutSD > amountInSD) {\\n            // reward\\n            uint64 reward = amountOutSD - amountInSD;\\n            (amountOutSD, reward) = _capReward(amountOutSD, reward);\\n            if (reward > 0) treasuryFee -= reward;\\n        }\\n\\n        if (amountOutSD < _minAmountOutSD || amountOutSD == 0) revert Stargate_SlippageTooHigh(); // 0 not allowed\\n    }\\n\\n    function _taxi(\\n        SendParam calldata _sendParam,\\n        MessagingFee memory _messagingFee,\\n        uint64 _amountSD,\\n        address _refundAddress\\n    ) internal returns (MessagingReceipt memory receipt) {\\n        if (_messagingFee.lzTokenFee > 0) _payLzToken(_messagingFee.lzTokenFee); // handle lz token fee\\n\\n        receipt = ITokenMessaging(tokenMessaging).taxi{ value: _messagingFee.nativeFee }(\\n            TaxiParams({\\n                sender: msg.sender,\\n                dstEid: _sendParam.dstEid,\\n                receiver: _sendParam.to,\\n                amountSD: _amountSD,\\n                composeMsg: _sendParam.composeMsg,\\n                extraOptions: _sendParam.extraOptions\\n            }),\\n            _messagingFee,\\n            _refundAddress\\n        );\\n    }\\n\\n    function _rideBus(\\n        SendParam calldata _sendParam,\\n        MessagingFee memory _messagingFee,\\n        uint64 _amountSD,\\n        address _refundAddress\\n    ) internal virtual returns (MessagingReceipt memory receipt, Ticket memory ticket) {\\n        if (_messagingFee.lzTokenFee > 0) revert Stargate_LzTokenUnavailable();\\n\\n        (receipt, ticket) = ITokenMessaging(tokenMessaging).rideBus(\\n            RideBusParams({\\n                sender: msg.sender,\\n                dstEid: _sendParam.dstEid,\\n                receiver: _sendParam.to,\\n                amountSD: _amountSD,\\n                nativeDrop: _sendParam.extraOptions.length > 0\\n            })\\n        );\\n\\n        uint256 busFare = receipt.fee.nativeFee;\\n        uint256 providedFare = _messagingFee.nativeFee;\\n\\n        // assert sufficient nativeFee was provided to cover the fare\\n        if (busFare == providedFare) {\\n            // return; Do nothing in this case\\n        } else if (providedFare > busFare) {\\n            uint256 refund;\\n            unchecked {\\n                refund = providedFare - busFare;\\n            }\\n            Transfer.transferNative(_refundAddress, refund, false); // no gas limit to refund\\n        } else {\\n            revert Stargate_InsufficientFare();\\n        }\\n    }\\n\\n    /// @notice Pay the LZ fee in LZ tokens.\\n    /// @dev Reverts with LzTokenUnavailable if the LZ token OFT has not been set.\\n    /// @param _lzTokenFee The fee to pay in LZ tokens\\n    function _payLzToken(uint256 _lzTokenFee) internal {\\n        address lzTkn = lzToken;\\n        if (lzTkn == address(0)) revert Stargate_LzTokenUnavailable();\\n        Transfer.safeTransferTokenFrom(lzTkn, msg.sender, address(endpoint), _lzTokenFee);\\n    }\\n\\n    /// @notice Translate an amount in SD to LD\\n    /// @dev Since SD <= LD by definition, convertRate >= 1, so there is no rounding errors in this function.\\n    /// @param _amountSD The amount in SD\\n    /// @return amountLD The same value expressed in LD\\n    function _sd2ld(uint64 _amountSD) internal view returns (uint256 amountLD) {\\n        unchecked {\\n            amountLD = _amountSD * convertRate;\\n        }\\n    }\\n\\n    /// @notice Translate an value in LD to SD\\n    /// @dev Since SD <= LD by definition, convertRate >= 1, so there might be rounding during the cast.\\n    /// @param _amountLD The value in LD\\n    /// @return amountSD The same value expressed in SD\\n    function _ld2sd(uint256 _amountLD) internal view returns (uint64 amountSD) {\\n        unchecked {\\n            amountSD = SafeCast.toUint64(_amountLD / convertRate);\\n        }\\n    }\\n\\n    /// @dev if _cmd is empty, Taxi mode. Otherwise, Bus mode\\n    function _isTaxiMode(bytes calldata _oftCmd) internal pure returns (bool) {\\n        return _oftCmd.length == 0;\\n    }\\n\\n    // ---------------------------------- Virtual Functions ------------------------------------------\\n\\n    /// @notice Limits the reward awarded when withdrawing value.\\n    /// @param _amountOutSD The amount of expected on the destination chain in SD\\n    /// @param _reward The initial calculated reward by FeeLib\\n    /// @return newAmountOutSD The actual amount to be delivered on the destination chain\\n    /// @return newReward The actual reward after applying any caps\\n    function _capReward(\\n        uint64 _amountOutSD,\\n        uint64 _reward\\n    ) internal view virtual returns (uint64 newAmountOutSD, uint64 newReward);\\n\\n    /// @notice Hook called when there is ingress of value into the contract.\\n    /// @param _from The account from which to obtain the value\\n    /// @param _amountLD The amount of tokens to get from the account in LD\\n    /// @return amountSD The actual amount of tokens in SD that got into the Stargate\\n    function _inflow(address _from, uint256 _amountLD) internal virtual returns (uint64 amountSD);\\n\\n    /// @notice Hook called when there is egress of value out of the contract.\\n    /// @return success Whether the outflow was successful\\n    function _outflow(address _to, uint256 _amountLD) internal virtual returns (bool success);\\n\\n    /// @notice Hook called when there is egress of value out of the contract.\\n    /// @dev Reverts with OutflowFailed when the outflow hook fails\\n    function _safeOutflow(address _to, uint256 _amountLD) internal virtual {\\n        bool success = _outflow(_to, _amountLD);\\n        if (!success) revert Stargate_OutflowFailed();\\n    }\\n\\n    /// @notice Ensure that the value passed through the message equals the native fee\\n    /// @dev the native fee should be the same as msg value by default\\n    /// @dev Reverts with InvalidAmount if the native fee does not match the value passed.\\n    /// @param _fee The MessagingFee object containing the expected fee\\n    /// @return The messaging fee object\\n    function _assertMessagingFee(\\n        MessagingFee memory _fee,\\n        uint256 /*_amountInLD*/\\n    ) internal view virtual returns (MessagingFee memory) {\\n        if (_fee.nativeFee != msg.value) revert Stargate_InvalidAmount();\\n        return _fee;\\n    }\\n\\n    /// @notice Ensure the msg.value is as expected.\\n    /// @dev Override this contract to provide a specific validation.\\n    /// @dev This implementation will revert if value is passed, because we do not expect value except for\\n    /// @dev the native token when adding to the treasury.\\n    /// @dev Reverts with InvalidAmount if msg.value > 0\\n    function _assertMsgValue(uint256 /*_amountLD*/) internal view virtual {\\n        if (msg.value > 0) revert Stargate_InvalidAmount();\\n    }\\n\\n    /// @dev Build the FeeParams object for the FeeLib\\n    /// @param _dstEid The destination endpoint ID\\n    /// @param _amountInSD The amount to send in SD\\n    /// @param _isTaxi Whether this send is riding the bus or taxing\\n    function _buildFeeParams(\\n        uint32 _dstEid,\\n        uint64 _amountInSD,\\n        bool _isTaxi\\n    ) internal view virtual returns (FeeParams memory);\\n\\n    /// @notice Hook called after the inflow of value into the contract by sendToken().\\n    /// Function meant to be overridden\\n    // solhint-disable-next-line no-empty-blocks\\n    function _postInflow(uint64 _amountSD) internal virtual {}\\n\\n    /// @notice Hook called after the outflow of value out of the contract by receiveToken().\\n    /// Function meant to be overridden\\n    // solhint-disable-next-line no-empty-blocks\\n    function _postOutflow(uint64 _amountSD) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa5ab14aaed2e38b0bce9b59edd1fe235b55a7a28ca4f5a895fbe149eb904085f\",\"license\":\"BUSL-1.1\"},\"src/StargateOFT.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport { StargateType } from \\\"./interfaces/IStargate.sol\\\";\\nimport { IERC20Minter } from \\\"./interfaces/IERC20Minter.sol\\\";\\nimport { StargateBase, FeeParams } from \\\"./StargateBase.sol\\\";\\n\\n/// @title A Stargate contract representing an OFT. This contract will burn OFTs when sending tokens\\n/// @title to other chains and mint tokens when receiving them from other chains.\\ncontract StargateOFT is StargateBase {\\n    /// @notice Create a StargateOFT contract administering an OFT.\\n    /// @param _token The OFT to administer\\n    /// @param _sharedDecimals The minimum number of decimals used to represent value in this OFT\\n    /// @param _endpoint The LZ endpoint address\\n    /// @param _owner The account owning this contract\\n    constructor(\\n        address _token,\\n        uint8 _sharedDecimals,\\n        address _endpoint,\\n        address _owner\\n    ) StargateBase(_token, IERC20Metadata(_token).decimals(), _sharedDecimals, _endpoint, _owner) {}\\n\\n    /// @notice Burn tokens to represent their removal from the local chain\\n    /// @param _from The address to burn tokens from\\n    /// @param _amount How many tokens to burn in LD\\n    /// @return amountSD The amount burned in SD\\n    function _inflow(address _from, uint256 _amount) internal virtual override returns (uint64 amountSD) {\\n        amountSD = _ld2sd(_amount);\\n        IERC20Minter(token).burnFrom(_from, _sd2ld(amountSD)); // remove dust and burn\\n    }\\n\\n    /// @notice Mint tokens to represent their lading into the local chain\\n    /// @param _to The account to mint tokens for\\n    /// @param _amount The amount of tokens to mint\\n    /// @return success Whether the minting was successful\\n    function _outflow(address _to, uint256 _amount) internal virtual override returns (bool success) {\\n        try IERC20Minter(token).mint(_to, _amount) {\\n            success = true;\\n        } catch {} // solhint-disable-line no-empty-blocks\\n    }\\n\\n    /// @notice Limits the reward awarded when withdrawing value.\\n    /// @dev Concretes the StargateBase contract.\\n    /// @dev Reward is not allowed for OFT, so 0 is returned.\\n    /// @dev reward is calculated as amountOut - amountIn, so amountIn = amountOut - reward,\\n    /// @dev this removes the reward and sets the exchange rate to 1:1 local:remote\\n    /// @param _amountOutSD The amount of tokens expected on the destination chain in SD\\n    /// @param _reward The initially calculated reward by FeeLib\\n    /// @return newAmountOutSD The actual amount to be withdrawn expected on the destination chain\\n    /// @return newReward The actual reward after applying any caps\\n    function _capReward(\\n        uint64 _amountOutSD,\\n        uint64 _reward\\n    ) internal pure override returns (uint64 newAmountOutSD, uint64 newReward) {\\n        unchecked {\\n            newAmountOutSD = _amountOutSD - _reward;\\n        }\\n        newReward = 0;\\n    }\\n\\n    /// @notice Returns the type of Stargate contract.\\n    /// @dev Fulfills the IStargate interface.\\n    /// @return The type of Stargate contract\\n    function stargateType() external pure override returns (StargateType) {\\n        return StargateType.OFT;\\n    }\\n\\n    function _buildFeeParams(\\n        uint32 _dstEid,\\n        uint64 _amountInSD,\\n        bool _isTaxi\\n    ) internal view override returns (FeeParams memory) {\\n        return FeeParams(msg.sender, _dstEid, _amountInSD, 0, paths[_dstEid].isOFTPath(), _isTaxi);\\n    }\\n}\\n\",\"keccak256\":\"0x026e140a908e97dad511cb15f2188a1447ba639e1dc4c9c73bf39b5e9bd5f26d\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IBridgedUSDCMinter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/// @title Interface for Bridge USDC\\n/// @dev https://github.com/circlefin/stablecoin-evm/blob/master/contracts/v1/FiatTokenV1.sol\\ninterface IBridgedUSDCMinter {\\n    function mint(address _to, uint256 _amount) external returns (bool);\\n    function burn(uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x19a1177884b7a4088f0415de8bca98e741239808ad436b351dee3cd9e85efb13\",\"license\":\"BUSL-1.1\"},\"src/interfaces/ICreditMessaging.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { MessagingFee } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/interfaces/IOFT.sol\\\";\\n\\n/// @notice Stores the information related to a batch of credit transfers.\\nstruct TargetCreditBatch {\\n    uint16 assetId;\\n    TargetCredit[] credits;\\n}\\n\\n/// @notice Stores the information related to a single credit transfer.\\nstruct TargetCredit {\\n    uint32 srcEid;\\n    uint64 amount; // the amount of credits to intended to send\\n    uint64 minAmount; // the minimum amount of credits to keep on local chain after sending\\n}\\n\\n/// @title Credit Messaging API\\n/// @dev This interface defines the API for quoting and sending credits to other chains.\\ninterface ICreditMessaging {\\n    /// @notice Sends credits to the destination endpoint.\\n    /// @param _dstEid The destination LayerZero endpoint ID.\\n    /// @param _creditBatches The credit batch payloads to send to the destination LayerZero endpoint ID.\\n    function sendCredits(uint32 _dstEid, TargetCreditBatch[] calldata _creditBatches) external payable;\\n\\n    /// @notice Quotes the fee for sending credits to the destination endpoint.\\n    /// @param _dstEid The destination LayerZero endpoint ID.\\n    /// @param _creditBatches The credit batch payloads to send to the destination LayerZero endpoint ID.\\n    /// @return fee The fee for sending the credits to the destination endpoint.\\n    function quoteSendCredits(\\n        uint32 _dstEid,\\n        TargetCreditBatch[] calldata _creditBatches\\n    ) external view returns (MessagingFee memory fee);\\n}\\n\",\"keccak256\":\"0xbc697f6c4842894aedf3ef9c749e2eebb821d8b3d7507085c5d799e092a70649\",\"license\":\"BUSL-1.1\"},\"src/interfaces/ICreditMessagingHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { TargetCredit } from \\\"./ICreditMessaging.sol\\\";\\n\\nstruct Credit {\\n    uint32 srcEid;\\n    uint64 amount;\\n}\\n\\n/// @dev This is an internal interface, defining functions to handle messages/calls from the credit messaging contract.\\ninterface ICreditMessagingHandler {\\n    function sendCredits(uint32 _dstEid, TargetCredit[] calldata _credits) external returns (Credit[] memory);\\n\\n    function receiveCredits(uint32 _srcEid, Credit[] calldata _credits) external;\\n}\\n\",\"keccak256\":\"0xb8a94fedd8cee6207a3d10410b70175928a24e7376a5bffbd51a9380075140e2\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IERC20Minter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/// @title An interface for minting and burning ERC20s.\\n/// @dev Implemented by OFT contracts.\\ninterface IERC20Minter {\\n    /// @notice Mint tokens and transfer them to the given account.\\n    /// @param _to The account to mint the tokens to\\n    /// @param _amount How many tokens to mint\\n    function mint(address _to, uint256 _amount) external;\\n\\n    /// @notice Burn tokens from a given account.\\n    /// @param _from The account to burn tokens from\\n    /// @param _amount How many tokens to burn\\n    function burnFrom(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x958eac22ac6c964f018ddb4f03b79119024b0a47fd8486e5205126f9f63ded49\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IStargate.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n// Solidity does not support splitting import across multiple lines\\n// solhint-disable-next-line max-line-length\\nimport { IOFT, SendParam, MessagingFee, MessagingReceipt, OFTReceipt } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oft/interfaces/IOFT.sol\\\";\\n\\n/// @notice Stargate implementation type.\\nenum StargateType {\\n    Pool,\\n    OFT\\n}\\n\\n/// @notice Ticket data for bus ride.\\nstruct Ticket {\\n    uint72 ticketId;\\n    bytes passengerBytes;\\n}\\n\\n/// @title Interface for Stargate.\\n/// @notice Defines an API for sending tokens to destination chains.\\ninterface IStargate is IOFT {\\n    /// @dev This function is same as `send` in OFT interface but returns the ticket data if in the bus ride mode,\\n    /// which allows the caller to ride and drive the bus in the same transaction.\\n    function sendToken(\\n        SendParam calldata _sendParam,\\n        MessagingFee calldata _fee,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory msgReceipt, OFTReceipt memory oftReceipt, Ticket memory ticket);\\n\\n    /// @notice Returns the Stargate implementation type.\\n    function stargateType() external pure returns (StargateType);\\n}\\n\",\"keccak256\":\"0xc6d5d7f325811ceebb5e8bbc22a85d0d3a3960073d7263f5b746a6b3ac36f59a\",\"license\":\"BUSL-1.1\"},\"src/interfaces/IStargateFeeLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/// @notice Parameters used to assess fees to send tokens to a destination endpoint.\\nstruct FeeParams {\\n    address sender;\\n    uint32 dstEid;\\n    uint64 amountInSD;\\n    uint64 deficitSD;\\n    bool toOFT;\\n    bool isTaxi;\\n}\\n\\n/// @title Interface for assessing fees to send tokens to a destination endpoint.\\ninterface IStargateFeeLib {\\n    /// @notice Apply a fee for a given request, allowing for state modification.\\n    /// @dev This is included for future proofing potential implementations\\n    /// @dev where state is modified in the feeLib based on a FeeParams\\n\\n    function applyFee(FeeParams calldata _params) external returns (uint64 amountOutSD);\\n    /// @notice Apply a fee for a given request, without modifying state.\\n    function applyFeeView(FeeParams calldata _params) external view returns (uint64 amountOutSD);\\n}\\n\",\"keccak256\":\"0xb68a85b6c3907584364d7ce78ffe7f4aedf5ea7dd584fea7fef435a23337bf57\",\"license\":\"BUSL-1.1\"},\"src/interfaces/ITokenMessaging.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { MessagingReceipt, MessagingFee, Ticket } from \\\"./IStargate.sol\\\";\\n\\n/// @notice Payload for sending a taxi message.\\n/// @dev A taxi message is sent immediately and is not stored on the bus.\\nstruct TaxiParams {\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    uint64 amountSD;\\n    bytes composeMsg;\\n    bytes extraOptions;\\n}\\n\\n/// @notice Payload for riding the bus.\\n/// @dev Riding the bus is a two-step process:\\n/// @dev - The message is sent to the bus,\\n/// @dev - The bus is driven to the destination.\\nstruct RideBusParams {\\n    address sender;\\n    uint32 dstEid;\\n    bytes32 receiver;\\n    uint64 amountSD;\\n    bool nativeDrop;\\n}\\n\\n/// @title Token Messaging API.\\n/// @notice This interface defines the API for sending a taxi message, riding the bus, and driving the bus, along with\\n/// corresponding quote functions.\\ninterface ITokenMessaging {\\n    /// @notice Sends a taxi message\\n    /// @param _params The taxi message payload\\n    /// @param _messagingFee The messaging fee for sending a taxi message\\n    /// @param _refundAddress The address to refund excess LayerZero MessagingFees\\n    /// @return receipt The MessagingReceipt resulting from sending the taxi\\n    function taxi(\\n        TaxiParams calldata _params,\\n        MessagingFee calldata _messagingFee,\\n        address _refundAddress\\n    ) external payable returns (MessagingReceipt memory receipt);\\n\\n    /// @notice Quotes the messaging fee for sending a taxi message\\n    /// @param _params The taxi message payload\\n    /// @param _payInLzToken Whether to pay the fee in LZ token\\n    /// @return fee The MessagingFee for sending the taxi message\\n    function quoteTaxi(TaxiParams calldata _params, bool _payInLzToken) external view returns (MessagingFee memory fee);\\n\\n    /// @notice Sends a message to ride the bus, queuing the passenger in preparation for the drive.\\n    /// @notice The planner will later driveBus to the destination endpoint.\\n    /// @param _params The rideBus message payload\\n    /// @return receipt The MessagingReceipt resulting from sending the rideBus message\\n    /// @return ticket The Ticket for riding the bus\\n    function rideBus(\\n        RideBusParams calldata _params\\n    ) external returns (MessagingReceipt memory receipt, Ticket memory ticket);\\n\\n    /// @notice Quotes the messaging fee for riding the bus\\n    /// @param _dstEid The destination LayerZero endpoint ID.\\n    /// @param _nativeDrop Whether to pay for a native drop on the destination.\\n    /// @return fee The MessagingFee for riding the bus\\n    function quoteRideBus(uint32 _dstEid, bool _nativeDrop) external view returns (MessagingFee memory fee);\\n\\n    /// @notice Drives the bus to the destination.\\n    /// @param _dstEid The destination LayerZero endpoint ID.\\n    /// @param _passengers The passengers to drive to the destination.\\n    /// @return receipt The MessagingReceipt resulting from driving the bus\\n    function driveBus(\\n        uint32 _dstEid,\\n        bytes calldata _passengers\\n    ) external payable returns (MessagingReceipt memory receipt);\\n\\n    /// @notice Quotes the messaging fee for driving the bus to the destination.\\n    /// @param _dstEid The destination LayerZero endpoint ID.\\n    /// @param _passengers The passengers to drive to the destination.\\n    /// @return fee The MessagingFee for driving the bus\\n    function quoteDriveBus(uint32 _dstEid, bytes calldata _passengers) external view returns (MessagingFee memory fee);\\n}\\n\",\"keccak256\":\"0x8056428c8c42f1199589eb448e657d580a1a2e20c0a39a843226a94ec48d1a94\",\"license\":\"BUSL-1.1\"},\"src/interfaces/ITokenMessagingHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { Origin } from \\\"@layerzerolabs/lz-evm-oapp-v2/contracts/oapp/OApp.sol\\\";\\n\\n/// @dev This is an internal interface, defining the function to handle token message from the token messaging contract.\\ninterface ITokenMessagingHandler {\\n    function receiveTokenBus(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        uint8 _seatNumber,\\n        address _receiver,\\n        uint64 _amountSD\\n    ) external;\\n\\n    function receiveTokenTaxi(\\n        Origin calldata _origin,\\n        bytes32 _guid,\\n        address _receiver,\\n        uint64 _amountSD,\\n        bytes calldata _composeMsg\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0634baa5ee393363fc332eb4150c3d84cf04a08cb96614afbc0ccb1c57c1e96e\",\"license\":\"BUSL-1.1\"},\"src/libs/Path.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\n/// @dev The Path struct contains the bus base fare multiplier bps and the credit in the same slot for gas saving.\\nstruct Path {\\n    uint64 credit; // available credit for the path, in SD\\n}\\n\\nusing PathLib for Path global;\\n\\n/**\\n * @title A library to operate on Paths.\\n * @dev A Path is a route through which value can be sent. It entails the local chain and a destination chain, and has\\n *      a given amount of credit associated with it. Every time the value is sent from A to B, the credit on A is\\n *      decreased and credit on B is increased. If credit hits 0 then the path can no longer be used.\\n */\\nlibrary PathLib {\\n    uint64 internal constant UNLIMITED_CREDIT = type(uint64).max;\\n\\n    // solhint-disable-next-line event-name-camelcase\\n    event Path_CreditBurned(uint64 amountSD);\\n\\n    error Path_InsufficientCredit();\\n    error Path_AlreadyHasCredit();\\n    error Path_UnlimitedCredit();\\n\\n    /// @notice Increase credit for a given Path.\\n    /// @dev Reverts with Path_UnlimitedCredit if the increase would hit the maximum amount of credit (reserved value)\\n    /// @param _path The Path for which to increase credit\\n    /// @param _amountSD The amount by which to increase credit\\n    function increaseCredit(Path storage _path, uint64 _amountSD) internal {\\n        uint64 credit = _path.credit;\\n        if (credit == UNLIMITED_CREDIT) return;\\n        credit += _amountSD;\\n        if (credit == UNLIMITED_CREDIT) revert Path_UnlimitedCredit();\\n        _path.credit = credit;\\n    }\\n\\n    /// @notice Decrease credit for a given Path.\\n    /// @dev Reverts with InsufficientCredit if there is not enough credit\\n    /// @param _path The Path for which to decrease credit\\n    /// @param _amountSD The amount by which to decrease credit\\n    function decreaseCredit(Path storage _path, uint64 _amountSD) internal {\\n        uint64 currentCredit = _path.credit;\\n        if (currentCredit == UNLIMITED_CREDIT) return;\\n        if (currentCredit < _amountSD) revert Path_InsufficientCredit();\\n        unchecked {\\n            _path.credit = currentCredit - _amountSD;\\n        }\\n    }\\n\\n    /// @notice Decrease credit for a given path, even if only a partial amount is possible.\\n    /// @param _path The Path for which to decrease credit\\n    /// @param _amountSD The amount by which try to decrease credit\\n    /// @param _minKept The minimum amount of credit to keep after the decrease\\n    /// @return decreased The actual amount of credit decreased\\n    function tryDecreaseCredit(\\n        Path storage _path,\\n        uint64 _amountSD,\\n        uint64 _minKept\\n    ) internal returns (uint64 decreased) {\\n        uint64 currentCredit = _path.credit;\\n        // not allowed to try to decrease unlimited credit\\n        if (currentCredit == UNLIMITED_CREDIT) revert Path_UnlimitedCredit();\\n        if (_minKept < currentCredit) {\\n            unchecked {\\n                uint64 maxDecreased = currentCredit - _minKept;\\n                decreased = _amountSD > maxDecreased ? maxDecreased : _amountSD;\\n                _path.credit = currentCredit - decreased;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set a given path as OFT or reset an OFT path to 0 credit.\\n    /// @dev A Path for which the asset is using an OFT on destination gets unlimited credit because value transfers\\n    /// @dev do not spend value.\\n    /// @dev Such a path is expected to not have credit before.\\n    /// @dev Reverts with AlreadyHasCredit if the Path already had credit assigned to it\\n    /// @param _path The Path to set\\n    /// @param _oft Whether to set it as OFT or reset it from OFT\\n    function setOFTPath(Path storage _path, bool _oft) internal {\\n        uint64 currentCredit = _path.credit;\\n        if (_oft) {\\n            // only allow un-limiting from 0\\n            if (currentCredit != 0) revert Path_AlreadyHasCredit();\\n            _path.credit = UNLIMITED_CREDIT;\\n        } else {\\n            // only allow resetting from unlimited\\n            if (currentCredit != UNLIMITED_CREDIT) revert Path_AlreadyHasCredit();\\n            _path.credit = 0;\\n        }\\n    }\\n\\n    /// @notice Check whether a given Path is set as OFT.\\n    /// @param _path The path to examine\\n    /// @return whether the Path is set as OFT\\n    function isOFTPath(Path storage _path) internal view returns (bool) {\\n        return _path.credit == UNLIMITED_CREDIT;\\n    }\\n\\n    /// @notice Burn credit for a given Path during bridged token migration.\\n    function burnCredit(Path storage _path, uint64 _amountSD) internal {\\n        decreaseCredit(_path, _amountSD);\\n        emit Path_CreditBurned(_amountSD);\\n    }\\n}\\n\",\"keccak256\":\"0xc126036050eb4d09df03f8d30fc5b4286917ad26d5a7b69f77218b3072a7e996\",\"license\":\"BUSL-1.1\"},\"src/libs/Transfer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @dev WARNING: Transferring tokens, when the token address is wrong, will fail silently.\\ncontract Transfer is Ownable {\\n    error Transfer_TransferFailed();\\n    error Transfer_ApproveFailed();\\n\\n    // @dev default this to 2300, but it is modifiable\\n    // @dev this is intended to provide just enough gas to receive native tokens.\\n    // @dev ie. empty fallbacks or EOA addresses\\n    uint256 internal transferGasLimit = 2300;\\n\\n    function getTransferGasLimit() external view returns (uint256) {\\n        return transferGasLimit;\\n    }\\n\\n    function setTransferGasLimit(uint256 _gasLimit) external onlyOwner {\\n        transferGasLimit = _gasLimit;\\n    }\\n\\n    /// @notice Transfer native coin to an account\\n    /// @dev If gas is unlimited, we pass 63/64 of the gasleft()\\n    /// @dev This call may revert due to out of gas instead of returning false.\\n    /// @param _to The account to transfer native coin to\\n    /// @param _value The amount of native coin to transfer\\n    /// @param _gasLimited Whether to limit gas available for the 'fall-back'\\n    /// @return success Whether the transfer was successful\\n    function transferNative(address _to, uint256 _value, bool _gasLimited) internal returns (bool success) {\\n        uint256 gasForCall = _gasLimited ? transferGasLimit : gasleft();\\n\\n        // @dev We dont care about the data returned here, only success or not.\\n        assembly {\\n            success := call(gasForCall, _to, _value, 0, 0, 0, 0)\\n        }\\n    }\\n\\n    /// @notice Transfer an ERC20 token from the sender to an account\\n    /// @param _token The address of the ERC20 token to send\\n    /// @param _to The receiving account\\n    /// @param _value The amount of tokens to transfer\\n    /// @return success Whether the transfer was successful or not\\n    function transferToken(address _token, address _to, uint256 _value) internal returns (bool success) {\\n        success = _call(_token, abi.encodeWithSelector(IERC20(_token).transfer.selector, _to, _value));\\n    }\\n\\n    /// @notice Transfer an ERC20 token from one account to another\\n    /// @param _token The address of the ERC20 token to send\\n    /// @param _from The source account\\n    /// @param _to The destination account\\n    /// @param _value The amount of tokens to transfer\\n    /// @return success Whether the transfer was successful or not\\n    function transferTokenFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal returns (bool success) {\\n        success = _call(_token, abi.encodeWithSelector(IERC20(_token).transferFrom.selector, _from, _to, _value));\\n    }\\n\\n    /// @notice Transfer either native coin or ERC20 token from the sender to an account\\n    /// @param _token The ERC20 address or 0x0 if native is desired\\n    /// @param _to The destination account\\n    /// @param _value the amount to transfer\\n    /// @param _gasLimited Whether to limit the amount of gas when doing a native transfer\\n    /// @return success Whether the transfer was successful or not\\n    function transfer(address _token, address _to, uint256 _value, bool _gasLimited) internal returns (bool success) {\\n        if (_token == address(0)) {\\n            success = transferNative(_to, _value, _gasLimited);\\n        } else {\\n            success = transferToken(_token, _to, _value);\\n        }\\n    }\\n\\n    /// @notice Approve a given amount of token for an account\\n    /// @param _token The OFT contract to use for approval\\n    /// @param _spender The account to approve\\n    /// @param _value The amount of tokens to approve\\n    /// @return success Whether the approval succeeded\\n    function approveToken(address _token, address _spender, uint256 _value) internal returns (bool success) {\\n        success = _call(_token, abi.encodeWithSelector(IERC20(_token).approve.selector, _spender, _value));\\n    }\\n\\n    /// @notice Transfer native coin to an account or revert\\n    /// @dev Reverts with TransferFailed if the transfer failed\\n    /// @param _to The account to transfer native coin to\\n    /// @param _value The amount of native coin to transfer\\n    /// @param _gasLimited Whether to limit the amount of gas to 2300\\n    function safeTransferNative(address _to, uint256 _value, bool _gasLimited) internal {\\n        if (!transferNative(_to, _value, _gasLimited)) revert Transfer_TransferFailed();\\n    }\\n\\n    /// @notice Transfer an ERC20 token from one account to another or revert\\n    /// @dev Reverts with TransferFailed when the transfer fails\\n    /// @param _token The address of the ERC20 token to send\\n    /// @param _to The destination account\\n    /// @param _value The amount of tokens to transfer\\n    function safeTransferToken(address _token, address _to, uint256 _value) internal {\\n        if (!transferToken(_token, _to, _value)) revert Transfer_TransferFailed();\\n    }\\n\\n    /// @notice Transfer an ERC20 token from one account to another\\n    /// @dev Reverts with TransferFailed when the transfer fails\\n    /// @param _token The address of the ERC20 token to send\\n    /// @param _from The source account\\n    /// @param _to The destination account\\n    /// @param _value The amount of tokens to transfer\\n    function safeTransferTokenFrom(address _token, address _from, address _to, uint256 _value) internal {\\n        if (!transferTokenFrom(_token, _from, _to, _value)) revert Transfer_TransferFailed();\\n    }\\n\\n    /// @notice Transfer either native coin or ERC20 token from the sender to an account\\n    /// @dev Reverts with TransferFailed when the transfer fails\\n    /// @param _token The ERC20 address or 0x0 if native is desired\\n    /// @param _to The destination account\\n    /// @param _value the amount to transfer\\n    /// @param _gasLimited Whether to limit the amount of gas when doing a native transfer\\n    function safeTransfer(address _token, address _to, uint256 _value, bool _gasLimited) internal {\\n        if (!transfer(_token, _to, _value, _gasLimited)) revert Transfer_TransferFailed();\\n    }\\n\\n    /// @notice Approve a given amount of token for an account or revert\\n    /// @dev Reverts with ApproveFailed if the approval failed\\n    /// @dev Consider using forceApproveToken(...) to ensure the approval is set correctly.\\n    /// @param _token The OFT contract to use for approval\\n    /// @param _spender The account to approve\\n    /// @param _value The amount of tokens to approve\\n    function safeApproveToken(address _token, address _spender, uint256 _value) internal {\\n        if (!approveToken(_token, _spender, _value)) revert Transfer_ApproveFailed();\\n    }\\n\\n    /// @notice Force approve a given amount of token for an account by first resetting the approval\\n    /// @dev Some tokens that require the approval to be set to zero before setting it to a non-zero value, e.g. USDT.\\n    /// @param _token The OFT contract to use for approval\\n    /// @param _spender The account to approve\\n    /// @param _value The amount of tokens to approve\\n    function forceApproveToken(address _token, address _spender, uint256 _value) internal {\\n        if (!approveToken(_token, _spender, _value)) {\\n            safeApproveToken(_token, _spender, 0);\\n            safeApproveToken(_token, _spender, _value);\\n        }\\n    }\\n\\n    function _call(address _token, bytes memory _data) private returns (bool success) {\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool s, bytes memory returndata) = _token.call(_data);\\n        success = s ? returndata.length == 0 || abi.decode(returndata, (bool)) : false;\\n    }\\n}\\n\",\"keccak256\":\"0x8527b830b1b8c27c3ada465c521ca117984a05b2ea2529c81e34b913472137b2\",\"license\":\"BUSL-1.1\"},\"src/usdc/StargateOFTUSDC.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { IBridgedUSDCMinter } from \\\"../interfaces/IBridgedUSDCMinter.sol\\\";\\nimport { Transfer } from \\\"../libs/Transfer.sol\\\";\\nimport { StargateOFT } from \\\"../StargateOFT.sol\\\";\\n\\n/// @dev designed for bridged USDC migration per\\n/// @dev https://github.com/circlefin/stablecoin-evm/blob/master/doc/bridged_USDC_standard.md\\ncontract StargateOFTUSDC is StargateOFT {\\n    constructor(\\n        address _token,\\n        uint8 _sharedDecimals,\\n        address _endpoint,\\n        address _owner\\n    ) StargateOFT(_token, _sharedDecimals, _endpoint, _owner) {}\\n\\n    /// @dev Transfer USDC from the sender to this contract and burn it.\\n    function _inflow(address _from, uint256 _amountLD) internal virtual override returns (uint64 amountSD) {\\n        amountSD = _ld2sd(_amountLD);\\n        _amountLD = _sd2ld(amountSD); // remove dust\\n        Transfer.safeTransferTokenFrom(token, _from, address(this), _amountLD);\\n        IBridgedUSDCMinter(token).burn(_amountLD);\\n    }\\n\\n    function _outflow(address _to, uint256 _amountLD) internal virtual override returns (bool success) {\\n        try IBridgedUSDCMinter(token).mint(_to, _amountLD) returns (bool s) {\\n            success = s;\\n        } catch {} // solhint-disable-line no-empty-blocks\\n    }\\n}\\n\",\"keccak256\":\"0xd491f8dfc1df9faa19db854a9167056706a9c16fdcec38685fe4e0faa95902c3\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101206040526108fc6001556002805460ff60a01b1916600160a01b1790553480156200002b57600080fd5b5060405162004c5a38038062004c5a8339810160408190526200004e9162000236565b8383838383846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000092573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b8919062000293565b848484620000c633620001b7565b6001600160a01b03851660805260ff8084169085161015620000fb57604051632e4b554360e01b815260040160405180910390fd5b620001078385620002ce565b6200011490600a620003ed565b60c05260ff831660a0526001600160a01b03821660e08190526040805163416ecebf60e01b8152905163416ecebf916004808201926020929091908290030181865afa15801562000169573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018f9190620003fe565b63ffffffff1661010052620001a481620001b7565b5050505050505050505050505062000426565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200021f57600080fd5b919050565b805160ff811681146200021f57600080fd5b600080600080608085870312156200024d57600080fd5b620002588562000207565b9350620002686020860162000224565b9250620002786040860162000207565b9150620002886060860162000207565b905092959194509250565b600060208284031215620002a657600080fd5b620002b18262000224565b9392505050565b634e487b7160e01b600052601160045260246000fd5b60ff8281168282160390811115620002ea57620002ea620002b8565b92915050565b600181815b8085111562000331578160001904821115620003155762000315620002b8565b808516156200032357918102915b93841c9390800290620002f5565b509250929050565b6000826200034a57506001620002ea565b816200035957506000620002ea565b81600181146200037257600281146200037d576200039d565b6001915050620002ea565b60ff841115620003915762000391620002b8565b50506001821b620002ea565b5060208310610133831016604e8410600b8410161715620003c2575081810a620002ea565b620003ce8383620002f0565b8060001904821115620003e557620003e5620002b8565b029392505050565b6000620002b160ff84168362000339565b6000602082840312156200041157600080fd5b815163ffffffff81168114620002b157600080fd5b60805160a05160c05160e0516101005161476a620004f0600039600081816105ab015261165401526000818161054a0152818161113a01528181611f120152613475015260008181610b0801528181610b7301528181610d6b01528181610ec501528181610f6201528181610f8c01528181611064015281816117be015281816121ce015281816123040152818161232e0152818161258c0152612833015260006105f4015260008181610821015281816127790152818161286501526128bb015261476a6000f3fe6080604052600436106102195760003560e01c8063857749b01161011d578063b0d7ca5d116100b0578063cbef2aa91161007f578063d621ad3f11610064578063d621ad3f146107b7578063f2fde38b146107ef578063fc0c546a1461080f57600080fd5b8063cbef2aa91461075b578063cc32d1761461077d57600080fd5b8063b0d7ca5d146106e5578063bedb86fb146106fa578063c7c7f5b31461071a578063c859c4831461073b57600080fd5b80639561b12f116100ec5780639561b12f146106695780639f68b96414610689578063a7229fd9146106a5578063a88835d7146106c557600080fd5b8063857749b0146105e257806388543f0e146106165780638c70830b1461062b5780638da5cb5b1461064b57600080fd5b806338da6b8e116101b0578063461bb0b91161017f5780635e280f11116101645780635e280f1114610538578063715018a614610584578063726075371461059957600080fd5b8063461bb0b9146104fb5780635114bf091461051b57600080fd5b806338da6b8e1461043e5780633b6f743b1461048e5780633faa12c5146104bb578063434def55146104db57600080fd5b8063200d2ed2116101ec578063200d2ed2146102e0578063203bd15f146103135780632bc5114c14610335578063341a46481461042b57600080fd5b80630141e41b1461021e5780630d35b41514610254578063156a0d0f1461028357806316909bca146102c4575b600080fd5b34801561022a57600080fd5b5061023e61023936600461368c565b610843565b60405161024b9190613769565b60405180910390f35b34801561026057600080fd5b5061027461026f366004613794565b610ac8565b60405161024b93929190613819565b34801561028f57600080fd5b50604080517f02e49c2c000000000000000000000000000000000000000000000000000000008152600060208201520161024b565b3480156102d057600080fd5b50600160405161024b91906138d0565b3480156102ec57600080fd5b5060025461030190600160a01b900460ff1681565b60405160ff909116815260200161024b565b34801561031f57600080fd5b5061033361032e366004613999565b610fc4565b005b34801561034157600080fd5b506103ca6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c0810182526002546001600160a01b03908116825260055481166020830152600754811692820192909252600654821660608201526003548216608082015260045490911660a082015290565b60405161024b9190600060c0820190506001600160a01b038084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525092915050565b610333610439366004613a1b565b6112c3565b34801561044a57600080fd5b50610475610459366004613a34565b60086020526000908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161024b565b34801561049a57600080fd5b506104ae6104a9366004613a5d565b61139d565b60405161024b9190613aaf565b3480156104c757600080fd5b506103336104d6366004613ac6565b61164a565b3480156104e757600080fd5b506103336104f6366004613b03565b61171e565b34801561050757600080fd5b50610333610516366004613b66565b61198c565b34801561052757600080fd5b50475b60405190815260200161024b565b34801561054457600080fd5b5061056c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161024b565b34801561059057600080fd5b50610333611b3a565b3480156105a557600080fd5b506105cd7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161024b565b3480156105ee57600080fd5b506103017f000000000000000000000000000000000000000000000000000000000000000081565b34801561062257600080fd5b5060015461052a565b34801561063757600080fd5b50610333610646366004613a1b565b611b4e565b34801561065757600080fd5b506000546001600160a01b031661056c565b34801561067557600080fd5b50610333610684366004613b78565b611b5b565b34801561069557600080fd5b506040516001815260200161024b565b3480156106b157600080fd5b5061052a6106c0366004613beb565b611cc1565b3480156106d157600080fd5b506103336106e0366004613c27565b611dbf565b3480156106f157600080fd5b50610333611feb565b34801561070657600080fd5b50610333610715366004613cb0565b612054565b61072d610728366004613ccd565b61210f565b60405161024b929190613d6b565b34801561074757600080fd5b50610333610756366004613d8f565b612143565b61076e610769366004613ccd565b61223e565b60405161024b93929190613dbb565b34801561078957600080fd5b50600254610475907501000000000000000000000000000000000000000000900467ffffffffffffffff1681565b3480156107c357600080fd5b5061052a6107d2366004613e16565b600960209081526000928352604080842090915290825290205481565b3480156107fb57600080fd5b5061033361080a366004613e42565b612424565b34801561081b57600080fd5b5061056c7f000000000000000000000000000000000000000000000000000000000000000081565b600254606090600160a01b900460ff166001146108bb57600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6040517fdb22c33c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805460ff60a01b1916740200000000000000000000000000000000000000001790556003546001600160a01b031633811461090b57604051635bd25eff60e01b815260040160405180910390fd5b60008367ffffffffffffffff81111561092657610926613e5d565b60405190808252806020026020018201604052801561096b57816020015b60408051808201909152600080825260208201528152602001906001900390816109445790505b5090506000805b85811015610a6d573687878381811061098d5761098d613e8c565b905060600201905060006109f78260200160208101906109ad9190613ebb565b6109bd6060850160408601613ebb565b600860006109ce6020880188613a34565b63ffffffff1663ffffffff1681526020019081526020016000206124d09092919063ffffffff16565b905067ffffffffffffffff811615610a63576040805180820190915280610a216020850185613a34565b63ffffffff16815267ffffffffffffffff83166020909101528585610a4581613f07565b965081518110610a5757610a57613e8c565b60200260200101819052505b5050600101610972565b508082527fce105e156370093e6600169f7c01277f740d45fbcf95435227ce6f43ad0c3abd8783604051610aa2929190613f3f565b60405180910390a1509150506002805460ff60a01b1916600160a01b1790559392505050565b60408051808201909152600080825260208201526060610afb604051806040016040528060008152602001600081525090565b60408051808201909152807f00000000000000000000000000000000000000000000000000000000000000008152602001610b9660086000886000016020810190610b469190613a34565b63ffffffff16815260208101919091526040016000205467ffffffffffffffff1667ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b81525092506000610bc38460200151866040013511610bb9578560400135612585565b8460200151612585565b90506000610bf3610bd76020880188613a34565b83610bee610be860c08b018b613f5e565b15919050565b6125c5565b600254604080517f81993cd000000000000000000000000000000000000000000000000000000000815283516001600160a01b039081166004830152602085015163ffffffff1660248301529184015167ffffffffffffffff9081166044830152606085015116606482015260808401511515608482015260a0840151151560a48201529293506000929116906381993cd09060c401602060405180830381865afa158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca9190613fc3565b90508267ffffffffffffffff168167ffffffffffffffff1614610f475760408051600180825281830190925290816020015b604080518082019091526000815260606020820152815260200190600190039081610cfc5790505094508267ffffffffffffffff168167ffffffffffffffff161015610e1e576040518060400160405280610d93610d8e8487610d5f9190613fe0565b67ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b61264f565b610dbd907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614001565b81526020016040518060400160405280600c81526020017f70726f746f636f6c20666565000000000000000000000000000000000000000081525081525085600081518110610e0e57610e0e613e8c565b6020026020010181905250610f47565b8267ffffffffffffffff168167ffffffffffffffff161115610f47576000610e468483613fe0565b9091039050600067ffffffffffffffff84811690831603610ea7576040805160008082526020820190925290610e9f565b604080518082019091526000815260606020820152815260200190600190039081610e775790505b509550610f45565b6040518060400160405280610ee8610d8e8467ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b81526020016040518060400160405280600681526020017f726577617264000000000000000000000000000000000000000000000000000081525081525086600081518110610f3957610f39613e8c565b60200260200101819052505b505b6040518060400160405280610f858567ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b81526020017f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8416029052959794965050505050565b600254600160a01b900460ff1660011461100757600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b1916740200000000000000000000000000000000000000001790556006546001600160a01b031633811461105757604051635bd25eff60e01b815260040160405180910390fd5b67ffffffffffffffff84167f00000000000000000000000000000000000000000000000000000000000000000282158015906060906110f0576110ed6110a360608c0160408d01613ebb565b6110b060208d018d613a34565b8589898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061270592505050565b90505b60006110fc8985612737565b905080156112055782156111a9576040517f7cb590120000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637cb5901290611176908c908e90600090889060040161404d565b600060405180830381600087803b15801561119057600080fd5b505af11580156111a4573d6000803e3d6000fd5b505050505b6001600160a01b0389168a7fefed6d3500546b29533b128a29e3a94d70788727f0507505ac12eaf2e578fd9c6111e260208f018f613a34565b6040805163ffffffff9092168252602082018990520160405180910390a36112a3565b61121260208c018c613a34565b898584604051602001611228949392919061407f565b60408051601f19818403018152918152815160209283012060008d8152600984528281208180528452918220557e7c17198cd078035dc663f9a0961f84cb6265411d0b4c793f96d432f6af4b55918c9190611285908f018f613a34565b8c888760405161129a969594939291906140fd565b60405180910390a15b50506002805460ff60a01b1916600160a01b179055505050505050505050565b6007546001600160a01b03163381146112ef57604051635bd25eff60e01b815260040160405180910390fd5b6112f8826127ec565b60006113043384612824565b905080600260158282829054906101000a900467ffffffffffffffff1661132b919061414c565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fa064a2faa279f4d67c85c8fc69d4ebb7de2739a9e6dd864dfdd1b9e066d4bfd081604051611390919067ffffffffffffffff91909116815260200190565b60405180910390a1505050565b604080518082019091526000808252602082015260006113c08460400135612585565b90508067ffffffffffffffff16600003611406576040517f3442dd9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611418610be860c0870187613f5e565b90508015611586576006546040805160c081019091523381526001600160a01b0390911690633292cf0290602080820190611455908a018a613a34565b63ffffffff1681526020898101359082015267ffffffffffffffff8616604082015260600161148760a08a018a613f5e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016114ce60808a018a613f5e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261153f919088906004016141dc565b6040805180830381865afa15801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f919061428a565b9250611642565b6000806115966080880188613f5e565b60065492109250506001600160a01b03166375d2208c6115b96020890189613a34565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff91909116600482015283151560248201526044016040805180830381865afa15801561161a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163e919061428a565b9350505b505092915050565b611652612925565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff16036116b7576040517fada8342400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff80831660009081526008602052604090206116d991839061299916565b6040805163ffffffff8416815282151560208201527faf6b8dd4c5a827e03f548d06181b36aaba61e22436ff1cfa9bc409d576366a6091015b60405180910390a15050565b600254600160a01b900460ff1660011461176157600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b1916740200000000000000000000000000000000000000001790556006546001600160a01b03163381146117b157604051635bd25eff60e01b815260040160405180910390fd5b67ffffffffffffffff82167f00000000000000000000000000000000000000000000000000000000000000000260006117ea8583612737565b9050801561184e576001600160a01b038516877fefed6d3500546b29533b128a29e3a94d70788727f0507505ac12eaf2e578fd9c61182b60208c018c613a34565b6040805163ffffffff9092168252602082018790520160405180910390a361196f565b61185b6020890189613a34565b60405160e09190911b7fffffffff00000000000000000000000000000000000000000000000000000000166020820152606086901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660248201526038810183905260580160408051601f19818403018152918152815160209283012060008a81526009845282812060ff8b168252845291909120557e7c17198cd078035dc663f9a0961f84cb6265411d0b4c793f96d432f6af4b559088908890611923908c018c613a34565b6040805193845260ff909216602084015263ffffffff16908201526001600160a01b03871660608201526080810184905260c060a0820181905260009082015260e00160405180910390a15b50506002805460ff60a01b1916600160a01b179055505050505050565b611994612925565b6119a16020820182613e42565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790556119de6040820160208301613e42565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611a1b6060820160408301613e42565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611a586080820160608301613e42565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611a9560a0820160808301613e42565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611ad260c0820160a08301613e42565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790556040517f9774229668135b546675daf425e41c0848f60aa32d0951881245f4f528cc33f090611b2f9083906142a6565b60405180910390a150565b611b42612925565b611b4c6000612a63565b565b611b56612925565b600155565b600254600160a01b900460ff16600114611b9e57600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b1916740200000000000000000000000000000000000000001790556003546001600160a01b0316338114611bee57604051635bd25eff60e01b815260040160405180910390fd5b60005b82811015611c6c5736848483818110611c0c57611c0c613e8c565b9050604002019050611c63816020016020810190611c2a9190613ebb565b60086000611c3b6020860186613a34565b63ffffffff1663ffffffff168152602001908152602001600020612ac090919063ffffffff16565b50600101611bf1565b507f10c5f2b007767d266c6c75c86ae9ed0c74e6320b30bda231af7396a990e7263c848484604051611ca093929190614325565b60405180910390a150506002805460ff60a01b1916600160a01b1790555050565b600254600090600160a01b900460ff16600114611d0757600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b1916740200000000000000000000000000000000000000001790556007546001600160a01b0316338114611d5757604051635bd25eff60e01b815260040160405180910390fd5b6001600160a01b038516611d97576040517f809fc44b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611da48585856000612b5a565b50506002805460ff60a01b1916600160a01b17905592915050565b600254600160a01b900460ff16600114611e0257600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b191674020000000000000000000000000000000000000000179055604051611e3f9086908690869086908690602001614398565b60408051601f19818403018152918152815160209283012060008a81526009845282812060ff8b16825290935291205414611ea6576040517faba8b6ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087815260096020908152604080832060ff8a168452909152812055611ecd8484612ba2565b611edc611ed984612585565b50565b8015611f83576040517f7cb590120000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637cb5901290611f509087908b906000908890889060040161440a565b600060405180830381600087803b158015611f6a57600080fd5b505af1158015611f7e573d6000803e3d6000fd5b505050505b6040805163ffffffff87168152602081018590526001600160a01b0386169189917fefed6d3500546b29533b128a29e3a94d70788727f0507505ac12eaf2e578fd9c910160405180910390a350506002805460ff60a01b1916600160a01b1790555050505050565b6005546001600160a01b031633811461201757604051635bd25eff60e01b815260040160405180910390fd5b4761202433826000612be7565b6040518181527f19e23b96a5e0d494b59baca97d1fe386cf8e80a978dfd8845d25f1a9d5c7e18390602001611712565b6005546001600160a01b031633811461208057604051635bd25eff60e01b815260040160405180910390fd5b600254600119600160a01b90910460ff16016120af576040516376a9ad7360e01b815260040160405180910390fd5b816120bb5760016120be565b60035b6002805460ff92909216600160a01b0260ff60a01b1990921691909117905560405182151581527f878ac8a2ca79520471f8f3c8494fa802c03ce3bf034252aad7f22318984fdbdb90602001611712565b61211761362b565b604080518082019091526000808252602082015261213685858561223e565b5090969095509350505050565b6007546001600160a01b031633811461216f57604051635bd25eff60e01b815260040160405180910390fd5b81600260158282829054906101000a900467ffffffffffffffff166121949190613fe0565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506121f6836121f18467ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b612ba2565b604080516001600160a01b038516815267ffffffffffffffff841660208201527fa46907b6b80b882da80d6e36cc905dde57fafff0a5442c8898526fe952d1e6539101611390565b61224661362b565b6040805180820190915260008082526020820152604080518082019091526000815260606020820152600254600160a01b900460ff166001146122b257600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b191674020000000000000000000000000000000000000000179055600080806122e389612c28565b92509250925060405180604001604052806123278467ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b81526020017f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff841602905294506000612378612371368b90038b018b61445b565b8751612cc6565b905083156123935761238c8a82848b612d1b565b96506123a5565b61239f8a82848b612eaa565b90975094505b865133907f85496b760a4b7f8d66384b9df21b381f5d1b1e79f229a47aaf4c232edc2fe59a6123d760208e018e613a34565b89516020808c01516040805163ffffffff90951685529184019290925282015260600160405180910390a350506002805460ff60a01b1916600160a01b1790555092969195509350915050565b61242c612925565b6001600160a01b0381166124c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b611ed981612a63565b825460009067ffffffffffffffff1667fffffffffffffffe198101612521576040517f5a5cc94600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8067ffffffffffffffff168367ffffffffffffffff16101561257d5782810367ffffffffffffffff8082169086161161255a578461255c565b805b865467ffffffffffffffff191681840367ffffffffffffffff161787559250505b509392505050565b60006125bf7f000000000000000000000000000000000000000000000000000000000000000083816125b9576125b961448d565b046130a6565b92915050565b6040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490528651948501875233855263ffffffff8a1685840181905267ffffffffffffffff8a8116878a0152928601859052845260089092529490912054841690931492810192909252821515908201525b9392505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115612701576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e7432353600000000000000000000000000000000000000000000000060648201526084016124be565b5090565b60608484848460405160200161271e94939291906144bc565b6040516020818303038152906040529050949350505050565b6040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152602482018390526000917f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f19906044016020604051808303816000875af19250505080156127e0575060408051601f3d908101601f191682019092526127dd9181019061453a565b60015b156125bf579392505050565b3415611ed9576040517f3442dd9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061282f82612585565b90507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff821602915061288c7f0000000000000000000000000000000000000000000000000000000000000000843085613140565b6040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b15801561290757600080fd5b505af115801561291b573d6000803e3d6000fd5b5050505092915050565b6000546001600160a01b03163314611b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016124be565b815467ffffffffffffffff168115612a0b5767ffffffffffffffff8116156129ed576040517fca2bc39800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825467ffffffffffffffff191667ffffffffffffffff178355505050565b67ffffffffffffffff81811614612a4e576040517fca2bc39800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825467ffffffffffffffff191683555b505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b815467ffffffffffffffff1667fffffffffffffffe198101612ae157505050565b612aeb828261414c565b905067fffffffffffffffe1967ffffffffffffffff821601612b39576040517f5a5cc94600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825467ffffffffffffffff191667ffffffffffffffff919091161790915550565b612b668484848461314c565b612b9c576040517f7c75c3d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6000612bae8383612737565b905080612a5e576040517f06a6167e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612bf2838383613181565b612a5e576040517f7c75c3d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080612c3c610be860c0860186613f5e565b9250612c4c338560400135612824565b91506000612c67612c606020870187613a34565b84866125c5565b9050612c7f81612c7a8760600135612585565b6131a8565b9150612cbe8260086000612c9660208a018a613a34565b63ffffffff1663ffffffff16815260200190815260200160002061339d90919063ffffffff16565b509193909250565b604080518082019091526000808252602082015282513414612d14576040517f3442dd9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5090919050565b612d2361362b565b602084015115612d3a57612d3a846020015161342b565b60065484516040805160c081019091523381526001600160a01b039092169163ff6fb3009190602080820190612d72908b018b613a34565b63ffffffff16815260208a8101359082015267ffffffffffffffff88166040820152606001612da460a08b018b613f5e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001612deb60808b018b613f5e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152612e5e919089908890600401614557565b60806040518083038185885af1158015612e7c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612ea19190614607565b95945050505050565b612eb261362b565b604080518082019091526000815260606020820152602085015115612f03576040517fb5e0bf8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546040805160a081019091523381526001600160a01b03909116906385afd45390602080820190612f38908b018b613a34565b63ffffffff16815260208a8101359082015267ffffffffffffffff881660408201526060016000612f6c60808c018c613f5e565b9190911190915250604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815282516001600160a01b03166004820152602083015163ffffffff166024820152908201516044820152606082015167ffffffffffffffff1660648201526080909101511515608482015260a4016000604051808303816000875af115801561300d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130359190810190614623565b60408201515187519294509092509080821461309b57818111156130695781810361306286826000613181565b505061309b565b6040517fa028531600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505094509492505050565b600067ffffffffffffffff821115612701576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016124be565b612b668484848461349e565b60006001600160a01b03851661316e57613167848484613181565b9050613179565b612ea1858585613552565b949350505050565b6000808261318f575a613193565b6001545b9050600080600080878986f195945050505050565b600254604080517f43d9564d00000000000000000000000000000000000000000000000000000000815284516001600160a01b039081166004830152602086015163ffffffff1660248301529185015167ffffffffffffffff9081166044830152606086015116606482015260808501511515608482015260a0850151151560a482015260009291909116906343d9564d9060c4016020604051808303816000875af115801561325c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132809190613fc3565b604084015190915067ffffffffffffffff8082169083161015613307576132a78282613fe0565b600280546015906132dc9084907501000000000000000000000000000000000000000000900467ffffffffffffffff1661414c565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550613335565b8067ffffffffffffffff168267ffffffffffffffff16111561333557600061332f8284613fe0565b90920391505b8267ffffffffffffffff168267ffffffffffffffff16108061335f575067ffffffffffffffff8216155b15613396576040517fa1e8654500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5092915050565b815467ffffffffffffffff1667fffffffffffffffe1981016133be57505050565b8167ffffffffffffffff168167ffffffffffffffff16101561340c576040517f2b4d0ad500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825467ffffffffffffffff191691900367ffffffffffffffff16179055565b6004546001600160a01b03168061346e576040517fb5e0bf8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61349a81337f000000000000000000000000000000000000000000000000000000000000000085613140565b5050565b6040516001600160a01b0380851660248301528316604482015260648101829052600090612ea19086907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261359e565b6040516001600160a01b0383166024820152604481018290526000906131799085907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016134ee565b6000806000846001600160a01b0316846040516135bb9190614718565b6000604051808303816000865af19150503d80600081146135f8576040519150601f19603f3d011682016040523d82523d6000602084013e6135fd565b606091505b50915091508161360e576000612ea1565b80511580612ea1575080806020019051810190612ea1919061453a565b604051806060016040528060008019168152602001600067ffffffffffffffff16815260200161366e604051806040016040528060008152602001600081525090565b905290565b803563ffffffff8116811461368757600080fd5b919050565b6000806000604084860312156136a157600080fd5b6136aa84613673565b9250602084013567ffffffffffffffff808211156136c757600080fd5b818601915086601f8301126136db57600080fd5b8135818111156136ea57600080fd5b8760206060830285010111156136ff57600080fd5b6020830194508093505050509250925092565b60008151808452602080850194506020840160005b8381101561375e578151805163ffffffff16885283015167ffffffffffffffff168388015260409096019590820190600101613727565b509495945050505050565b6020815260006126486020830184613712565b600060e0828403121561378e57600080fd5b50919050565b6000602082840312156137a657600080fd5b813567ffffffffffffffff8111156137bd57600080fd5b6131798482850161377c565b60005b838110156137e45781810151838201526020016137cc565b50506000910152565b600081518084526138058160208601602086016137c9565b601f01601f19169290920160200192915050565b8351815260208085015190820152600060a08201604060a0604085015281865180845260c08601915060c08160051b8701019350602080890160005b838110156138b2578887037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4001855281518051885283015183880187905261389f878901826137ed565b9750509382019390820190600101613855565b50508751606088015250505060208501516080850152509050613179565b602081016002831061390b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60006060828403121561378e57600080fd5b80356001600160a01b038116811461368757600080fd5b67ffffffffffffffff81168114611ed957600080fd5b60008083601f84011261396257600080fd5b50813567ffffffffffffffff81111561397a57600080fd5b60208301915083602082850101111561399257600080fd5b9250929050565b60008060008060008060e087890312156139b257600080fd5b6139bc8888613911565b9550606087013594506139d160808801613923565b935060a08701356139e18161393a565b925060c087013567ffffffffffffffff8111156139fd57600080fd5b613a0989828a01613950565b979a9699509497509295939492505050565b600060208284031215613a2d57600080fd5b5035919050565b600060208284031215613a4657600080fd5b61264882613673565b8015158114611ed957600080fd5b60008060408385031215613a7057600080fd5b823567ffffffffffffffff811115613a8757600080fd5b613a938582860161377c565b9250506020830135613aa481613a4f565b809150509250929050565b8151815260208083015190820152604081016125bf565b60008060408385031215613ad957600080fd5b613ae283613673565b91506020830135613aa481613a4f565b803560ff8116811461368757600080fd5b600080600080600060e08688031215613b1b57600080fd5b613b258787613911565b945060608601359350613b3a60808701613af2565b9250613b4860a08701613923565b915060c0860135613b588161393a565b809150509295509295909350565b600060c0828403121561378e57600080fd5b600080600060408486031215613b8d57600080fd5b613b9684613673565b9250602084013567ffffffffffffffff80821115613bb357600080fd5b818601915086601f830112613bc757600080fd5b813581811115613bd657600080fd5b8760208260061b85010111156136ff57600080fd5b600080600060608486031215613c0057600080fd5b613c0984613923565b9250613c1760208501613923565b9150604084013590509250925092565b600080600080600080600060c0888a031215613c4257600080fd5b87359650613c5260208901613af2565b9550613c6060408901613673565b9450613c6e60608901613923565b93506080880135925060a088013567ffffffffffffffff811115613c9157600080fd5b613c9d8a828b01613950565b989b979a50959850939692959293505050565b600060208284031215613cc257600080fd5b813561264881613a4f565b60008060008385036080811215613ce357600080fd5b843567ffffffffffffffff811115613cfa57600080fd5b613d068782880161377c565b9450506040601f1982011215613d1b57600080fd5b50602084019150613d2e60608501613923565b90509250925092565b8051825267ffffffffffffffff60208201511660208301526040810151612a5e604084018280518252602090810151910152565b60c08101613d798285613d37565b82516080830152602083015160a0830152612648565b60008060408385031215613da257600080fd5b613dab83613923565b91506020830135613aa48161393a565b613dc58185613d37565b82516080820152602083015160a082015260e060c082015268ffffffffffffffffff82511660e0820152600060208301516040610100840152613e0c6101208401826137ed565b9695505050505050565b60008060408385031215613e2957600080fd5b82359150613e3960208401613af2565b90509250929050565b600060208284031215613e5457600080fd5b61264882613923565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215613ecd57600080fd5b81356126488161393a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f3857613f38613ed8565b5060010190565b63ffffffff831681526040602082015260006131796040830184613712565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613f9357600080fd5b83018035915067ffffffffffffffff821115613fae57600080fd5b60200191503681900382131561399257600080fd5b600060208284031215613fd557600080fd5b81516126488161393a565b67ffffffffffffffff82811682821603908082111561339657613396613ed8565b808202600082127f80000000000000000000000000000000000000000000000000000000000000008414161561403957614039613ed8565b81810583148215176125bf576125bf613ed8565b6001600160a01b038516815283602082015261ffff83166040820152608060608201526000613e0c60808301846137ed565b7fffffffff000000000000000000000000000000000000000000000000000000008560e01b1681527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b166004820152826018820152600082516140ed8160388501602087016137c9565b9190910160380195945050505050565b86815260ff8616602082015263ffffffff851660408201526001600160a01b038416606082015282608082015260c060a0820152600061414060c08301846137ed565b98975050505050505050565b67ffffffffffffffff81811683821601908082111561339657613396613ed8565b6001600160a01b03815116825263ffffffff60208201511660208301526040810151604083015267ffffffffffffffff60608201511660608301526000608082015160c060808501526141c360c08501826137ed565b905060a083015184820360a0860152612ea182826137ed565b6040815260006141ef604083018561416d565b905082151560208301529392505050565b6040805190810167ffffffffffffffff8111828210171561422357614223613e5d565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561425257614252613e5d565b604052919050565b60006040828403121561426c57600080fd5b614274614200565b9050815181526020820151602082015292915050565b60006040828403121561429c57600080fd5b612648838361425a565b60c081016001600160a01b03806142bc85613923565b168352806142cc60208601613923565b166020840152806142df60408601613923565b166040840152806142f260608601613923565b1660608401528061430560808601613923565b1660808401528061431860a08601613923565b1660a08401525092915050565b63ffffffff848116825260406020808401829052838201859052600092869160608601855b8881101561438a578361435c86613673565b1682528285013561436c8161393a565b67ffffffffffffffff1682840152938501939085019060010161434a565b509998505050505050505050565b7fffffffff000000000000000000000000000000000000000000000000000000008660e01b1681527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b1660048201528360188201528183603883013760009101603801908152949350505050565b6001600160a01b038616815284602082015261ffff8416604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006040828403121561446d57600080fd5b614475614200565b82358152602083013560208201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffff0000000000000000000000000000000000000000000000008560c01b1681527fffffffff000000000000000000000000000000000000000000000000000000008460e01b16600882015282600c8201526000825161452a81602c8501602087016137c9565b91909101602c0195945050505050565b60006020828403121561454c57600080fd5b815161264881613a4f565b60808152600061456a608083018661416d565b9050614583602083018580518252602090810151910152565b6001600160a01b0383166060830152949350505050565b6000608082840312156145ac57600080fd5b6040516060810181811067ffffffffffffffff821117156145cf576145cf613e5d565b80604052508091508251815260208301516145e98161393a565b60208201526145fb846040850161425a565b60408201525092915050565b60006080828403121561461957600080fd5b612648838361459a565b60008060a0838503121561463657600080fd5b614640848461459a565b9150608083015167ffffffffffffffff8082111561465d57600080fd5b908401906040828703121561467157600080fd5b614679614200565b825168ffffffffffffffffff8116811461469257600080fd5b8152602083810151838111156146a757600080fd5b80850194505087601f8501126146bc57600080fd5b8351838111156146ce576146ce613e5d565b6146e082601f19601f84011601614229565b935080845288828287010111156146f657600080fd5b614705818386018488016137c9565b5081019190915292959294509192505050565b6000825161472a8184602087016137c9565b919091019291505056fea2646970667358221220cd81b8efd836df01fbaf9ed5a566294e13c4ae6b687b7340050455726f9fda6364736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106102195760003560e01c8063857749b01161011d578063b0d7ca5d116100b0578063cbef2aa91161007f578063d621ad3f11610064578063d621ad3f146107b7578063f2fde38b146107ef578063fc0c546a1461080f57600080fd5b8063cbef2aa91461075b578063cc32d1761461077d57600080fd5b8063b0d7ca5d146106e5578063bedb86fb146106fa578063c7c7f5b31461071a578063c859c4831461073b57600080fd5b80639561b12f116100ec5780639561b12f146106695780639f68b96414610689578063a7229fd9146106a5578063a88835d7146106c557600080fd5b8063857749b0146105e257806388543f0e146106165780638c70830b1461062b5780638da5cb5b1461064b57600080fd5b806338da6b8e116101b0578063461bb0b91161017f5780635e280f11116101645780635e280f1114610538578063715018a614610584578063726075371461059957600080fd5b8063461bb0b9146104fb5780635114bf091461051b57600080fd5b806338da6b8e1461043e5780633b6f743b1461048e5780633faa12c5146104bb578063434def55146104db57600080fd5b8063200d2ed2116101ec578063200d2ed2146102e0578063203bd15f146103135780632bc5114c14610335578063341a46481461042b57600080fd5b80630141e41b1461021e5780630d35b41514610254578063156a0d0f1461028357806316909bca146102c4575b600080fd5b34801561022a57600080fd5b5061023e61023936600461368c565b610843565b60405161024b9190613769565b60405180910390f35b34801561026057600080fd5b5061027461026f366004613794565b610ac8565b60405161024b93929190613819565b34801561028f57600080fd5b50604080517f02e49c2c000000000000000000000000000000000000000000000000000000008152600060208201520161024b565b3480156102d057600080fd5b50600160405161024b91906138d0565b3480156102ec57600080fd5b5060025461030190600160a01b900460ff1681565b60405160ff909116815260200161024b565b34801561031f57600080fd5b5061033361032e366004613999565b610fc4565b005b34801561034157600080fd5b506103ca6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506040805160c0810182526002546001600160a01b03908116825260055481166020830152600754811692820192909252600654821660608201526003548216608082015260045490911660a082015290565b60405161024b9190600060c0820190506001600160a01b038084511683528060208501511660208401528060408501511660408401528060608501511660608401528060808501511660808401528060a08501511660a08401525092915050565b610333610439366004613a1b565b6112c3565b34801561044a57600080fd5b50610475610459366004613a34565b60086020526000908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff909116815260200161024b565b34801561049a57600080fd5b506104ae6104a9366004613a5d565b61139d565b60405161024b9190613aaf565b3480156104c757600080fd5b506103336104d6366004613ac6565b61164a565b3480156104e757600080fd5b506103336104f6366004613b03565b61171e565b34801561050757600080fd5b50610333610516366004613b66565b61198c565b34801561052757600080fd5b50475b60405190815260200161024b565b34801561054457600080fd5b5061056c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161024b565b34801561059057600080fd5b50610333611b3a565b3480156105a557600080fd5b506105cd7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161024b565b3480156105ee57600080fd5b506103017f000000000000000000000000000000000000000000000000000000000000000081565b34801561062257600080fd5b5060015461052a565b34801561063757600080fd5b50610333610646366004613a1b565b611b4e565b34801561065757600080fd5b506000546001600160a01b031661056c565b34801561067557600080fd5b50610333610684366004613b78565b611b5b565b34801561069557600080fd5b506040516001815260200161024b565b3480156106b157600080fd5b5061052a6106c0366004613beb565b611cc1565b3480156106d157600080fd5b506103336106e0366004613c27565b611dbf565b3480156106f157600080fd5b50610333611feb565b34801561070657600080fd5b50610333610715366004613cb0565b612054565b61072d610728366004613ccd565b61210f565b60405161024b929190613d6b565b34801561074757600080fd5b50610333610756366004613d8f565b612143565b61076e610769366004613ccd565b61223e565b60405161024b93929190613dbb565b34801561078957600080fd5b50600254610475907501000000000000000000000000000000000000000000900467ffffffffffffffff1681565b3480156107c357600080fd5b5061052a6107d2366004613e16565b600960209081526000928352604080842090915290825290205481565b3480156107fb57600080fd5b5061033361080a366004613e42565b612424565b34801561081b57600080fd5b5061056c7f000000000000000000000000000000000000000000000000000000000000000081565b600254606090600160a01b900460ff166001146108bb57600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6040517fdb22c33c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805460ff60a01b1916740200000000000000000000000000000000000000001790556003546001600160a01b031633811461090b57604051635bd25eff60e01b815260040160405180910390fd5b60008367ffffffffffffffff81111561092657610926613e5d565b60405190808252806020026020018201604052801561096b57816020015b60408051808201909152600080825260208201528152602001906001900390816109445790505b5090506000805b85811015610a6d573687878381811061098d5761098d613e8c565b905060600201905060006109f78260200160208101906109ad9190613ebb565b6109bd6060850160408601613ebb565b600860006109ce6020880188613a34565b63ffffffff1663ffffffff1681526020019081526020016000206124d09092919063ffffffff16565b905067ffffffffffffffff811615610a63576040805180820190915280610a216020850185613a34565b63ffffffff16815267ffffffffffffffff83166020909101528585610a4581613f07565b965081518110610a5757610a57613e8c565b60200260200101819052505b5050600101610972565b508082527fce105e156370093e6600169f7c01277f740d45fbcf95435227ce6f43ad0c3abd8783604051610aa2929190613f3f565b60405180910390a1509150506002805460ff60a01b1916600160a01b1790559392505050565b60408051808201909152600080825260208201526060610afb604051806040016040528060008152602001600081525090565b60408051808201909152807f00000000000000000000000000000000000000000000000000000000000000008152602001610b9660086000886000016020810190610b469190613a34565b63ffffffff16815260208101919091526040016000205467ffffffffffffffff1667ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b81525092506000610bc38460200151866040013511610bb9578560400135612585565b8460200151612585565b90506000610bf3610bd76020880188613a34565b83610bee610be860c08b018b613f5e565b15919050565b6125c5565b600254604080517f81993cd000000000000000000000000000000000000000000000000000000000815283516001600160a01b039081166004830152602085015163ffffffff1660248301529184015167ffffffffffffffff9081166044830152606085015116606482015260808401511515608482015260a0840151151560a48201529293506000929116906381993cd09060c401602060405180830381865afa158015610ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cca9190613fc3565b90508267ffffffffffffffff168167ffffffffffffffff1614610f475760408051600180825281830190925290816020015b604080518082019091526000815260606020820152815260200190600190039081610cfc5790505094508267ffffffffffffffff168167ffffffffffffffff161015610e1e576040518060400160405280610d93610d8e8487610d5f9190613fe0565b67ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b61264f565b610dbd907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614001565b81526020016040518060400160405280600c81526020017f70726f746f636f6c20666565000000000000000000000000000000000000000081525081525085600081518110610e0e57610e0e613e8c565b6020026020010181905250610f47565b8267ffffffffffffffff168167ffffffffffffffff161115610f47576000610e468483613fe0565b9091039050600067ffffffffffffffff84811690831603610ea7576040805160008082526020820190925290610e9f565b604080518082019091526000815260606020820152815260200190600190039081610e775790505b509550610f45565b6040518060400160405280610ee8610d8e8467ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b81526020016040518060400160405280600681526020017f726577617264000000000000000000000000000000000000000000000000000081525081525086600081518110610f3957610f39613e8c565b60200260200101819052505b505b6040518060400160405280610f858567ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b81526020017f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff8416029052959794965050505050565b600254600160a01b900460ff1660011461100757600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b1916740200000000000000000000000000000000000000001790556006546001600160a01b031633811461105757604051635bd25eff60e01b815260040160405180910390fd5b67ffffffffffffffff84167f00000000000000000000000000000000000000000000000000000000000000000282158015906060906110f0576110ed6110a360608c0160408d01613ebb565b6110b060208d018d613a34565b8589898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061270592505050565b90505b60006110fc8985612737565b905080156112055782156111a9576040517f7cb590120000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637cb5901290611176908c908e90600090889060040161404d565b600060405180830381600087803b15801561119057600080fd5b505af11580156111a4573d6000803e3d6000fd5b505050505b6001600160a01b0389168a7fefed6d3500546b29533b128a29e3a94d70788727f0507505ac12eaf2e578fd9c6111e260208f018f613a34565b6040805163ffffffff9092168252602082018990520160405180910390a36112a3565b61121260208c018c613a34565b898584604051602001611228949392919061407f565b60408051601f19818403018152918152815160209283012060008d8152600984528281208180528452918220557e7c17198cd078035dc663f9a0961f84cb6265411d0b4c793f96d432f6af4b55918c9190611285908f018f613a34565b8c888760405161129a969594939291906140fd565b60405180910390a15b50506002805460ff60a01b1916600160a01b179055505050505050505050565b6007546001600160a01b03163381146112ef57604051635bd25eff60e01b815260040160405180910390fd5b6112f8826127ec565b60006113043384612824565b905080600260158282829054906101000a900467ffffffffffffffff1661132b919061414c565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fa064a2faa279f4d67c85c8fc69d4ebb7de2739a9e6dd864dfdd1b9e066d4bfd081604051611390919067ffffffffffffffff91909116815260200190565b60405180910390a1505050565b604080518082019091526000808252602082015260006113c08460400135612585565b90508067ffffffffffffffff16600003611406576040517f3442dd9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611418610be860c0870187613f5e565b90508015611586576006546040805160c081019091523381526001600160a01b0390911690633292cf0290602080820190611455908a018a613a34565b63ffffffff1681526020898101359082015267ffffffffffffffff8616604082015260600161148760a08a018a613f5e565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020016114ce60808a018a613f5e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815261153f919088906004016141dc565b6040805180830381865afa15801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f919061428a565b9250611642565b6000806115966080880188613f5e565b60065492109250506001600160a01b03166375d2208c6115b96020890189613a34565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815263ffffffff91909116600482015283151560248201526044016040805180830381865afa15801561161a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163e919061428a565b9350505b505092915050565b611652612925565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff16036116b7576040517fada8342400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff80831660009081526008602052604090206116d991839061299916565b6040805163ffffffff8416815282151560208201527faf6b8dd4c5a827e03f548d06181b36aaba61e22436ff1cfa9bc409d576366a6091015b60405180910390a15050565b600254600160a01b900460ff1660011461176157600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b1916740200000000000000000000000000000000000000001790556006546001600160a01b03163381146117b157604051635bd25eff60e01b815260040160405180910390fd5b67ffffffffffffffff82167f00000000000000000000000000000000000000000000000000000000000000000260006117ea8583612737565b9050801561184e576001600160a01b038516877fefed6d3500546b29533b128a29e3a94d70788727f0507505ac12eaf2e578fd9c61182b60208c018c613a34565b6040805163ffffffff9092168252602082018790520160405180910390a361196f565b61185b6020890189613a34565b60405160e09190911b7fffffffff00000000000000000000000000000000000000000000000000000000166020820152606086901b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660248201526038810183905260580160408051601f19818403018152918152815160209283012060008a81526009845282812060ff8b168252845291909120557e7c17198cd078035dc663f9a0961f84cb6265411d0b4c793f96d432f6af4b559088908890611923908c018c613a34565b6040805193845260ff909216602084015263ffffffff16908201526001600160a01b03871660608201526080810184905260c060a0820181905260009082015260e00160405180910390a15b50506002805460ff60a01b1916600160a01b179055505050505050565b611994612925565b6119a16020820182613e42565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790556119de6040820160208301613e42565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611a1b6060820160408301613e42565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611a586080820160608301613e42565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611a9560a0820160808301613e42565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055611ad260c0820160a08301613e42565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03929092169190911790556040517f9774229668135b546675daf425e41c0848f60aa32d0951881245f4f528cc33f090611b2f9083906142a6565b60405180910390a150565b611b42612925565b611b4c6000612a63565b565b611b56612925565b600155565b600254600160a01b900460ff16600114611b9e57600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b1916740200000000000000000000000000000000000000001790556003546001600160a01b0316338114611bee57604051635bd25eff60e01b815260040160405180910390fd5b60005b82811015611c6c5736848483818110611c0c57611c0c613e8c565b9050604002019050611c63816020016020810190611c2a9190613ebb565b60086000611c3b6020860186613a34565b63ffffffff1663ffffffff168152602001908152602001600020612ac090919063ffffffff16565b50600101611bf1565b507f10c5f2b007767d266c6c75c86ae9ed0c74e6320b30bda231af7396a990e7263c848484604051611ca093929190614325565b60405180910390a150506002805460ff60a01b1916600160a01b1790555050565b600254600090600160a01b900460ff16600114611d0757600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b1916740200000000000000000000000000000000000000001790556007546001600160a01b0316338114611d5757604051635bd25eff60e01b815260040160405180910390fd5b6001600160a01b038516611d97576040517f809fc44b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611da48585856000612b5a565b50506002805460ff60a01b1916600160a01b17905592915050565b600254600160a01b900460ff16600114611e0257600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b191674020000000000000000000000000000000000000000179055604051611e3f9086908690869086908690602001614398565b60408051601f19818403018152918152815160209283012060008a81526009845282812060ff8b16825290935291205414611ea6576040517faba8b6ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087815260096020908152604080832060ff8a168452909152812055611ecd8484612ba2565b611edc611ed984612585565b50565b8015611f83576040517f7cb590120000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637cb5901290611f509087908b906000908890889060040161440a565b600060405180830381600087803b158015611f6a57600080fd5b505af1158015611f7e573d6000803e3d6000fd5b505050505b6040805163ffffffff87168152602081018590526001600160a01b0386169189917fefed6d3500546b29533b128a29e3a94d70788727f0507505ac12eaf2e578fd9c910160405180910390a350506002805460ff60a01b1916600160a01b1790555050505050565b6005546001600160a01b031633811461201757604051635bd25eff60e01b815260040160405180910390fd5b4761202433826000612be7565b6040518181527f19e23b96a5e0d494b59baca97d1fe386cf8e80a978dfd8845d25f1a9d5c7e18390602001611712565b6005546001600160a01b031633811461208057604051635bd25eff60e01b815260040160405180910390fd5b600254600119600160a01b90910460ff16016120af576040516376a9ad7360e01b815260040160405180910390fd5b816120bb5760016120be565b60035b6002805460ff92909216600160a01b0260ff60a01b1990921691909117905560405182151581527f878ac8a2ca79520471f8f3c8494fa802c03ce3bf034252aad7f22318984fdbdb90602001611712565b61211761362b565b604080518082019091526000808252602082015261213685858561223e565b5090969095509350505050565b6007546001600160a01b031633811461216f57604051635bd25eff60e01b815260040160405180910390fd5b81600260158282829054906101000a900467ffffffffffffffff166121949190613fe0565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506121f6836121f18467ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b612ba2565b604080516001600160a01b038516815267ffffffffffffffff841660208201527fa46907b6b80b882da80d6e36cc905dde57fafff0a5442c8898526fe952d1e6539101611390565b61224661362b565b6040805180820190915260008082526020820152604080518082019091526000815260606020820152600254600160a01b900460ff166001146122b257600254600119600160a01b90910460ff1601610889576040516376a9ad7360e01b815260040160405180910390fd5b6002805460ff60a01b191674020000000000000000000000000000000000000000179055600080806122e389612c28565b92509250925060405180604001604052806123278467ffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000000290565b81526020017f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff841602905294506000612378612371368b90038b018b61445b565b8751612cc6565b905083156123935761238c8a82848b612d1b565b96506123a5565b61239f8a82848b612eaa565b90975094505b865133907f85496b760a4b7f8d66384b9df21b381f5d1b1e79f229a47aaf4c232edc2fe59a6123d760208e018e613a34565b89516020808c01516040805163ffffffff90951685529184019290925282015260600160405180910390a350506002805460ff60a01b1916600160a01b1790555092969195509350915050565b61242c612925565b6001600160a01b0381166124c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b611ed981612a63565b825460009067ffffffffffffffff1667fffffffffffffffe198101612521576040517f5a5cc94600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8067ffffffffffffffff168367ffffffffffffffff16101561257d5782810367ffffffffffffffff8082169086161161255a578461255c565b805b865467ffffffffffffffff191681840367ffffffffffffffff161787559250505b509392505050565b60006125bf7f000000000000000000000000000000000000000000000000000000000000000083816125b9576125b961448d565b046130a6565b92915050565b6040805160c08082018352600080835260208084018290528385018290526060808501839052608080860184905260a09586018490528651948501875233855263ffffffff8a1685840181905267ffffffffffffffff8a8116878a0152928601859052845260089092529490912054841690931492810192909252821515908201525b9392505050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115612701576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e206160448201527f6e20696e7432353600000000000000000000000000000000000000000000000060648201526084016124be565b5090565b60608484848460405160200161271e94939291906144bc565b6040516020818303038152906040529050949350505050565b6040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152602482018390526000917f0000000000000000000000000000000000000000000000000000000000000000909116906340c10f19906044016020604051808303816000875af19250505080156127e0575060408051601f3d908101601f191682019092526127dd9181019061453a565b60015b156125bf579392505050565b3415611ed9576040517f3442dd9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061282f82612585565b90507f000000000000000000000000000000000000000000000000000000000000000067ffffffffffffffff821602915061288c7f0000000000000000000000000000000000000000000000000000000000000000843085613140565b6040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342966c6890602401600060405180830381600087803b15801561290757600080fd5b505af115801561291b573d6000803e3d6000fd5b5050505092915050565b6000546001600160a01b03163314611b4c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016124be565b815467ffffffffffffffff168115612a0b5767ffffffffffffffff8116156129ed576040517fca2bc39800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825467ffffffffffffffff191667ffffffffffffffff178355505050565b67ffffffffffffffff81811614612a4e576040517fca2bc39800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825467ffffffffffffffff191683555b505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b815467ffffffffffffffff1667fffffffffffffffe198101612ae157505050565b612aeb828261414c565b905067fffffffffffffffe1967ffffffffffffffff821601612b39576040517f5a5cc94600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825467ffffffffffffffff191667ffffffffffffffff919091161790915550565b612b668484848461314c565b612b9c576040517f7c75c3d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6000612bae8383612737565b905080612a5e576040517f06a6167e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612bf2838383613181565b612a5e576040517f7c75c3d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080612c3c610be860c0860186613f5e565b9250612c4c338560400135612824565b91506000612c67612c606020870187613a34565b84866125c5565b9050612c7f81612c7a8760600135612585565b6131a8565b9150612cbe8260086000612c9660208a018a613a34565b63ffffffff1663ffffffff16815260200190815260200160002061339d90919063ffffffff16565b509193909250565b604080518082019091526000808252602082015282513414612d14576040517f3442dd9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5090919050565b612d2361362b565b602084015115612d3a57612d3a846020015161342b565b60065484516040805160c081019091523381526001600160a01b039092169163ff6fb3009190602080820190612d72908b018b613a34565b63ffffffff16815260208a8101359082015267ffffffffffffffff88166040820152606001612da460a08b018b613f5e565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250602001612deb60808b018b613f5e565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b168152612e5e919089908890600401614557565b60806040518083038185885af1158015612e7c573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612ea19190614607565b95945050505050565b612eb261362b565b604080518082019091526000815260606020820152602085015115612f03576040517fb5e0bf8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546040805160a081019091523381526001600160a01b03909116906385afd45390602080820190612f38908b018b613a34565b63ffffffff16815260208a8101359082015267ffffffffffffffff881660408201526060016000612f6c60808c018c613f5e565b9190911190915250604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815282516001600160a01b03166004820152602083015163ffffffff166024820152908201516044820152606082015167ffffffffffffffff1660648201526080909101511515608482015260a4016000604051808303816000875af115801561300d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526130359190810190614623565b60408201515187519294509092509080821461309b57818111156130695781810361306286826000613181565b505061309b565b6040517fa028531600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505094509492505050565b600067ffffffffffffffff821115612701576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201527f342062697473000000000000000000000000000000000000000000000000000060648201526084016124be565b612b668484848461349e565b60006001600160a01b03851661316e57613167848484613181565b9050613179565b612ea1858585613552565b949350505050565b6000808261318f575a613193565b6001545b9050600080600080878986f195945050505050565b600254604080517f43d9564d00000000000000000000000000000000000000000000000000000000815284516001600160a01b039081166004830152602086015163ffffffff1660248301529185015167ffffffffffffffff9081166044830152606086015116606482015260808501511515608482015260a0850151151560a482015260009291909116906343d9564d9060c4016020604051808303816000875af115801561325c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132809190613fc3565b604084015190915067ffffffffffffffff8082169083161015613307576132a78282613fe0565b600280546015906132dc9084907501000000000000000000000000000000000000000000900467ffffffffffffffff1661414c565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550613335565b8067ffffffffffffffff168267ffffffffffffffff16111561333557600061332f8284613fe0565b90920391505b8267ffffffffffffffff168267ffffffffffffffff16108061335f575067ffffffffffffffff8216155b15613396576040517fa1e8654500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5092915050565b815467ffffffffffffffff1667fffffffffffffffe1981016133be57505050565b8167ffffffffffffffff168167ffffffffffffffff16101561340c576040517f2b4d0ad500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825467ffffffffffffffff191691900367ffffffffffffffff16179055565b6004546001600160a01b03168061346e576040517fb5e0bf8d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61349a81337f000000000000000000000000000000000000000000000000000000000000000085613140565b5050565b6040516001600160a01b0380851660248301528316604482015260648101829052600090612ea19086907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261359e565b6040516001600160a01b0383166024820152604481018290526000906131799085907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016134ee565b6000806000846001600160a01b0316846040516135bb9190614718565b6000604051808303816000865af19150503d80600081146135f8576040519150601f19603f3d011682016040523d82523d6000602084013e6135fd565b606091505b50915091508161360e576000612ea1565b80511580612ea1575080806020019051810190612ea1919061453a565b604051806060016040528060008019168152602001600067ffffffffffffffff16815260200161366e604051806040016040528060008152602001600081525090565b905290565b803563ffffffff8116811461368757600080fd5b919050565b6000806000604084860312156136a157600080fd5b6136aa84613673565b9250602084013567ffffffffffffffff808211156136c757600080fd5b818601915086601f8301126136db57600080fd5b8135818111156136ea57600080fd5b8760206060830285010111156136ff57600080fd5b6020830194508093505050509250925092565b60008151808452602080850194506020840160005b8381101561375e578151805163ffffffff16885283015167ffffffffffffffff168388015260409096019590820190600101613727565b509495945050505050565b6020815260006126486020830184613712565b600060e0828403121561378e57600080fd5b50919050565b6000602082840312156137a657600080fd5b813567ffffffffffffffff8111156137bd57600080fd5b6131798482850161377c565b60005b838110156137e45781810151838201526020016137cc565b50506000910152565b600081518084526138058160208601602086016137c9565b601f01601f19169290920160200192915050565b8351815260208085015190820152600060a08201604060a0604085015281865180845260c08601915060c08160051b8701019350602080890160005b838110156138b2578887037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4001855281518051885283015183880187905261389f878901826137ed565b9750509382019390820190600101613855565b50508751606088015250505060208501516080850152509050613179565b602081016002831061390b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b60006060828403121561378e57600080fd5b80356001600160a01b038116811461368757600080fd5b67ffffffffffffffff81168114611ed957600080fd5b60008083601f84011261396257600080fd5b50813567ffffffffffffffff81111561397a57600080fd5b60208301915083602082850101111561399257600080fd5b9250929050565b60008060008060008060e087890312156139b257600080fd5b6139bc8888613911565b9550606087013594506139d160808801613923565b935060a08701356139e18161393a565b925060c087013567ffffffffffffffff8111156139fd57600080fd5b613a0989828a01613950565b979a9699509497509295939492505050565b600060208284031215613a2d57600080fd5b5035919050565b600060208284031215613a4657600080fd5b61264882613673565b8015158114611ed957600080fd5b60008060408385031215613a7057600080fd5b823567ffffffffffffffff811115613a8757600080fd5b613a938582860161377c565b9250506020830135613aa481613a4f565b809150509250929050565b8151815260208083015190820152604081016125bf565b60008060408385031215613ad957600080fd5b613ae283613673565b91506020830135613aa481613a4f565b803560ff8116811461368757600080fd5b600080600080600060e08688031215613b1b57600080fd5b613b258787613911565b945060608601359350613b3a60808701613af2565b9250613b4860a08701613923565b915060c0860135613b588161393a565b809150509295509295909350565b600060c0828403121561378e57600080fd5b600080600060408486031215613b8d57600080fd5b613b9684613673565b9250602084013567ffffffffffffffff80821115613bb357600080fd5b818601915086601f830112613bc757600080fd5b813581811115613bd657600080fd5b8760208260061b85010111156136ff57600080fd5b600080600060608486031215613c0057600080fd5b613c0984613923565b9250613c1760208501613923565b9150604084013590509250925092565b600080600080600080600060c0888a031215613c4257600080fd5b87359650613c5260208901613af2565b9550613c6060408901613673565b9450613c6e60608901613923565b93506080880135925060a088013567ffffffffffffffff811115613c9157600080fd5b613c9d8a828b01613950565b989b979a50959850939692959293505050565b600060208284031215613cc257600080fd5b813561264881613a4f565b60008060008385036080811215613ce357600080fd5b843567ffffffffffffffff811115613cfa57600080fd5b613d068782880161377c565b9450506040601f1982011215613d1b57600080fd5b50602084019150613d2e60608501613923565b90509250925092565b8051825267ffffffffffffffff60208201511660208301526040810151612a5e604084018280518252602090810151910152565b60c08101613d798285613d37565b82516080830152602083015160a0830152612648565b60008060408385031215613da257600080fd5b613dab83613923565b91506020830135613aa48161393a565b613dc58185613d37565b82516080820152602083015160a082015260e060c082015268ffffffffffffffffff82511660e0820152600060208301516040610100840152613e0c6101208401826137ed565b9695505050505050565b60008060408385031215613e2957600080fd5b82359150613e3960208401613af2565b90509250929050565b600060208284031215613e5457600080fd5b61264882613923565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215613ecd57600080fd5b81356126488161393a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f3857613f38613ed8565b5060010190565b63ffffffff831681526040602082015260006131796040830184613712565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613f9357600080fd5b83018035915067ffffffffffffffff821115613fae57600080fd5b60200191503681900382131561399257600080fd5b600060208284031215613fd557600080fd5b81516126488161393a565b67ffffffffffffffff82811682821603908082111561339657613396613ed8565b808202600082127f80000000000000000000000000000000000000000000000000000000000000008414161561403957614039613ed8565b81810583148215176125bf576125bf613ed8565b6001600160a01b038516815283602082015261ffff83166040820152608060608201526000613e0c60808301846137ed565b7fffffffff000000000000000000000000000000000000000000000000000000008560e01b1681527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b166004820152826018820152600082516140ed8160388501602087016137c9565b9190910160380195945050505050565b86815260ff8616602082015263ffffffff851660408201526001600160a01b038416606082015282608082015260c060a0820152600061414060c08301846137ed565b98975050505050505050565b67ffffffffffffffff81811683821601908082111561339657613396613ed8565b6001600160a01b03815116825263ffffffff60208201511660208301526040810151604083015267ffffffffffffffff60608201511660608301526000608082015160c060808501526141c360c08501826137ed565b905060a083015184820360a0860152612ea182826137ed565b6040815260006141ef604083018561416d565b905082151560208301529392505050565b6040805190810167ffffffffffffffff8111828210171561422357614223613e5d565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561425257614252613e5d565b604052919050565b60006040828403121561426c57600080fd5b614274614200565b9050815181526020820151602082015292915050565b60006040828403121561429c57600080fd5b612648838361425a565b60c081016001600160a01b03806142bc85613923565b168352806142cc60208601613923565b166020840152806142df60408601613923565b166040840152806142f260608601613923565b1660608401528061430560808601613923565b1660808401528061431860a08601613923565b1660a08401525092915050565b63ffffffff848116825260406020808401829052838201859052600092869160608601855b8881101561438a578361435c86613673565b1682528285013561436c8161393a565b67ffffffffffffffff1682840152938501939085019060010161434a565b509998505050505050505050565b7fffffffff000000000000000000000000000000000000000000000000000000008660e01b1681527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008560601b1660048201528360188201528183603883013760009101603801908152949350505050565b6001600160a01b038616815284602082015261ffff8416604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60006040828403121561446d57600080fd5b614475614200565b82358152602083013560208201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7fffffffffffffffff0000000000000000000000000000000000000000000000008560c01b1681527fffffffff000000000000000000000000000000000000000000000000000000008460e01b16600882015282600c8201526000825161452a81602c8501602087016137c9565b91909101602c0195945050505050565b60006020828403121561454c57600080fd5b815161264881613a4f565b60808152600061456a608083018661416d565b9050614583602083018580518252602090810151910152565b6001600160a01b0383166060830152949350505050565b6000608082840312156145ac57600080fd5b6040516060810181811067ffffffffffffffff821117156145cf576145cf613e5d565b80604052508091508251815260208301516145e98161393a565b60208201526145fb846040850161425a565b60408201525092915050565b60006080828403121561461957600080fd5b612648838361459a565b60008060a0838503121561463657600080fd5b614640848461459a565b9150608083015167ffffffffffffffff8082111561465d57600080fd5b908401906040828703121561467157600080fd5b614679614200565b825168ffffffffffffffffff8116811461469257600080fd5b8152602083810151838111156146a757600080fd5b80850194505087601f8501126146bc57600080fd5b8351838111156146ce576146ce613e5d565b6146e082601f19601f84011601614229565b935080845288828287010111156146f657600080fd5b614705818386018488016137c9565b5081019190915292959294509192505050565b6000825161472a8184602087016137c9565b919091019291505056fea2646970667358221220cd81b8efd836df01fbaf9ed5a566294e13c4ae6b687b7340050455726f9fda6364736f6c63430008160033",
  "devdoc": {
    "details": "designed for bridged USDC migration perhttps://github.com/circlefin/stablecoin-evm/blob/master/doc/bridged_USDC_standard.md",
    "kind": "dev",
    "methods": {
      "addTreasuryFee(uint256)": {
        "details": "Only used for increasing the overall budget for transaction rewardsThe treasuryFee is essentially the reward pool.Rewards are capped to the treasury amount, which limits exposure soStargate does not pay beyond what it's charged.",
        "params": {
          "_amountLD": "The amount to add in LD"
        }
      },
      "approvalRequired()": {
        "details": "Implements the IOFT interface.",
        "returns": {
          "_0": "Whether approval of the underlying token implementation is required"
        }
      },
      "getAddressConfig()": {
        "returns": {
          "_0": "An AddressConfig struct containing the current configuration"
        }
      },
      "oftVersion()": {
        "details": "Implements the IOFT interface.0 version means the message encoding is not compatible with the default OFT.",
        "returns": {
          "interfaceId": "The ERC165 interface ID for this contract",
          "version": "The cross-chain compatible message encoding version."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))": {
        "details": "Implements the IOFT interface",
        "params": {
          "_sendParam": "The parameters for the send operation"
        },
        "returns": {
          "limit": "The information on OFT transfer limits",
          "oftFeeDetails": "The details of OFT transaction cost or reward",
          "receipt": "The OFT receipt information, indicating how many tokens would be sent and received"
        }
      },
      "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": {
        "details": "Implements the IOFT interface.Reverts with InvalidAmount if send mode is drive but value is specified.MessagingFee: LayerZero message fee   - nativeFee: The native fee.   - lzTokenFee: The LZ token fee.",
        "params": {
          "_payInLzToken": "Flag indicating whether the caller is paying in the LZ token",
          "_sendParam": "The parameters for the send() operation"
        },
        "returns": {
          "fee": "The calculated LayerZero messaging fee from the send() operation"
        }
      },
      "receiveCredits(uint32,(uint32,uint64)[])": {
        "details": "Emits CreditsReceived when credits are received",
        "params": {
          "_credits": "An array indicating to which paths and how much credits to add",
          "_srcEid": "The endpoint ID of the source of credits"
        }
      },
      "receiveTokenBus((uint32,bytes32,uint64),bytes32,uint8,address,uint64)": {
        "details": "Emits OFTReceived when the OFT token is correctly receivedEmits UnreceivedTokenCached when the OFT token is not received",
        "params": {
          "_guid": "The global unique ID for this message, useful for composing",
          "_origin": "The Origin struct describing the origin, useful for composing"
        }
      },
      "recoverToken(address,address,uint256)": {
        "details": "Recover tokens sent to this contract by mistake.Only the treasurer can recover the token.Reverts with Stargate_RecoverTokenUnsupported if the treasurer attempts to withdraw StargateBase.token().",
        "params": {
          "_amount": "the amount to send",
          "_to": "the address to send the token to",
          "_token": "the token to recover. if 0x0 then it is native token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "retryReceiveToken(bytes32,uint8,uint32,address,uint256,bytes)": {
        "details": "The message has been delivered by the Messaging layer, so it is ok for anyone to retry.try to receive the token if the previous attempt failed in lzReceiveReverts with UnreceivedTokenNotFound if the message is not found in the cacheEmits OFTReceived if the receive succeeds",
        "params": {
          "_amountLD": "The amount of tokens in LD to transfer to the account",
          "_composeMsg": "The bytes representing the compose message in the message that failed",
          "_guid": "The global unique ID for the message that failed",
          "_index": "The index of the message that failed",
          "_receiver": "The account receiver for the message that failed",
          "_srcEid": "The source endpoint ID for the message that failed"
        }
      },
      "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": {
        "details": "Emits OFTSent when the send is successful",
        "params": {
          "_fee": "The MessagingFee object describing the fee to pay",
          "_refundAddress": "The address to refund any LZ fees paid in excess",
          "_sendParam": "The SendParam object detailing the transaction"
        },
        "returns": {
          "msgReceipt": "The receipt proving the message was sent",
          "oftReceipt": "The receipt proving the OFT swap"
        }
      },
      "sendToken((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": {
        "details": "This function is same as `send` in OFT interface but returns the ticket data if in the bus ride mode, which allows the caller to ride and drive the bus in the same transaction."
      },
      "setAddressConfig((address,address,address,address,address,address))": {
        "params": {
          "_config": "An AddressConfig object containing the addresses for the different roles used by Stargate."
        }
      },
      "setOFTPath(uint32,bool)": {
        "details": "Set the path as OFT if the remote chain is using OFT.When migrating from OFT to pool on remote chain (e.g. migrate USDC to circles), reset the path to non-OFT.Reverts with InvalidPath if the destination chain is the same as local.",
        "params": {
          "_dstEid": "The destination chain endpoint ID",
          "_oft": "Whether to set or reset the path"
        }
      },
      "setPause(bool)": {
        "details": "Be careful with this call, as it unsets the re-entry guard.",
        "params": {
          "_paused": "Whether to pause or unpause the stargate"
        }
      },
      "stargateType()": {
        "details": "Fulfills the IStargate interface.",
        "returns": {
          "_0": "The type of Stargate contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawPlannerFee()": {
        "details": "The planner fee is accumulated in StargateBase to avoid the cost of passing msg.value to TokenMessaging."
      },
      "withdrawTreasuryFee(address,uint64)": {
        "params": {
          "_amountSD": "The amount to withdraw in SD",
          "_to": "The destination account"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTreasuryFee(uint256)": {
        "notice": "Add tokens to the treasury, from the senders account."
      },
      "approvalRequired()": {
        "notice": "Indicates whether the OFT contract requires approval of the 'token()' to send."
      },
      "getAddressConfig()": {
        "notice": "Returns the current roles configured."
      },
      "oftVersion()": {
        "notice": "Get the OFT version information"
      },
      "quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))": {
        "notice": "Provides a quote for sending OFT to another chain."
      },
      "quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)": {
        "notice": "Provides a quote for the send() operation."
      },
      "receiveCredits(uint32,(uint32,uint64)[])": {
        "notice": "Entrypoint for receiving credits into paths"
      },
      "receiveTokenBus((uint32,bytes32,uint64),bytes32,uint8,address,uint64)": {
        "notice": "Entrypoint for receiving tokens"
      },
      "retryReceiveToken(bytes32,uint8,uint32,address,uint256,bytes)": {
        "notice": "Retry receiving a token that initially failed."
      },
      "send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)": {
        "notice": "Send tokens through the Stargate"
      },
      "setAddressConfig((address,address,address,address,address,address))": {
        "notice": "Configure the roles for this contract."
      },
      "setOFTPath(uint32,bool)": {
        "notice": "Sets a given Path as using OFT or resets it from OFT."
      },
      "setPause(bool)": {
        "notice": "Pause or unpause a Stargate"
      },
      "stargateType()": {
        "notice": "Returns the type of Stargate contract."
      },
      "withdrawPlannerFee()": {
        "notice": "Withdraw planner fees accumulated in StargateBase."
      },
      "withdrawTreasuryFee(address,uint64)": {
        "notice": "Withdraw from the accrued fees in the treasury."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5047,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17852,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "transferGasLimit",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 11291,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "feeLib",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 11295,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "status",
        "offset": 20,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 11298,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "treasuryFee",
        "offset": 21,
        "slot": "2",
        "type": "t_uint64"
      },
      {
        "astId": 11300,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "creditMessaging",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 11302,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "lzToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 11304,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "planner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 11306,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "tokenMessaging",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 11308,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "treasurer",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 11314,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "paths",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint32,t_struct(Path)17463_storage)"
      },
      {
        "astId": 11321,
        "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
        "label": "unreceivedTokens",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint8,t_bytes32))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint8,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint8 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_bytes32)"
      },
      "t_mapping(t_uint32,t_struct(Path)17463_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct Path)",
        "numberOfBytes": "32",
        "value": "t_struct(Path)17463_storage"
      },
      "t_mapping(t_uint8,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_struct(Path)17463_storage": {
        "encoding": "inplace",
        "label": "struct Path",
        "members": [
          {
            "astId": 17462,
            "contract": "src/usdc/StargateOFTUSDC.sol:StargateOFTUSDC",
            "label": "credit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
