{
  "address": "0xd69A3D88438f042a5a0b995b970F78FC8120ED67",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IStargateStaking",
          "name": "_staking",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "MultiRewarderDisconnectedStakingToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "actual",
          "type": "uint256"
        }
      ],
      "name": "MultiRewarderIncorrectNative",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiRewarderMaxActiveRewardTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiRewarderMaxPoolsForRewardToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MultiRewarderNativeTransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "MultiRewarderPoolFinished",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiRewarderRenounceOwnershipDisabled",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        }
      ],
      "name": "MultiRewarderStartInPast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MultiRewarderUnauthorizedCaller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "MultiRewarderUnregisteredToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiRewarderZeroDuration",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MultiRewarderZeroRewardRate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "RewarderAlreadyConnected",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20[]",
          "name": "stakeToken",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint48[]",
          "name": "allocPoint",
          "type": "uint48[]"
        }
      ],
      "name": "AllocPointsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "stakeToken",
          "type": "address"
        }
      ],
      "name": "PoolRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "newEnd",
          "type": "uint48"
        }
      ],
      "name": "RewardExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "RewardRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountAdded",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "duration",
          "type": "uint48"
        }
      ],
      "name": "RewardSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pullTokens",
          "type": "bool"
        }
      ],
      "name": "RewardStopped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "RewarderConnected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "rewardTokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "RewardsClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "allocPointsByReward",
      "outputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint48[]",
          "name": "",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "allocPointsByStake",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint48[]",
          "name": "",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "name": "connect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "extendReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "oldStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oldSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "onUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "rewardDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rewardPerSec",
              "type": "uint256"
            },
            {
              "internalType": "uint160",
              "name": "totalAllocPoints",
              "type": "uint160"
            },
            {
              "internalType": "uint48",
              "name": "start",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "end",
              "type": "uint48"
            },
            {
              "internalType": "bool",
              "name": "exists",
              "type": "bool"
            }
          ],
          "internalType": "struct IMultiRewarder.RewardDetails",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "stakingTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint48[]",
          "name": "allocPoints",
          "type": "uint48[]"
        }
      ],
      "name": "setAllocPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "start",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "duration",
          "type": "uint48"
        }
      ],
      "name": "setReward",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStargateStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "pullTokens",
          "type": "bool"
        }
      ],
      "name": "stopReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x569b3cce73f2471308285575b8b1fe1ae8f9b6d663d026776de6dda55fab9571",
  "receipt": {
    "to": null,
    "from": "0x4A79AdC4539905376D339C69b6a7092D0598cc24",
    "contractAddress": "0xd69A3D88438f042a5a0b995b970F78FC8120ED67",
    "transactionIndex": 0,
    "gasUsed": "2600114",
    "logsBloom": "0x
    "blockHash": "0x2fc0435193161f7057b351ce5599e5bc987d1b7dcf82660e2622479c30b690da",
    "transactionHash": "0x569b3cce73f2471308285575b8b1fe1ae8f9b6d663d026776de6dda55fab9571",
    "logs": [
      {
        "transactionIndex": 27,
        "blockNumber": 93007274,
        "transactionHash": "0x569b3cce73f2471308285575b8b1fe1ae8f9b6d663d026776de6dda55fab9571",
        "address": "0xd69A3D88438f042a5a0b995b970F78FC8120ED67",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004a79adc4539905376d339c69b6a7092d0598cc24"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2fc0435193161f7057b351ce5599e5bc987d1b7dcf82660e2622479c30b690da"
      }
    ],
    "blockNumber": 93007274,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x8c1014B5936dD88BAA5F4DB0423C3003615E03a0"],
  "numDeployments": 1,
  "solcInputHash": "7f30a30e9578a142f505c41026c21857",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IStargateStaking\",\"name\":\"_staking\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"MultiRewarderDisconnectedStakingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"MultiRewarderIncorrectNative\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiRewarderMaxActiveRewardTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiRewarderMaxPoolsForRewardToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MultiRewarderNativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"MultiRewarderPoolFinished\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiRewarderRenounceOwnershipDisabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"MultiRewarderStartInPast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MultiRewarderUnauthorizedCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"MultiRewarderUnregisteredToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiRewarderZeroDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MultiRewarderZeroRewardRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"RewarderAlreadyConnected\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20[]\",\"name\":\"stakeToken\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint48[]\",\"name\":\"allocPoint\",\"type\":\"uint48[]\"}],\"name\":\"AllocPointsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"PoolRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"newEnd\",\"type\":\"uint48\"}],\"name\":\"RewardExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RewardRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"duration\",\"type\":\"uint48\"}],\"name\":\"RewardSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pullTokens\",\"type\":\"bool\"}],\"name\":\"RewardStopped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"RewarderConnected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"allocPointsByReward\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint48[]\",\"name\":\"\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"allocPointsByStake\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint48[]\",\"name\":\"\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"name\":\"connect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"extendReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"oldStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oldSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"onUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"rewardDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"totalAllocPoints\",\"type\":\"uint160\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"end\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct IMultiRewarder.RewardDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"stakingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint48[]\",\"name\":\"allocPoints\",\"type\":\"uint48[]\"}],\"name\":\"setAllocPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"start\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"duration\",\"type\":\"uint48\"}],\"name\":\"setReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStargateStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"pullTokens\",\"type\":\"bool\"}],\"name\":\"stopReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"MultiRewarderDisconnectedStakingToken(address)\":[{\"notice\":\"The token is not connected to the staking contract, connect it first.\"}],\"MultiRewarderIncorrectNative(uint256,uint256)\":[{\"notice\":\"A wrong `msg.value` was provided while setting a native reward, make sure it matches the function          `amount`.\"}],\"MultiRewarderMaxActiveRewardTokens()\":[{\"notice\":\"Due to various functions looping over the reward tokens connected to a staking token,          a maximum number of such links is instated.\"}],\"MultiRewarderMaxPoolsForRewardToken()\":[{\"notice\":\"Due to various functions looping over the staking tokens connected to a reward token,          a maximum number of such links is instated.\"}],\"MultiRewarderNativeTransferFailed(address,uint256)\":[{\"notice\":\"The recipient failed to handle the receipt of the native tokens, do they have a receipt hook?          If not, use `emergencyWithdraw`.\"}],\"MultiRewarderPoolFinished(address)\":[{\"notice\":\"The function can only be called while the pool hasn't ended yet.\"}],\"MultiRewarderRenounceOwnershipDisabled()\":[{\"notice\":\"MultiRewarder renounce ownership is disabled.\"}],\"MultiRewarderStartInPast(uint256)\":[{\"notice\":\"The pool start time cannot be set in the past, as this would cause the rewards to be voided.\"}],\"MultiRewarderUnauthorizedCaller(address)\":[{\"notice\":\"This function is only callable by the staking contract.\"}],\"MultiRewarderUnregisteredToken(address)\":[{\"notice\":\"This token is not registered via `setReward` yet, register it first.\"}],\"MultiRewarderZeroDuration()\":[{\"notice\":\"The pool emission duration cannot be set to zero, as this would cause the rewards to be voided.\"}],\"MultiRewarderZeroRewardRate()\":[{\"notice\":\"Due to a zero input or rounding, the reward rate while setting this pool would be zero,          which is not allowed.\"}],\"RewarderAlreadyConnected(address)\":[{\"notice\":\"The rewarder cannot be reconnected to the same staking token as it would cause wrongful reward          attribution through reconfiguration.\"}]},\"events\":{\"AllocPointsSet(address,address[],uint48[])\":{\"notice\":\"Emitted when the owner adjusts the allocation points for pools.\"},\"PoolRegistered(address,address)\":{\"notice\":\"Emitted whenever a new staking pool combination was registered via the allocation point adjustment          function.\"},\"RewardExtended(address,uint256,uint48)\":{\"notice\":\"Emitted when additional rewards were added to a pool, extending the reward duration.\"},\"RewardRegistered(address)\":{\"notice\":\"Emitted when a reward token has been registered. Can be emitted again for the same token after it has          been explicitly stopped.\"},\"RewardSet(address,uint256,uint256,uint48,uint48)\":{\"notice\":\"Emitted when the reward pool has been adjusted or intialized, with the new params.\"},\"RewardStopped(address,address,bool)\":{\"notice\":\"Emitted when a reward token is stopped.\"},\"RewarderConnected(address)\":{\"notice\":\"Emitted when the rewarder is connected to a staking token.\"},\"RewardsClaimed(address,address[],uint256[])\":{\"notice\":\"Emitted whenever rewards are claimed via the staking pool.\"}},\"kind\":\"user\",\"methods\":{\"allocPointsByReward(address)\":{\"notice\":\"Returns the allocation points for the `rewardToken` over all staking tokens linked to it.\"},\"allocPointsByStake(address)\":{\"notice\":\"Returns the allocation points for the `stakingToken` over all reward tokens linked to it.\"},\"connect(address)\":{\"notice\":\"Called by the staking contract whenever this rewarder is connected to a staking token in the staking          contract. Should only be callable once per staking token to avoid wrongful reward attribution through          reconfiguration.\"},\"extendReward(address,uint256)\":{\"notice\":\"ADMIN FUNCTIONS *\"},\"getRewards(address,address)\":{\"notice\":\"VIEW FUNCTIONS *\"},\"rewardDetails(address)\":{\"notice\":\"Returns the emission details of a `rewardToken`, configured via `setReward`.\"},\"rewardTokens()\":{\"notice\":\"Returns all enabled reward tokens. Stopped reward tokens are not included, while ended rewards are.\"},\"setAllocPoints(address,address[],uint48[])\":{\"notice\":\"Configures allocation points for a reward token over multiple staking tokens, setting the `allocPoints`          for each `stakingTokens` and updating the `totalAllocPoint` for the `rewardToken`. The allocation          points of any non-provided staking tokens will be left as-is, and won't be reset to zero.\"},\"stopReward(address,address,bool)\":{\"notice\":\"Unregisters a reward token fully, immediately preventing users from ever harvesting their pending          accumulated rewards. Optionally `pullTokens` can be set to false which causes the token balance to          not be sent to the owner, this should only be set to false in case the token is bugged and reverts.\"}},\"notice\":\"See `IMultiRewarder` and `IRewarder` for documentation.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/peripheral/rewarder/StargateMultiRewarder.sol\":\"StargateMultiRewarder\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"src/peripheral/rewarder/StargateMultiRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IStargateStaking } from \\\"./interfaces/IStargateStaking.sol\\\";\\nimport { IMultiRewarder, IERC20 } from \\\"./interfaces/IMultiRewarder.sol\\\";\\nimport { RewardLib, RewardPool } from \\\"./lib/RewardLib.sol\\\";\\nimport { RewardRegistryLib, RewardRegistry } from \\\"./lib/RewardRegistryLib.sol\\\";\\n\\n/// @notice See `IMultiRewarder` and `IRewarder` for documentation.\\ncontract StargateMultiRewarder is Ownable, IMultiRewarder {\\n    using RewardLib for RewardPool;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using RewardRegistryLib for RewardRegistry;\\n    using SafeCast for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    address private constant ETH = address(0);\\n\\n    RewardRegistry private registry;\\n    IStargateStaking public immutable staking;\\n\\n    modifier onlyStaking() {\\n        if (msg.sender != address(staking)) revert MultiRewarderUnauthorizedCaller(msg.sender);\\n        _;\\n    }\\n\\n    constructor(IStargateStaking _staking) {\\n        staking = _staking;\\n    }\\n\\n    //** STAKING FUNCTIONS **/\\n\\n    function onUpdate(\\n        IERC20 stakingToken,\\n        address user,\\n        uint256 oldStake,\\n        uint256 oldSupply,\\n        uint256 /*newStake*/\\n    ) external onlyStaking {\\n        uint256[] memory ids = registry.byStake[stakingToken].values();\\n        address[] memory tokens = new address[](ids.length);\\n        uint256[] memory amounts = new uint256[](ids.length);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            RewardPool storage pool = registry.pools[ids[i]];\\n            address rewardToken = pool.rewardToken;\\n            tokens[i] = rewardToken;\\n            amounts[i] = pool.indexAndUpdate(registry.rewardDetails[rewardToken], user, oldStake, oldSupply);\\n        }\\n\\n        emit RewardsClaimed(user, tokens, amounts);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (amounts[i] > 0) {\\n                _transferToken(user, tokens[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    function connect(IERC20 stakingToken) external onlyStaking {\\n        if (registry.connected[stakingToken]) revert RewarderAlreadyConnected(stakingToken);\\n        registry.connected[stakingToken] = true;\\n        emit RewarderConnected(stakingToken);\\n    }\\n\\n    function _indexRewardTokenPools(address rewardToken) internal {\\n        uint256 numPools = registry.byReward[rewardToken].length();\\n        for (uint256 i = 0; i < numPools; i++) {\\n            RewardPool storage pool = registry.pools[registry.byReward[rewardToken].at(i)];\\n            pool.index(registry.rewardDetails[rewardToken], staking.totalSupply(pool.stakingToken));\\n        }\\n    }\\n\\n    /**\\n     * ADMIN FUNCTIONS *\\n     */\\n    function extendReward(address rewardToken, uint256 amount) external payable onlyOwner {\\n        RewardDetails storage reward = registry.rewardDetails[rewardToken];\\n        if (!reward.exists) revert MultiRewarderUnregisteredToken(rewardToken);\\n        if (reward.end < block.timestamp) revert MultiRewarderPoolFinished(rewardToken);\\n\\n        reward.end += (amount / reward.rewardPerSec).toUint48();\\n\\n        emit RewardExtended(rewardToken, amount, reward.end);\\n\\n        _transferInToken(rewardToken, amount);\\n    }\\n\\n    function setReward(address rewardToken, uint256 amount, uint48 start, uint48 duration) external payable onlyOwner {\\n        if (start < block.timestamp) revert MultiRewarderStartInPast(start);\\n        if (duration == 0) revert MultiRewarderZeroDuration();\\n        RewardDetails storage reward = registry.getOrCreateRewardDetails(rewardToken);\\n        _indexRewardTokenPools(rewardToken);\\n\\n        uint256 rewardsToAdd = amount;\\n        if (block.timestamp < reward.end) {\\n            uint256 previousStart = reward.start > block.timestamp ? reward.start : block.timestamp;\\n            rewardsToAdd += reward.rewardPerSec * (reward.end - previousStart);\\n        }\\n\\n        uint256 rewardPerSec = rewardsToAdd / duration;\\n        if (rewardPerSec == 0) revert MultiRewarderZeroRewardRate();\\n\\n        reward.start = start;\\n        reward.end = start + duration;\\n        reward.rewardPerSec = rewardPerSec;\\n\\n        emit RewardSet(rewardToken, amount, rewardsToAdd, start, duration);\\n\\n        _transferInToken(rewardToken, amount);\\n    }\\n\\n    function setAllocPoints(\\n        address rewardToken,\\n        IERC20[] calldata stakingTokens,\\n        uint48[] calldata allocPoints\\n    ) external onlyOwner {\\n        _indexRewardTokenPools(rewardToken);\\n        registry.setAllocPoints(rewardToken, stakingTokens, allocPoints);\\n        emit AllocPointsSet(rewardToken, stakingTokens, allocPoints);\\n    }\\n\\n    function stopReward(address rewardToken, address receiver, bool pullTokens) external onlyOwner {\\n        registry.removeReward(rewardToken);\\n        /**\\n         * @dev we provide pullTokens as we especially need to be able to retire rewards even if the token transfers\\n         *      revert for some reason.\\n         */\\n        if (pullTokens) {\\n            uint256 amount = rewardToken == ETH ? address(this).balance : IERC20(rewardToken).balanceOf(address(this));\\n            _transferToken(receiver, rewardToken, amount);\\n        }\\n        emit RewardStopped(rewardToken, receiver, pullTokens);\\n    }\\n\\n    function renounceOwnership() public view override onlyOwner {\\n        revert MultiRewarderRenounceOwnershipDisabled();\\n    }\\n\\n    /**\\n     * UTILITIES *\\n     */\\n    function _transferToken(address to, address token, uint256 amount) internal {\\n        if (token == ETH) {\\n            (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n            if (!success) revert MultiRewarderNativeTransferFailed(token, amount);\\n        } else {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n\\n    function _transferInToken(address token, uint256 amount) internal {\\n        if (token == ETH) {\\n            if (msg.value != amount) revert MultiRewarderIncorrectNative(amount, msg.value);\\n        } else {\\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        }\\n    }\\n\\n    /**\\n     * VIEW FUNCTIONS *\\n     */\\n    function getRewards(IERC20 stakingToken, address user) external view returns (address[] memory, uint256[] memory) {\\n        uint256[] memory ids = registry.byStake[stakingToken].values();\\n        address[] memory tokens = new address[](ids.length);\\n        uint256[] memory amounts = new uint256[](ids.length);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            RewardPool storage pool = registry.pools[ids[i]];\\n            RewardDetails storage reward = registry.rewardDetails[pool.rewardToken];\\n            tokens[i] = pool.rewardToken;\\n            amounts[i] = pool.getRewards(\\n                reward,\\n                user,\\n                staking.balanceOf(pool.stakingToken, user),\\n                staking.totalSupply(pool.stakingToken)\\n            );\\n        }\\n        return (tokens, amounts);\\n    }\\n\\n    function allocPointsByReward(address rewardToken) external view returns (IERC20[] memory, uint48[] memory) {\\n        return registry.allocPointsByReward(rewardToken);\\n    }\\n\\n    function allocPointsByStake(IERC20 stakingToken) external view returns (address[] memory, uint48[] memory) {\\n        return registry.allocPointsByStake(stakingToken);\\n    }\\n\\n    function rewardDetails(address rewardToken) external view returns (RewardDetails memory) {\\n        return registry.rewardDetails[rewardToken];\\n    }\\n\\n    function rewardTokens() external view override returns (address[] memory) {\\n        return registry.rewardTokens.values();\\n    }\\n}\\n\",\"keccak256\":\"0x6b5c4beb9daa936df13e7958a705bdcc43fcfe16695ae54864a4cb1e4b15e6e6\",\"license\":\"BUSL-1.1\"},\"src/peripheral/rewarder/interfaces/IMultiRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { IRewarder, IERC20 } from \\\"./IRewarder.sol\\\";\\n\\n// @dev This is an internal struct, placed here as its shared between multiple libraries.\\nstruct RewardPool {\\n    uint256 accRewardPerShare;\\n    address rewardToken;\\n    uint48 lastRewardTime;\\n    uint48 allocPoints;\\n    IERC20 stakingToken;\\n    bool removed;\\n    mapping(address => uint256) rewardDebt;\\n}\\n\\n/// @notice A rewarder that can distribute multiple reward tokens (ERC20 and native) to `StargateStaking` pools.\\n/// @dev The native token is encoded as 0x0.\\ninterface IMultiRewarder is IRewarder {\\n    struct RewardDetails {\\n        uint256 rewardPerSec;\\n        uint160 totalAllocPoints;\\n        uint48 start;\\n        uint48 end;\\n        bool exists;\\n    }\\n\\n    /// @notice MultiRewarder renounce ownership is disabled.\\n    error MultiRewarderRenounceOwnershipDisabled();\\n    /// @notice The token is not connected to the staking contract, connect it first.\\n    error MultiRewarderDisconnectedStakingToken(address token);\\n    /// @notice This token is not registered via `setReward` yet, register it first.\\n    error MultiRewarderUnregisteredToken(address token);\\n    /**\\n     *  @notice Due to various functions looping over the staking tokens connected to a reward token,\\n     *          a maximum number of such links is instated.\\n     */\\n    error MultiRewarderMaxPoolsForRewardToken();\\n    /**\\n     *  @notice Due to various functions looping over the reward tokens connected to a staking token,\\n     *          a maximum number of such links is instated.\\n     */\\n    error MultiRewarderMaxActiveRewardTokens();\\n    /// @notice The function can only be called while the pool hasn't ended yet.\\n    error MultiRewarderPoolFinished(address rewardToken);\\n    /// @notice The pool emission duration cannot be set to zero, as this would cause the rewards to be voided.\\n    error MultiRewarderZeroDuration();\\n    /// @notice The pool start time cannot be set in the past, as this would cause the rewards to be voided.\\n    error MultiRewarderStartInPast(uint256 start);\\n    /**\\n     *  @notice The recipient failed to handle the receipt of the native tokens, do they have a receipt hook?\\n     *          If not, use `emergencyWithdraw`.\\n     */\\n    error MultiRewarderNativeTransferFailed(address to, uint256 amount);\\n    /**\\n     *  @notice A wrong `msg.value` was provided while setting a native reward, make sure it matches the function\\n     *          `amount`.\\n     */\\n    error MultiRewarderIncorrectNative(uint256 expected, uint256 actual);\\n    /**\\n     *  @notice Due to a zero input or rounding, the reward rate while setting this pool would be zero,\\n     *          which is not allowed.\\n     */\\n    error MultiRewarderZeroRewardRate();\\n\\n    /// @notice Emitted when additional rewards were added to a pool, extending the reward duration.\\n    event RewardExtended(address indexed rewardToken, uint256 amountAdded, uint48 newEnd);\\n    /**\\n     *  @notice Emitted when a reward token has been registered. Can be emitted again for the same token after it has\\n     *          been explicitly stopped.\\n     */\\n    event RewardRegistered(address indexed rewardToken);\\n    /// @notice Emitted when the reward pool has been adjusted or intialized, with the new params.\\n    event RewardSet(\\n        address indexed rewardToken,\\n        uint256 amountAdded,\\n        uint256 amountPeriod,\\n        uint48 start,\\n        uint48 duration\\n    );\\n    /// @notice Emitted whenever rewards are claimed via the staking pool.\\n    event RewardsClaimed(address indexed user, address[] rewardTokens, uint256[] amounts);\\n    /**\\n     *  @notice Emitted whenever a new staking pool combination was registered via the allocation point adjustment\\n     *          function.\\n     */\\n    event PoolRegistered(address indexed rewardToken, IERC20 indexed stakeToken);\\n    /// @notice Emitted when the owner adjusts the allocation points for pools.\\n    event AllocPointsSet(address indexed rewardToken, IERC20[] indexed stakeToken, uint48[] allocPoint);\\n    /// @notice Emitted when a reward token is stopped.\\n    event RewardStopped(address indexed rewardToken, address indexed receiver, bool pullTokens);\\n\\n    /**\\n     *  @notice Sets the reward for `rewards` of `rewardToken` over `duration` seconds, starting at `start`. The actual\\n     *          reward over this period will be increased by any rewards on the pool that haven't been distributed yet.\\n     */\\n    function setReward(address rewardToken, uint256 rewards, uint48 start, uint48 duration) external payable;\\n    /**\\n     *  @notice Extends the reward duration for `rewardToken` by `amount` tokens, extending the duration by the\\n     *          equivalent time according to the `rewardPerSec` rate of the pool.\\n     */\\n    function extendReward(address rewardToken, uint256 amount) external payable;\\n    /**\\n     *  @notice Configures allocation points for a reward token over multiple staking tokens, setting the `allocPoints`\\n     *          for each `stakingTokens` and updating the `totalAllocPoint` for the `rewardToken`. The allocation\\n     *          points of any non-provided staking tokens will be left as-is, and won't be reset to zero.\\n     */\\n    function setAllocPoints(\\n        address rewardToken,\\n        IERC20[] calldata stakingTokens,\\n        uint48[] calldata allocPoints\\n    ) external;\\n    /**\\n     *  @notice Unregisters a reward token fully, immediately preventing users from ever harvesting their pending\\n     *          accumulated rewards. Optionally `pullTokens` can be set to false which causes the token balance to\\n     *          not be sent to the owner, this should only be set to false in case the token is bugged and reverts.\\n     */\\n    function stopReward(address rewardToken, address receiver, bool pullTokens) external;\\n\\n    /**\\n     *  @notice Returns the reward pools linked to the `stakingToken` alongside the pending rewards for `user`\\n     *          for these pools.\\n     */\\n    function getRewards(IERC20 stakingToken, address user) external view returns (address[] memory, uint256[] memory);\\n\\n    /// @notice Returns the allocation points for the `rewardToken` over all staking tokens linked to it.\\n    function allocPointsByReward(\\n        address rewardToken\\n    ) external view returns (IERC20[] memory stakingTokens, uint48[] memory allocPoints);\\n    /// @notice Returns the allocation points for the `stakingToken` over all reward tokens linked to it.\\n    function allocPointsByStake(\\n        IERC20 stakingToken\\n    ) external view returns (address[] memory rewardTokens, uint48[] memory allocPoints);\\n\\n    /// @notice Returns all enabled reward tokens. Stopped reward tokens are not included, while ended rewards are.\\n    function rewardTokens() external view returns (address[] memory);\\n    /// @notice Returns the emission details of a `rewardToken`, configured via `setReward`.\\n    function rewardDetails(address rewardToken) external view returns (RewardDetails memory);\\n}\\n\",\"keccak256\":\"0x739f3fb28c7e5d44a35db352cdffeb0076e8c0c18028d6f23c4b0b3e01dad589\",\"license\":\"BUSL-1.1\"},\"src/peripheral/rewarder/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n *  @notice A rewarder is connected to the staking contract and distributes rewards whenever the staking contract\\n *          updates the rewarder.\\n */\\ninterface IRewarder {\\n    /**\\n     *  @notice This function is only callable by the staking contract.\\n     */\\n    error MultiRewarderUnauthorizedCaller(address caller);\\n    /**\\n     *  @notice The rewarder cannot be reconnected to the same staking token as it would cause wrongful reward\\n     *          attribution through reconfiguration.\\n     */\\n    error RewarderAlreadyConnected(IERC20 stakingToken);\\n\\n    /**\\n     *  @notice Emitted when the rewarder is connected to a staking token.\\n     */\\n    event RewarderConnected(IERC20 indexed stakingToken);\\n\\n    /**\\n     *  @notice Informs the rewarder of an update in the staking contract, such as a deposit, withdraw or claim.\\n     *  @dev Emergency withdrawals draw the balance of a user to 0, and DO NOT call `onUpdate`.\\n     *       The rewarder logic must keep this in mind!\\n     */\\n    function onUpdate(IERC20 token, address user, uint256 oldStake, uint256 oldSupply, uint256 newStake) external;\\n\\n    /**\\n     *  @notice Called by the staking contract whenever this rewarder is connected to a staking token in the staking\\n     *          contract. Should only be callable once per staking token to avoid wrongful reward attribution through\\n     *          reconfiguration.\\n     */\\n    function connect(IERC20 stakingToken) external;\\n}\\n\",\"keccak256\":\"0x8a190dc01c20581529de7fe951f33133e948d97de73295ac7fcfc294f5b48420\",\"license\":\"BUSL-1.1\"},\"src/peripheral/rewarder/interfaces/IStakingReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakingReceiver {\\n    function onWithdrawReceived(\\n        IERC20 token,\\n        address from,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x635c1296547293e9e505344fc8c7f1648456be534beee6a88509565f7a43366b\",\"license\":\"BUSL-1.1\"},\"src/peripheral/rewarder/interfaces/IStargateStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { IStakingReceiver } from \\\"./IStakingReceiver.sol\\\";\\nimport { IRewarder } from \\\"./IRewarder.sol\\\";\\n\\n// @notice The interface to the staking contract for Stargate V2 LPs.\\ninterface IStargateStaking {\\n    /// @notice StargateStaking renounce ownership is disabled.\\n    error StargateStakingRenounceOwnershipDisabled();\\n\\n    /**\\n     * @notice Thrown on `depositTo` if the caller does not have bytecode, used as an anti-phishing measure to prevent\\n     *         users from calling `depositTo` as it's for zappers.\\n     */\\n    error InvalidCaller();\\n\\n    /**\\n     * @notice Thrown on `withdrawToAndCall` if the `to` contract does not return the magic bytes.\\n     */\\n    error InvalidReceiver(address receiver);\\n\\n    error NonExistentPool(IERC20 token);\\n\\n    event Deposit(IERC20 indexed token, address indexed from, address indexed to, uint256 amount);\\n    event Withdraw(IERC20 indexed token, address indexed from, address indexed to, uint256 amount, bool withUpdate);\\n    event PoolSet(IERC20 indexed token, IRewarder rewarder, bool exists);\\n\\n    /**\\n     * ADMIN *\\n     */\\n\\n    /**\\n     * @notice Configures the rewarder for a pool. This will initialize the pool if it does not exist yet,\\n     *         whitelisting it for deposits.\\n     */\\n    function setPool(IERC20 token, IRewarder rewarder) external;\\n\\n    /**\\n     * USER *\\n     */\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the pool. Informs the rewarder of the deposit, triggering a harvest.\\n     */\\n    function deposit(IERC20 token, uint256 amount) external;\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the pool for `to`. Informs the rewarder of the deposit, triggering a\\n     *         harvest. This function can only be called by a contract, as to prevent phishing by a malicious contract.\\n     * @dev This function is useful for zappers, as it allows to do multiple steps ending with a deposit,\\n     *      without the need to do multiple transactions.\\n     */\\n    function depositTo(IERC20 token, address to, uint256 amount) external;\\n\\n    /// @notice Withdraws `amount` of `token` from the pool. Informs the rewarder of the withdrawal, triggers a harvest.\\n    function withdraw(IERC20 token, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraws `amount` of `token` from the pool for `to`, and subsequently calls the receipt function on the\\n     *         `to` contract. Informs the rewarder of the withdrawal, triggering a harvest.\\n     * @dev This function is useful for zappers, as it allows to do multiple steps ending with a deposit,\\n     *      without the need to do multiple transactions.\\n     */\\n    function withdrawToAndCall(IERC20 token, IStakingReceiver to, uint256 amount, bytes calldata data) external;\\n\\n    /// @notice Withdraws `amount` of `token` from the pool in an always-working fashion. The rewarder is not informed.\\n    function emergencyWithdraw(IERC20 token) external;\\n\\n    /// @notice Claims the rewards from the rewarder, and sends them to the caller.\\n    function claim(IERC20[] calldata lpTokens) external;\\n\\n    /**\\n     * VIEW *\\n     */\\n\\n    /// @notice Returns the deposited balance of `user` in the pool of `token`.\\n    function balanceOf(IERC20 token, address user) external view returns (uint256);\\n\\n    /// @notice Returns the total supply of the pool of `token`.\\n    function totalSupply(IERC20 token) external view returns (uint256);\\n\\n    /// @notice Returns whether `token` is a pool.\\n    function isPool(IERC20 token) external view returns (bool);\\n\\n    /// @notice Returns the number of pools.\\n    function tokensLength() external view returns (uint256);\\n\\n    /// @notice Returns the list of pools, by their staking tokens.\\n    function tokens() external view returns (IERC20[] memory);\\n\\n    /// @notice Returns a slice of the list of pools, by their staking tokens.\\n    function tokens(uint256 start, uint256 end) external view returns (IERC20[] memory);\\n\\n    // @notice Returns the rewarder of the pool of `token`, responsible for distribution reward tokens.\\n    function rewarder(IERC20 token) external view returns (IRewarder);\\n}\\n\",\"keccak256\":\"0x5dc0cccd37d0ad5379a031aa4b017b39d844bccb2885a758eaae650272977a52\",\"license\":\"BUSL-1.1\"},\"src/peripheral/rewarder/lib/RewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { IMultiRewarder, RewardPool } from \\\"../interfaces/IMultiRewarder.sol\\\";\\n\\n/// @dev Library which handles staking rewards.\\nlibrary RewardLib {\\n    uint256 private constant PRECISION = 10 ** 24;\\n\\n    function indexAndUpdate(\\n        RewardPool storage pool,\\n        IMultiRewarder.RewardDetails storage rewardDetails,\\n        address user,\\n        uint256 oldStake,\\n        uint256 totalSupply\\n    ) internal returns (uint256) {\\n        uint256 accRewardPerShare = index(pool, rewardDetails, totalSupply);\\n        return update(pool, user, oldStake, accRewardPerShare);\\n    }\\n\\n    function update(\\n        RewardPool storage pool,\\n        address user,\\n        uint256 oldStake,\\n        uint256 accRewardPerShare\\n    ) internal returns (uint256) {\\n        uint256 rewardsForUser = ((accRewardPerShare - pool.rewardDebt[user]) * oldStake) / PRECISION;\\n        pool.rewardDebt[user] = accRewardPerShare;\\n        return rewardsForUser;\\n    }\\n\\n    function index(\\n        RewardPool storage pool,\\n        IMultiRewarder.RewardDetails storage rewardDetails,\\n        uint256 totalSupply\\n    ) internal returns (uint256 accRewardPerShare) {\\n        accRewardPerShare = _index(pool, rewardDetails, totalSupply);\\n        pool.accRewardPerShare = accRewardPerShare;\\n        pool.lastRewardTime = uint48(block.timestamp);\\n    }\\n\\n    function _index(\\n        RewardPool storage pool,\\n        IMultiRewarder.RewardDetails storage rewardDetails,\\n        uint256 totalSupply\\n    ) internal view returns (uint256) {\\n        // max(start, lastRewardTime)\\n        uint256 start = rewardDetails.start > pool.lastRewardTime ? rewardDetails.start : pool.lastRewardTime;\\n        // min(end, now)\\n        uint256 end = rewardDetails.end < block.timestamp ? rewardDetails.end : block.timestamp;\\n        if (start >= end || totalSupply == 0 || rewardDetails.totalAllocPoints == 0) {\\n            return pool.accRewardPerShare;\\n        }\\n\\n        return\\n            (rewardDetails.rewardPerSec * (end - start) * pool.allocPoints * PRECISION) /\\n            rewardDetails.totalAllocPoints /\\n            totalSupply +\\n            pool.accRewardPerShare;\\n    }\\n\\n    function getRewards(\\n        RewardPool storage pool,\\n        IMultiRewarder.RewardDetails storage rewardDetails,\\n        address user,\\n        uint256 oldStake,\\n        uint256 oldSupply\\n    ) internal view returns (uint256) {\\n        uint256 accRewardPerShare = _index(pool, rewardDetails, oldSupply);\\n        return ((accRewardPerShare - pool.rewardDebt[user]) * oldStake) / PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x218e8b950a311e84a18149eab569b13d17f7c1216447acf9afa5c3c10eb61d0c\",\"license\":\"BUSL-1.1\"},\"src/peripheral/rewarder/lib/RewardRegistryLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { EnumerableSet } from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport { IMultiRewarder, RewardPool, IERC20 } from \\\"../interfaces/IMultiRewarder.sol\\\";\\n\\n/// @dev Internal representation for a staking pool.\\nstruct RewardRegistry {\\n    uint256 rewardIdCount;\\n    mapping(uint256 => RewardPool) pools;\\n    mapping(address rewardToken => EnumerableSet.UintSet) byReward;\\n    mapping(IERC20 stakingToken => EnumerableSet.UintSet) byStake;\\n    mapping(address rewardToken => mapping(IERC20 stakingToken => uint256)) byRewardAndStake;\\n    mapping(address rewardToken => IMultiRewarder.RewardDetails) rewardDetails;\\n    EnumerableSet.AddressSet rewardTokens;\\n    mapping(IERC20 stakingToken => bool) connected;\\n}\\n\\n/// @dev Library for staking pool logic.\\nlibrary RewardRegistryLib {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    uint256 private constant MAX_ACTIVE_POOLS_PER_REWARD = 100;\\n    uint256 private constant MAX_ACTIVE_REWARD_TOKENS = 100;\\n\\n    //** REGISTRY ADJUSTMENTS **/\\n    function getOrCreateRewardDetails(\\n        RewardRegistry storage self,\\n        address rewardToken\\n    ) internal returns (IMultiRewarder.RewardDetails storage reward) {\\n        reward = self.rewardDetails[rewardToken];\\n        if (!reward.exists) {\\n            if (self.rewardTokens.length() >= MAX_ACTIVE_REWARD_TOKENS) {\\n                revert IMultiRewarder.MultiRewarderMaxActiveRewardTokens();\\n            }\\n            reward.exists = true;\\n            self.rewardTokens.add(rewardToken);\\n            emit IMultiRewarder.RewardRegistered(rewardToken);\\n        }\\n    }\\n\\n    function getOrCreatePoolId(\\n        RewardRegistry storage self,\\n        address reward,\\n        IERC20 stake\\n    ) internal returns (uint256 poolId) {\\n        poolId = self.byRewardAndStake[reward][stake];\\n        if (poolId == 0) {\\n            if (self.byReward[reward].length() >= MAX_ACTIVE_POOLS_PER_REWARD) {\\n                revert IMultiRewarder.MultiRewarderMaxPoolsForRewardToken();\\n            }\\n            if (!self.connected[stake]) {\\n                revert IMultiRewarder.MultiRewarderDisconnectedStakingToken(address(stake));\\n            }\\n            poolId = ++self.rewardIdCount; // Start at 1\\n            self.byRewardAndStake[reward][stake] = poolId;\\n            self.byReward[reward].add(poolId);\\n            self.byStake[stake].add(poolId);\\n            self.pools[poolId].rewardToken = reward;\\n            self.pools[poolId].stakingToken = stake;\\n            self.pools[poolId].lastRewardTime = uint48(block.timestamp);\\n\\n            emit IMultiRewarder.PoolRegistered(reward, stake);\\n        }\\n    }\\n\\n    function removeReward(RewardRegistry storage self, address rewardToken) internal {\\n        if (!self.rewardDetails[rewardToken].exists) revert IMultiRewarder.MultiRewarderUnregisteredToken(rewardToken);\\n        uint256[] memory ids = self.byReward[rewardToken].values();\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            IERC20 stakingToken = self.pools[id].stakingToken;\\n\\n            self.byStake[stakingToken].remove(id);\\n            self.byReward[rewardToken].remove(id);\\n            self.byRewardAndStake[rewardToken][stakingToken] = 0;\\n            self.pools[id].removed = true;\\n        }\\n        self.rewardTokens.remove(rewardToken);\\n        delete self.rewardDetails[rewardToken];\\n    }\\n\\n    function setAllocPoints(\\n        RewardRegistry storage self,\\n        address rewardToken,\\n        IERC20[] calldata stakingTokens,\\n        uint48[] calldata allocPoints\\n    ) internal {\\n        IMultiRewarder.RewardDetails storage reward = getOrCreateRewardDetails(self, rewardToken);\\n        uint160 totalSubtract;\\n        uint160 totalAdd;\\n        uint256 length = stakingTokens.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            uint256 id = getOrCreatePoolId(self, rewardToken, stakingTokens[i]);\\n            totalSubtract += self.pools[id].allocPoints;\\n            totalAdd += allocPoints[i];\\n            self.pools[id].allocPoints = allocPoints[i];\\n        }\\n\\n        reward.totalAllocPoints = reward.totalAllocPoints + totalAdd - totalSubtract;\\n    }\\n\\n    //** VIEW FUNCTIONS **/\\n\\n    function allocPointsByReward(\\n        RewardRegistry storage self,\\n        address rewardToken\\n    ) internal view returns (IERC20[] memory stakingTokens, uint48[] memory allocPoints) {\\n        uint256[] memory ids = self.byReward[rewardToken].values();\\n        stakingTokens = new IERC20[](ids.length);\\n        allocPoints = new uint48[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            stakingTokens[i] = self.pools[ids[i]].stakingToken;\\n            allocPoints[i] = self.pools[ids[i]].allocPoints;\\n        }\\n    }\\n\\n    function allocPointsByStake(\\n        RewardRegistry storage self,\\n        IERC20 stakingToken\\n    ) internal view returns (address[] memory rewardTokens, uint48[] memory allocPoints) {\\n        uint256[] memory ids = self.byStake[stakingToken].values();\\n        rewardTokens = new address[](ids.length);\\n        allocPoints = new uint48[](ids.length);\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            rewardTokens[i] = self.pools[ids[i]].rewardToken;\\n            allocPoints[i] = self.pools[ids[i]].allocPoints;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd3b9ac168da347c62ec9c4c7356d903f6f3431b2ab09643a7bc66b4e98d20155\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002edc38038062002edc8339810160408190526200003491620000a1565b6200003f3362000051565b6001600160a01b0316608052620000d3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215620000b457600080fd5b81516001600160a01b0381168114620000cc57600080fd5b9392505050565b608051612dca62000112600039600081816101140152818161076e01528181610816015281816109f101528181610f1d0152611a790152612dca6000f3fe6080604052600436106100e85760003560e01c8063aed457c81161008a578063cf17240311610059578063cf17240314610285578063ee8f931b14610399578063f2fde38b146103b9578063f42395f2146103d957600080fd5b8063aed457c814610210578063aeefd1fc14610230578063c1ef636414610250578063c2b18aa01461026357600080fd5b8063715018a6116100c6578063715018a614610181578063779bcb9b1461019657806380520969146101c45780638da5cb5b146101f257600080fd5b8063406b15cd146100ed5780634cf088d9146101025780635a564e8614610153575b600080fd5b6101006100fb36600461268f565b6103f9565b005b34801561010e57600080fd5b506101367f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015f57600080fd5b5061017361016e3660046126bb565b610593565b60405161014a929190612756565b34801561018d57600080fd5b506101006105aa565b3480156101a257600080fd5b506101b66101b1366004612784565b6105e4565b60405161014a9291906127bd565b3480156101d057600080fd5b506101e46101df3660046126bb565b6108c3565b60405161014a929190612814565b3480156101fe57600080fd5b506000546001600160a01b0316610136565b34801561021c57600080fd5b5061010061022b366004612879565b6108d1565b34801561023c57600080fd5b5061010061024b3660046128c4565b6109e6565b61010061025e366004612930565b610c8c565b34801561026f57600080fd5b50610278610f01565b60405161014a919061297f565b34801561029157600080fd5b5061033e6102a03660046126bb565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b03908116600090815260066020908152604091829020825160a0810184528154815260018201549485169281019290925265ffffffffffff600160a01b8504811693830193909352600160d01b909304909116606082015260029091015460ff161515608082015290565b60405161014a9190600060a082019050825182526001600160a01b036020840151166020830152604083015165ffffffffffff8082166040850152806060860151166060850152505060808301511515608083015292915050565b3480156103a557600080fd5b506101006103b43660046126bb565b610f12565b3480156103c557600080fd5b506101006103d43660046126bb565b611020565b3480156103e557600080fd5b506101006103f43660046129d7565b6110b0565b610401611132565b6001600160a01b0382166000908152600660205260409020600281015460ff16610467576040517fc3367e760000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024015b60405180910390fd5b600181015442600160d01b90910465ffffffffffff1610156104c0576040517f0fc659c20000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260240161045e565b80546104d5906104d09084612a89565b61118e565b600182018054601a906104f8908490600160d01b900465ffffffffffff16612ac4565b92506101000a81548165ffffffffffff021916908365ffffffffffff160217905550826001600160a01b03167f71d0060f3c1f2f0de478aca435ab612f7550b9415f91c6beac671faaca34bb688383600101601a9054906101000a900465ffffffffffff1660405161057c92919091825265ffffffffffff16602082015260400190565b60405180910390a261058e8383611210565b505050565b6060806105a1600184611279565b91509150915091565b6105b2611132565b6040517f20e02be700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166000908152600460205260408120606091829161060a90611430565b90506000815167ffffffffffffffff81111561062857610628612ae3565b604051908082528060200260200182016040528015610651578160200160208202803683370190505b5090506000825167ffffffffffffffff81111561067057610670612ae3565b604051908082528060200260200182016040528015610699578160200160208202803683370190505b50905060005b83518110156108b45760006001800160008684815181106106c2576106c2612b12565b6020908102919091018101518252818101929092526040908101600090812060018101546001600160a01b031680835260069094529190208651919350919086908590811061071357610713612b12565b6001600160a01b03928316602091820292909201015260028301546040517ff7888aec00000000000000000000000000000000000000000000000000000000815290821660048201528a8216602482015261088d9183918c917f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa1580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d99190612b41565b60028601546040517fe4dc2aa40000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063e4dc2aa490602401602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190612b41565b8693929190611444565b84848151811061089f5761089f612b12565b6020908102919091010152505060010161069f565b509093509150505b9250929050565b6060806105a16001846114a7565b6108d9611132565b6108e4600184611655565b80156109925760006001600160a01b03841615610981576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c9190612b41565b610983565b475b9050610990838583611816565b505b816001600160a01b0316836001600160a01b03167ff842ed66d8fd158c4e8a71051d6493bff2e7f1994ea49e9713600c9aaa9cc4a7836040516109d9911515815260200190565b60405180910390a3505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a4a576040517f9f49538400000000000000000000000000000000000000000000000000000000815233600482015260240161045e565b6001600160a01b0385166000908152600460205260408120610a6b90611430565b90506000815167ffffffffffffffff811115610a8957610a89612ae3565b604051908082528060200260200182016040528015610ab2578160200160208202803683370190505b5090506000825167ffffffffffffffff811115610ad157610ad1612ae3565b604051908082528060200260200182016040528015610afa578160200160208202803683370190505b50905060005b8351811015610bca576000600180016000868481518110610b2357610b23612b12565b60200260200101518152602001908152602001600020905060008160010160009054906101000a90046001600160a01b0316905080858481518110610b6a57610b6a612b12565b6001600160a01b039283166020918202929092018101919091529082166000908152600690915260409020610ba39083908c8c8c6118dd565b848481518110610bb557610bb5612b12565b60209081029190910101525050600101610b00565b50866001600160a01b03167fc53cb8bc1a7200a84d0b66a538905a245c4915aace7f1ce5dc4a0ba107ebc15c8383604051610c069291906127bd565b60405180910390a260005b8351811015610c81576000828281518110610c2e57610c2e612b12565b60200260200101511115610c7957610c7988848381518110610c5257610c52612b12565b6020026020010151848481518110610c6c57610c6c612b12565b6020026020010151611816565b600101610c11565b505050505050505050565b610c94611132565b428265ffffffffffff161015610ce0576040517f53c1289f00000000000000000000000000000000000000000000000000000000815265ffffffffffff8316600482015260240161045e565b8065ffffffffffff16600003610d22576040517f95cf0dc400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d2f6001866118f9565b9050610d3a856119bc565b60018101548490600160d01b900465ffffffffffff16421015610dcc57600182015460009042600160a01b90910465ffffffffffff1611610d7b5742610d90565b6001830154600160a01b900465ffffffffffff165b6001840154909150610db2908290600160d01b900465ffffffffffff16612b5a565b8354610dbe9190612b6d565b610dc89083612b84565b9150505b6000610de065ffffffffffff851683612a89565b905080600003610e1c576040517f6e9377ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001830180547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b65ffffffffffff881602179055610e608486612ac4565b60018401805465ffffffffffff928316600160d01b0279ffffffffffffffffffffffffffffffffffffffffffffffffffff9091161790558184556040805188815260208101859052878316818301529186166060830152516001600160a01b038916917fa57b91f8b94eace9e74d336f5f3202d0eb4cb489f646fc322c7ed0f00fcd99fd919081900360800190a2610ef88787611210565b50505050505050565b6060610f0d6007611430565b905090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f76576040517f9f49538400000000000000000000000000000000000000000000000000000000815233600482015260240161045e565b6001600160a01b03811660009081526009602052604090205460ff1615610fd4576040517f8575f3a60000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240161045e565b6001600160a01b038116600081815260096020526040808220805460ff19166001179055517fa351e5ceb90bd585957b38958d172682cb48fcff0320a4395c976ccdb40e44539190a250565b611028611132565b6001600160a01b0381166110a45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161045e565b6110ad81611af8565b50565b6110b8611132565b6110c1856119bc565b6110d060018686868686611b60565b83836040516110e0929190612b97565b6040518091039020856001600160a01b03167fa8f10febbe8be4d24be81ee9f81f1a380ac400eb0cfc898b153b15dbaa70ae748484604051611123929190612bd9565b60405180910390a35050505050565b6000546001600160a01b0316331461118c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045e565b565b600065ffffffffffff82111561120c5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201527f3820626974730000000000000000000000000000000000000000000000000000606482015260840161045e565b5090565b6001600160a01b03821661126457803414611260576040517f8b00479e0000000000000000000000000000000000000000000000000000000081526004810182905234602482015260440161045e565b5050565b6112606001600160a01b038316333084611d01565b6001600160a01b0381166000908152600383016020526040812060609182916112a190611430565b9050805167ffffffffffffffff8111156112bd576112bd612ae3565b6040519080825280602002602001820160405280156112e6578160200160208202803683370190505b509250805167ffffffffffffffff81111561130357611303612ae3565b60405190808252806020026020018201604052801561132c578160200160208202803683370190505b50915060005b81518110156114275785600101600083838151811061135357611353612b12565b6020026020010151815260200190815260200160002060010160009054906101000a90046001600160a01b031684828151811061139257611392612b12565b60200260200101906001600160a01b031690816001600160a01b0316815250508560010160008383815181106113ca576113ca612b12565b60200260200101518152602001908152602001600020600101601a9054906101000a900465ffffffffffff1683828151811061140857611408612b12565b65ffffffffffff90921660209283029190910190910152600101611332565b50509250929050565b6060600061143d83611dd0565b9392505050565b600080611452878785611e2c565b6001600160a01b038616600090815260038901602052604090205490915069d3c21bcecceda10000009085906114889084612b5a565b6114929190612b6d565b61149c9190612a89565b979650505050505050565b6001600160a01b0381166000908152600283016020526040812060609182916114cf90611430565b9050805167ffffffffffffffff8111156114eb576114eb612ae3565b604051908082528060200260200182016040528015611514578160200160208202803683370190505b509250805167ffffffffffffffff81111561153157611531612ae3565b60405190808252806020026020018201604052801561155a578160200160208202803683370190505b50915060005b81518110156114275785600101600083838151811061158157611581612b12565b6020026020010151815260200190815260200160002060020160009054906101000a90046001600160a01b03168482815181106115c0576115c0612b12565b60200260200101906001600160a01b031690816001600160a01b0316815250508560010160008383815181106115f8576115f8612b12565b60200260200101518152602001908152602001600020600101601a9054906101000a900465ffffffffffff1683828151811061163657611636612b12565b65ffffffffffff90921660209283029190910190910152600101611560565b6001600160a01b038116600090815260058301602052604090206002015460ff166116b7576040517fc3367e760000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240161045e565b6001600160a01b038116600090815260028301602052604081206116da90611430565b905060005b81518110156117d45760008282815181106116fc576116fc612b12565b60209081029190910181015160008181526001880183526040808220600201546001600160a01b031680835260038a01909452902090925061173e9083611f7d565b506001600160a01b038516600090815260028701602052604090206117639083611f7d565b506001600160a01b0380861660009081526004880160209081526040808320949093168252928352818120819055928352600180880190925290912060020180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055016116df565b506117e26006840183611f89565b50506001600160a01b031660009081526005909101602052604081208181556001810191909155600201805460ff19169055565b6001600160a01b0382166118c9576000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114611871576040519150601f19603f3d011682016040523d82523d6000602084013e611876565b606091505b50509050806118c3576040517f5c4c2a250000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024810183905260440161045e565b50505050565b61058e6001600160a01b0383168483611f9e565b6000806118eb878785611fe7565b905061149c8786868461203a565b6001600160a01b03811660009081526005830160205260409020600281015460ff166119b657606461192d846006016120ac565b10611964576040517f290e96a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101805460ff1916600117905561198060068401836120b6565b506040516001600160a01b038316907f2967504cad2094d65ef2dcb85e4074f4f7455a846798fcc90657d6f33c4125ea90600090a25b92915050565b6001600160a01b03811660009081526003602052604081206119dd906120ac565b905060005b8181101561058e576001600160a01b03831660009081526003602052604081206002908290611a1190856120cb565b8152602080820192909252604090810160009081206001600160a01b038881168352600690945290829020600282015492517fe4dc2aa40000000000000000000000000000000000000000000000000000000081529284166004840152909350611aee9290917f00000000000000000000000000000000000000000000000000000000000000009091169063e4dc2aa490602401602060405180830381865afa158015611ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae69190612b41565b839190611fe7565b50506001016119e2565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611b6c87876118f9565b905060008085815b81811015611c94576000611baf8c8c8c8c86818110611b9557611b95612b12565b9050602002016020810190611baa91906126bb565b6120d7565b600081815260018e810160205260409091200154909150611bdf90600160d01b900465ffffffffffff1686612c24565b9450878783818110611bf357611bf3612b12565b9050602002016020810190611c089190612c44565b611c1a9065ffffffffffff1685612c24565b9350878783818110611c2e57611c2e612b12565b9050602002016020810190611c439190612c44565b60009182526001808e0160205260409092208201805465ffffffffffff92909216600160d01b0279ffffffffffffffffffffffffffffffffffffffffffffffffffff90921691909117905501611b74565b5060018401548390611cb09084906001600160a01b0316612c24565b611cba9190612c5f565b60019490940180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390951694909417909355505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526118c39085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612300565b606081600001805480602002602001604051908101604052809291908181526020018280548015611e2057602002820191906000526020600020905b815481526020019060010190808311611e0c575b50505050509050919050565b60018084015490830154600091829165ffffffffffff600160a01b928390048116929091041611611e70576001850154600160a01b900465ffffffffffff16611e85565b6001840154600160a01b900465ffffffffffff165b600185015465ffffffffffff918216925060009142600160d01b9092041610611eae5742611ec3565b6001850154600160d01b900465ffffffffffff165b90508082101580611ed2575083155b80611ee8575060018501546001600160a01b0316155b15611ef85750508354905061143d565b85546001868101549088015486916001600160a01b03169069d3c21bcecceda100000090600160d01b900465ffffffffffff16611f358787612b5a565b8a54611f419190612b6d565b611f4b9190612b6d565b611f559190612b6d565b611f5f9190612a89565b611f699190612a89565b611f739190612b84565b9695505050505050565b600061143d83836123e8565b600061143d836001600160a01b0384166123e8565b6040516001600160a01b03831660248201526044810182905261058e9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611d4e565b6000611ff4848484611e2c565b808555600190940180547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b4265ffffffffffff1602179055509192915050565b6001600160a01b0383166000908152600385016020526040812054819069d3c21bcecceda100000090859061206f9086612b5a565b6120799190612b6d565b6120839190612a89565b6001600160a01b038616600090815260038801602052604090208490559150505b949350505050565b60006119b6825490565b600061143d836001600160a01b0384166124e2565b600061143d8383612531565b6001600160a01b03808316600090815260048501602090815260408083209385168352929052908120549081900361143d576001600160a01b0383166000908152600285016020526040902060649061212f906120ac565b10612166576040517f2fee563000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216600090815260088501602052604090205460ff166121c5576040517fff9864e50000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240161045e565b83600001600081546121d690612c7f565b91829055506001600160a01b03808516600081815260048801602090815260408083209488168352938152838220859055918152600288019091522090915061221f908261255b565b506001600160a01b03821660009081526003850160205260409020612244908261255b565b506000818152600185810160205260408083209182018054600290930180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038881169182179092559088167fffffffffffff00000000000000000000000000000000000000000000000000009094168417600160a01b4265ffffffffffff160217909155905190927f26f4b31b7240e7422a9fe2ba5ce7684500302a536166d0ed481d7ad653ff25ab91a39392505050565b6000612355826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125679092919063ffffffff16565b90508051600014806123765750808060200190518101906123769190612cb7565b61058e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161045e565b600081815260018301602052604081205480156124d157600061240c600183612b5a565b855490915060009061242090600190612b5a565b905081811461248557600086600001828154811061244057612440612b12565b906000526020600020015490508087600001848154811061246357612463612b12565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061249657612496612cd4565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506119b6565b60009150506119b6565b5092915050565b6000818152600183016020526040812054612529575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556119b6565b5060006119b6565b600082600001828154811061254857612548612b12565b9060005260206000200154905092915050565b600061143d83836124e2565b60606120a4848460008585600080866001600160a01b0316858760405161258e9190612d27565b60006040518083038185875af1925050503d80600081146125cb576040519150601f19603f3d011682016040523d82523d6000602084013e6125d0565b606091505b509150915061149c878383876060831561264b578251600003612644576001600160a01b0385163b6126445760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045e565b50816120a4565b6120a483838151156126605781518083602001fd5b8060405162461bcd60e51b815260040161045e9190612d43565b6001600160a01b03811681146110ad57600080fd5b600080604083850312156126a257600080fd5b82356126ad8161267a565b946020939093013593505050565b6000602082840312156126cd57600080fd5b813561143d8161267a565b60008151808452602080850194506020840160005b838110156127125781516001600160a01b0316875295820195908201906001016126ed565b509495945050505050565b60008151808452602080850194506020840160005b8381101561271257815165ffffffffffff1687529582019590820190600101612732565b60408152600061276960408301856126d8565b828103602084015261277b818561271d565b95945050505050565b6000806040838503121561279757600080fd5b82356127a28161267a565b915060208301356127b28161267a565b809150509250929050565b6040815260006127d060408301856126d8565b82810360208481019190915284518083528582019282019060005b81811015612807578451835293830193918301916001016127eb565b5090979650505050505050565b604080825283519082018190526000906020906060840190828701845b828110156128565781516001600160a01b031684529284019290840190600101612831565b5050508381036020850152611f73818661271d565b80151581146110ad57600080fd5b60008060006060848603121561288e57600080fd5b83356128998161267a565b925060208401356128a98161267a565b915060408401356128b98161286b565b809150509250925092565b600080600080600060a086880312156128dc57600080fd5b85356128e78161267a565b945060208601356128f78161267a565b94979496505050506040830135926060810135926080909101359150565b803565ffffffffffff8116811461292b57600080fd5b919050565b6000806000806080858703121561294657600080fd5b84356129518161267a565b93506020850135925061296660408601612915565b915061297460608601612915565b905092959194509250565b60208152600061143d60208301846126d8565b60008083601f8401126129a457600080fd5b50813567ffffffffffffffff8111156129bc57600080fd5b6020830191508360208260051b85010111156108bc57600080fd5b6000806000806000606086880312156129ef57600080fd5b85356129fa8161267a565b9450602086013567ffffffffffffffff80821115612a1757600080fd5b612a2389838a01612992565b90965094506040880135915080821115612a3c57600080fd5b50612a4988828901612992565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082612abf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b65ffffffffffff8181168382160190808211156124db576124db612a5a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612b5357600080fd5b5051919050565b818103818111156119b6576119b6612a5a565b80820281158282048414176119b6576119b6612a5a565b808201808211156119b6576119b6612a5a565b60008184825b85811015612bce578135612bb08161267a565b6001600160a01b031683526020928301929190910190600101612b9d565b509095945050505050565b60208082528181018390526000908460408401835b86811015612c195765ffffffffffff612c0684612915565b1682529183019190830190600101612bee565b509695505050505050565b6001600160a01b038181168382160190808211156124db576124db612a5a565b600060208284031215612c5657600080fd5b61143d82612915565b6001600160a01b038281168282160390808211156124db576124db612a5a565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612cb057612cb0612a5a565b5060010190565b600060208284031215612cc957600080fd5b815161143d8161286b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60005b83811015612d1e578181015183820152602001612d06565b50506000910152565b60008251612d39818460208701612d03565b9190910192915050565b6020815260008251806020840152612d62816040850160208701612d03565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122067296dd182c1bc08332182b8a32d7058a27d9c387da1735d2f5e912941bdb99f64736f6c63430008160033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063aed457c81161008a578063cf17240311610059578063cf17240314610285578063ee8f931b14610399578063f2fde38b146103b9578063f42395f2146103d957600080fd5b8063aed457c814610210578063aeefd1fc14610230578063c1ef636414610250578063c2b18aa01461026357600080fd5b8063715018a6116100c6578063715018a614610181578063779bcb9b1461019657806380520969146101c45780638da5cb5b146101f257600080fd5b8063406b15cd146100ed5780634cf088d9146101025780635a564e8614610153575b600080fd5b6101006100fb36600461268f565b6103f9565b005b34801561010e57600080fd5b506101367f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015f57600080fd5b5061017361016e3660046126bb565b610593565b60405161014a929190612756565b34801561018d57600080fd5b506101006105aa565b3480156101a257600080fd5b506101b66101b1366004612784565b6105e4565b60405161014a9291906127bd565b3480156101d057600080fd5b506101e46101df3660046126bb565b6108c3565b60405161014a929190612814565b3480156101fe57600080fd5b506000546001600160a01b0316610136565b34801561021c57600080fd5b5061010061022b366004612879565b6108d1565b34801561023c57600080fd5b5061010061024b3660046128c4565b6109e6565b61010061025e366004612930565b610c8c565b34801561026f57600080fd5b50610278610f01565b60405161014a919061297f565b34801561029157600080fd5b5061033e6102a03660046126bb565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152506001600160a01b03908116600090815260066020908152604091829020825160a0810184528154815260018201549485169281019290925265ffffffffffff600160a01b8504811693830193909352600160d01b909304909116606082015260029091015460ff161515608082015290565b60405161014a9190600060a082019050825182526001600160a01b036020840151166020830152604083015165ffffffffffff8082166040850152806060860151166060850152505060808301511515608083015292915050565b3480156103a557600080fd5b506101006103b43660046126bb565b610f12565b3480156103c557600080fd5b506101006103d43660046126bb565b611020565b3480156103e557600080fd5b506101006103f43660046129d7565b6110b0565b610401611132565b6001600160a01b0382166000908152600660205260409020600281015460ff16610467576040517fc3367e760000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024015b60405180910390fd5b600181015442600160d01b90910465ffffffffffff1610156104c0576040517f0fc659c20000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260240161045e565b80546104d5906104d09084612a89565b61118e565b600182018054601a906104f8908490600160d01b900465ffffffffffff16612ac4565b92506101000a81548165ffffffffffff021916908365ffffffffffff160217905550826001600160a01b03167f71d0060f3c1f2f0de478aca435ab612f7550b9415f91c6beac671faaca34bb688383600101601a9054906101000a900465ffffffffffff1660405161057c92919091825265ffffffffffff16602082015260400190565b60405180910390a261058e8383611210565b505050565b6060806105a1600184611279565b91509150915091565b6105b2611132565b6040517f20e02be700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0382166000908152600460205260408120606091829161060a90611430565b90506000815167ffffffffffffffff81111561062857610628612ae3565b604051908082528060200260200182016040528015610651578160200160208202803683370190505b5090506000825167ffffffffffffffff81111561067057610670612ae3565b604051908082528060200260200182016040528015610699578160200160208202803683370190505b50905060005b83518110156108b45760006001800160008684815181106106c2576106c2612b12565b6020908102919091018101518252818101929092526040908101600090812060018101546001600160a01b031680835260069094529190208651919350919086908590811061071357610713612b12565b6001600160a01b03928316602091820292909201015260028301546040517ff7888aec00000000000000000000000000000000000000000000000000000000815290821660048201528a8216602482015261088d9183918c917f0000000000000000000000000000000000000000000000000000000000000000169063f7888aec90604401602060405180830381865afa1580156107b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d99190612b41565b60028601546040517fe4dc2aa40000000000000000000000000000000000000000000000000000000081526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063e4dc2aa490602401602060405180830381865afa15801561085f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108839190612b41565b8693929190611444565b84848151811061089f5761089f612b12565b6020908102919091010152505060010161069f565b509093509150505b9250929050565b6060806105a16001846114a7565b6108d9611132565b6108e4600184611655565b80156109925760006001600160a01b03841615610981576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa158015610958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097c9190612b41565b610983565b475b9050610990838583611816565b505b816001600160a01b0316836001600160a01b03167ff842ed66d8fd158c4e8a71051d6493bff2e7f1994ea49e9713600c9aaa9cc4a7836040516109d9911515815260200190565b60405180910390a3505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a4a576040517f9f49538400000000000000000000000000000000000000000000000000000000815233600482015260240161045e565b6001600160a01b0385166000908152600460205260408120610a6b90611430565b90506000815167ffffffffffffffff811115610a8957610a89612ae3565b604051908082528060200260200182016040528015610ab2578160200160208202803683370190505b5090506000825167ffffffffffffffff811115610ad157610ad1612ae3565b604051908082528060200260200182016040528015610afa578160200160208202803683370190505b50905060005b8351811015610bca576000600180016000868481518110610b2357610b23612b12565b60200260200101518152602001908152602001600020905060008160010160009054906101000a90046001600160a01b0316905080858481518110610b6a57610b6a612b12565b6001600160a01b039283166020918202929092018101919091529082166000908152600690915260409020610ba39083908c8c8c6118dd565b848481518110610bb557610bb5612b12565b60209081029190910101525050600101610b00565b50866001600160a01b03167fc53cb8bc1a7200a84d0b66a538905a245c4915aace7f1ce5dc4a0ba107ebc15c8383604051610c069291906127bd565b60405180910390a260005b8351811015610c81576000828281518110610c2e57610c2e612b12565b60200260200101511115610c7957610c7988848381518110610c5257610c52612b12565b6020026020010151848481518110610c6c57610c6c612b12565b6020026020010151611816565b600101610c11565b505050505050505050565b610c94611132565b428265ffffffffffff161015610ce0576040517f53c1289f00000000000000000000000000000000000000000000000000000000815265ffffffffffff8316600482015260240161045e565b8065ffffffffffff16600003610d22576040517f95cf0dc400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610d2f6001866118f9565b9050610d3a856119bc565b60018101548490600160d01b900465ffffffffffff16421015610dcc57600182015460009042600160a01b90910465ffffffffffff1611610d7b5742610d90565b6001830154600160a01b900465ffffffffffff165b6001840154909150610db2908290600160d01b900465ffffffffffff16612b5a565b8354610dbe9190612b6d565b610dc89083612b84565b9150505b6000610de065ffffffffffff851683612a89565b905080600003610e1c576040517f6e9377ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001830180547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b65ffffffffffff881602179055610e608486612ac4565b60018401805465ffffffffffff928316600160d01b0279ffffffffffffffffffffffffffffffffffffffffffffffffffff9091161790558184556040805188815260208101859052878316818301529186166060830152516001600160a01b038916917fa57b91f8b94eace9e74d336f5f3202d0eb4cb489f646fc322c7ed0f00fcd99fd919081900360800190a2610ef88787611210565b50505050505050565b6060610f0d6007611430565b905090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f76576040517f9f49538400000000000000000000000000000000000000000000000000000000815233600482015260240161045e565b6001600160a01b03811660009081526009602052604090205460ff1615610fd4576040517f8575f3a60000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240161045e565b6001600160a01b038116600081815260096020526040808220805460ff19166001179055517fa351e5ceb90bd585957b38958d172682cb48fcff0320a4395c976ccdb40e44539190a250565b611028611132565b6001600160a01b0381166110a45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161045e565b6110ad81611af8565b50565b6110b8611132565b6110c1856119bc565b6110d060018686868686611b60565b83836040516110e0929190612b97565b6040518091039020856001600160a01b03167fa8f10febbe8be4d24be81ee9f81f1a380ac400eb0cfc898b153b15dbaa70ae748484604051611123929190612bd9565b60405180910390a35050505050565b6000546001600160a01b0316331461118c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161045e565b565b600065ffffffffffff82111561120c5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203460448201527f3820626974730000000000000000000000000000000000000000000000000000606482015260840161045e565b5090565b6001600160a01b03821661126457803414611260576040517f8b00479e0000000000000000000000000000000000000000000000000000000081526004810182905234602482015260440161045e565b5050565b6112606001600160a01b038316333084611d01565b6001600160a01b0381166000908152600383016020526040812060609182916112a190611430565b9050805167ffffffffffffffff8111156112bd576112bd612ae3565b6040519080825280602002602001820160405280156112e6578160200160208202803683370190505b509250805167ffffffffffffffff81111561130357611303612ae3565b60405190808252806020026020018201604052801561132c578160200160208202803683370190505b50915060005b81518110156114275785600101600083838151811061135357611353612b12565b6020026020010151815260200190815260200160002060010160009054906101000a90046001600160a01b031684828151811061139257611392612b12565b60200260200101906001600160a01b031690816001600160a01b0316815250508560010160008383815181106113ca576113ca612b12565b60200260200101518152602001908152602001600020600101601a9054906101000a900465ffffffffffff1683828151811061140857611408612b12565b65ffffffffffff90921660209283029190910190910152600101611332565b50509250929050565b6060600061143d83611dd0565b9392505050565b600080611452878785611e2c565b6001600160a01b038616600090815260038901602052604090205490915069d3c21bcecceda10000009085906114889084612b5a565b6114929190612b6d565b61149c9190612a89565b979650505050505050565b6001600160a01b0381166000908152600283016020526040812060609182916114cf90611430565b9050805167ffffffffffffffff8111156114eb576114eb612ae3565b604051908082528060200260200182016040528015611514578160200160208202803683370190505b509250805167ffffffffffffffff81111561153157611531612ae3565b60405190808252806020026020018201604052801561155a578160200160208202803683370190505b50915060005b81518110156114275785600101600083838151811061158157611581612b12565b6020026020010151815260200190815260200160002060020160009054906101000a90046001600160a01b03168482815181106115c0576115c0612b12565b60200260200101906001600160a01b031690816001600160a01b0316815250508560010160008383815181106115f8576115f8612b12565b60200260200101518152602001908152602001600020600101601a9054906101000a900465ffffffffffff1683828151811061163657611636612b12565b65ffffffffffff90921660209283029190910190910152600101611560565b6001600160a01b038116600090815260058301602052604090206002015460ff166116b7576040517fc3367e760000000000000000000000000000000000000000000000000000000081526001600160a01b038216600482015260240161045e565b6001600160a01b038116600090815260028301602052604081206116da90611430565b905060005b81518110156117d45760008282815181106116fc576116fc612b12565b60209081029190910181015160008181526001880183526040808220600201546001600160a01b031680835260038a01909452902090925061173e9083611f7d565b506001600160a01b038516600090815260028701602052604090206117639083611f7d565b506001600160a01b0380861660009081526004880160209081526040808320949093168252928352818120819055928352600180880190925290912060020180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055016116df565b506117e26006840183611f89565b50506001600160a01b031660009081526005909101602052604081208181556001810191909155600201805460ff19169055565b6001600160a01b0382166118c9576000836001600160a01b03168260405160006040518083038185875af1925050503d8060008114611871576040519150601f19603f3d011682016040523d82523d6000602084013e611876565b606091505b50509050806118c3576040517f5c4c2a250000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024810183905260440161045e565b50505050565b61058e6001600160a01b0383168483611f9e565b6000806118eb878785611fe7565b905061149c8786868461203a565b6001600160a01b03811660009081526005830160205260409020600281015460ff166119b657606461192d846006016120ac565b10611964576040517f290e96a500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101805460ff1916600117905561198060068401836120b6565b506040516001600160a01b038316907f2967504cad2094d65ef2dcb85e4074f4f7455a846798fcc90657d6f33c4125ea90600090a25b92915050565b6001600160a01b03811660009081526003602052604081206119dd906120ac565b905060005b8181101561058e576001600160a01b03831660009081526003602052604081206002908290611a1190856120cb565b8152602080820192909252604090810160009081206001600160a01b038881168352600690945290829020600282015492517fe4dc2aa40000000000000000000000000000000000000000000000000000000081529284166004840152909350611aee9290917f00000000000000000000000000000000000000000000000000000000000000009091169063e4dc2aa490602401602060405180830381865afa158015611ac2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae69190612b41565b839190611fe7565b50506001016119e2565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000611b6c87876118f9565b905060008085815b81811015611c94576000611baf8c8c8c8c86818110611b9557611b95612b12565b9050602002016020810190611baa91906126bb565b6120d7565b600081815260018e810160205260409091200154909150611bdf90600160d01b900465ffffffffffff1686612c24565b9450878783818110611bf357611bf3612b12565b9050602002016020810190611c089190612c44565b611c1a9065ffffffffffff1685612c24565b9350878783818110611c2e57611c2e612b12565b9050602002016020810190611c439190612c44565b60009182526001808e0160205260409092208201805465ffffffffffff92909216600160d01b0279ffffffffffffffffffffffffffffffffffffffffffffffffffff90921691909117905501611b74565b5060018401548390611cb09084906001600160a01b0316612c24565b611cba9190612c5f565b60019490940180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390951694909417909355505050505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526118c39085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612300565b606081600001805480602002602001604051908101604052809291908181526020018280548015611e2057602002820191906000526020600020905b815481526020019060010190808311611e0c575b50505050509050919050565b60018084015490830154600091829165ffffffffffff600160a01b928390048116929091041611611e70576001850154600160a01b900465ffffffffffff16611e85565b6001840154600160a01b900465ffffffffffff165b600185015465ffffffffffff918216925060009142600160d01b9092041610611eae5742611ec3565b6001850154600160d01b900465ffffffffffff165b90508082101580611ed2575083155b80611ee8575060018501546001600160a01b0316155b15611ef85750508354905061143d565b85546001868101549088015486916001600160a01b03169069d3c21bcecceda100000090600160d01b900465ffffffffffff16611f358787612b5a565b8a54611f419190612b6d565b611f4b9190612b6d565b611f559190612b6d565b611f5f9190612a89565b611f699190612a89565b611f739190612b84565b9695505050505050565b600061143d83836123e8565b600061143d836001600160a01b0384166123e8565b6040516001600160a01b03831660248201526044810182905261058e9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611d4e565b6000611ff4848484611e2c565b808555600190940180547fffffffffffff000000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b4265ffffffffffff1602179055509192915050565b6001600160a01b0383166000908152600385016020526040812054819069d3c21bcecceda100000090859061206f9086612b5a565b6120799190612b6d565b6120839190612a89565b6001600160a01b038616600090815260038801602052604090208490559150505b949350505050565b60006119b6825490565b600061143d836001600160a01b0384166124e2565b600061143d8383612531565b6001600160a01b03808316600090815260048501602090815260408083209385168352929052908120549081900361143d576001600160a01b0383166000908152600285016020526040902060649061212f906120ac565b10612166576040517f2fee563000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038216600090815260088501602052604090205460ff166121c5576040517fff9864e50000000000000000000000000000000000000000000000000000000081526001600160a01b038316600482015260240161045e565b83600001600081546121d690612c7f565b91829055506001600160a01b03808516600081815260048801602090815260408083209488168352938152838220859055918152600288019091522090915061221f908261255b565b506001600160a01b03821660009081526003850160205260409020612244908261255b565b506000818152600185810160205260408083209182018054600290930180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038881169182179092559088167fffffffffffff00000000000000000000000000000000000000000000000000009094168417600160a01b4265ffffffffffff160217909155905190927f26f4b31b7240e7422a9fe2ba5ce7684500302a536166d0ed481d7ad653ff25ab91a39392505050565b6000612355826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125679092919063ffffffff16565b90508051600014806123765750808060200190518101906123769190612cb7565b61058e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161045e565b600081815260018301602052604081205480156124d157600061240c600183612b5a565b855490915060009061242090600190612b5a565b905081811461248557600086600001828154811061244057612440612b12565b906000526020600020015490508087600001848154811061246357612463612b12565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061249657612496612cd4565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506119b6565b60009150506119b6565b5092915050565b6000818152600183016020526040812054612529575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556119b6565b5060006119b6565b600082600001828154811061254857612548612b12565b9060005260206000200154905092915050565b600061143d83836124e2565b60606120a4848460008585600080866001600160a01b0316858760405161258e9190612d27565b60006040518083038185875af1925050503d80600081146125cb576040519150601f19603f3d011682016040523d82523d6000602084013e6125d0565b606091505b509150915061149c878383876060831561264b578251600003612644576001600160a01b0385163b6126445760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045e565b50816120a4565b6120a483838151156126605781518083602001fd5b8060405162461bcd60e51b815260040161045e9190612d43565b6001600160a01b03811681146110ad57600080fd5b600080604083850312156126a257600080fd5b82356126ad8161267a565b946020939093013593505050565b6000602082840312156126cd57600080fd5b813561143d8161267a565b60008151808452602080850194506020840160005b838110156127125781516001600160a01b0316875295820195908201906001016126ed565b509495945050505050565b60008151808452602080850194506020840160005b8381101561271257815165ffffffffffff1687529582019590820190600101612732565b60408152600061276960408301856126d8565b828103602084015261277b818561271d565b95945050505050565b6000806040838503121561279757600080fd5b82356127a28161267a565b915060208301356127b28161267a565b809150509250929050565b6040815260006127d060408301856126d8565b82810360208481019190915284518083528582019282019060005b81811015612807578451835293830193918301916001016127eb565b5090979650505050505050565b604080825283519082018190526000906020906060840190828701845b828110156128565781516001600160a01b031684529284019290840190600101612831565b5050508381036020850152611f73818661271d565b80151581146110ad57600080fd5b60008060006060848603121561288e57600080fd5b83356128998161267a565b925060208401356128a98161267a565b915060408401356128b98161286b565b809150509250925092565b600080600080600060a086880312156128dc57600080fd5b85356128e78161267a565b945060208601356128f78161267a565b94979496505050506040830135926060810135926080909101359150565b803565ffffffffffff8116811461292b57600080fd5b919050565b6000806000806080858703121561294657600080fd5b84356129518161267a565b93506020850135925061296660408601612915565b915061297460608601612915565b905092959194509250565b60208152600061143d60208301846126d8565b60008083601f8401126129a457600080fd5b50813567ffffffffffffffff8111156129bc57600080fd5b6020830191508360208260051b85010111156108bc57600080fd5b6000806000806000606086880312156129ef57600080fd5b85356129fa8161267a565b9450602086013567ffffffffffffffff80821115612a1757600080fd5b612a2389838a01612992565b90965094506040880135915080821115612a3c57600080fd5b50612a4988828901612992565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082612abf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b65ffffffffffff8181168382160190808211156124db576124db612a5a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215612b5357600080fd5b5051919050565b818103818111156119b6576119b6612a5a565b80820281158282048414176119b6576119b6612a5a565b808201808211156119b6576119b6612a5a565b60008184825b85811015612bce578135612bb08161267a565b6001600160a01b031683526020928301929190910190600101612b9d565b509095945050505050565b60208082528181018390526000908460408401835b86811015612c195765ffffffffffff612c0684612915565b1682529183019190830190600101612bee565b509695505050505050565b6001600160a01b038181168382160190808211156124db576124db612a5a565b600060208284031215612c5657600080fd5b61143d82612915565b6001600160a01b038281168282160390808211156124db576124db612a5a565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612cb057612cb0612a5a565b5060010190565b600060208284031215612cc957600080fd5b815161143d8161286b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60005b83811015612d1e578181015183820152602001612d06565b50506000910152565b60008251612d39818460208701612d03565b9190910192915050565b6020815260008251806020840152612d62816040850160208701612d03565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122067296dd182c1bc08332182b8a32d7058a27d9c387da1735d2f5e912941bdb99f64736f6c63430008160033",
  "libraries": {
    "RewardLib": "0x090194F1EEDc134A680e3b488aBB2D212dba8c01",
    "RewardRegistryLib": "0x7C2Fc16384361FbfdcA555d8F781bF65F85cf28c"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "MultiRewarderDisconnectedStakingToken(address)": [
        {
          "notice": "The token is not connected to the staking contract, connect it first."
        }
      ],
      "MultiRewarderIncorrectNative(uint256,uint256)": [
        {
          "notice": "A wrong `msg.value` was provided while setting a native reward, make sure it matches the function          `amount`."
        }
      ],
      "MultiRewarderMaxActiveRewardTokens()": [
        {
          "notice": "Due to various functions looping over the reward tokens connected to a staking token,          a maximum number of such links is instated."
        }
      ],
      "MultiRewarderMaxPoolsForRewardToken()": [
        {
          "notice": "Due to various functions looping over the staking tokens connected to a reward token,          a maximum number of such links is instated."
        }
      ],
      "MultiRewarderNativeTransferFailed(address,uint256)": [
        {
          "notice": "The recipient failed to handle the receipt of the native tokens, do they have a receipt hook?          If not, use `emergencyWithdraw`."
        }
      ],
      "MultiRewarderPoolFinished(address)": [
        {
          "notice": "The function can only be called while the pool hasn't ended yet."
        }
      ],
      "MultiRewarderRenounceOwnershipDisabled()": [
        {
          "notice": "MultiRewarder renounce ownership is disabled."
        }
      ],
      "MultiRewarderStartInPast(uint256)": [
        {
          "notice": "The pool start time cannot be set in the past, as this would cause the rewards to be voided."
        }
      ],
      "MultiRewarderUnauthorizedCaller(address)": [
        {
          "notice": "This function is only callable by the staking contract."
        }
      ],
      "MultiRewarderUnregisteredToken(address)": [
        {
          "notice": "This token is not registered via `setReward` yet, register it first."
        }
      ],
      "MultiRewarderZeroDuration()": [
        {
          "notice": "The pool emission duration cannot be set to zero, as this would cause the rewards to be voided."
        }
      ],
      "MultiRewarderZeroRewardRate()": [
        {
          "notice": "Due to a zero input or rounding, the reward rate while setting this pool would be zero,          which is not allowed."
        }
      ],
      "RewarderAlreadyConnected(address)": [
        {
          "notice": "The rewarder cannot be reconnected to the same staking token as it would cause wrongful reward          attribution through reconfiguration."
        }
      ]
    },
    "events": {
      "AllocPointsSet(address,address[],uint48[])": {
        "notice": "Emitted when the owner adjusts the allocation points for pools."
      },
      "PoolRegistered(address,address)": {
        "notice": "Emitted whenever a new staking pool combination was registered via the allocation point adjustment          function."
      },
      "RewardExtended(address,uint256,uint48)": {
        "notice": "Emitted when additional rewards were added to a pool, extending the reward duration."
      },
      "RewardRegistered(address)": {
        "notice": "Emitted when a reward token has been registered. Can be emitted again for the same token after it has          been explicitly stopped."
      },
      "RewardSet(address,uint256,uint256,uint48,uint48)": {
        "notice": "Emitted when the reward pool has been adjusted or intialized, with the new params."
      },
      "RewardStopped(address,address,bool)": {
        "notice": "Emitted when a reward token is stopped."
      },
      "RewarderConnected(address)": {
        "notice": "Emitted when the rewarder is connected to a staking token."
      },
      "RewardsClaimed(address,address[],uint256[])": {
        "notice": "Emitted whenever rewards are claimed via the staking pool."
      }
    },
    "kind": "user",
    "methods": {
      "allocPointsByReward(address)": {
        "notice": "Returns the allocation points for the `rewardToken` over all staking tokens linked to it."
      },
      "allocPointsByStake(address)": {
        "notice": "Returns the allocation points for the `stakingToken` over all reward tokens linked to it."
      },
      "connect(address)": {
        "notice": "Called by the staking contract whenever this rewarder is connected to a staking token in the staking          contract. Should only be callable once per staking token to avoid wrongful reward attribution through          reconfiguration."
      },
      "extendReward(address,uint256)": {
        "notice": "ADMIN FUNCTIONS *"
      },
      "getRewards(address,address)": {
        "notice": "VIEW FUNCTIONS *"
      },
      "rewardDetails(address)": {
        "notice": "Returns the emission details of a `rewardToken`, configured via `setReward`."
      },
      "rewardTokens()": {
        "notice": "Returns all enabled reward tokens. Stopped reward tokens are not included, while ended rewards are."
      },
      "setAllocPoints(address,address[],uint48[])": {
        "notice": "Configures allocation points for a reward token over multiple staking tokens, setting the `allocPoints`          for each `stakingTokens` and updating the `totalAllocPoint` for the `rewardToken`. The allocation          points of any non-provided staking tokens will be left as-is, and won't be reset to zero."
      },
      "stopReward(address,address,bool)": {
        "notice": "Unregisters a reward token fully, immediately preventing users from ever harvesting their pending          accumulated rewards. Optionally `pullTokens` can be set to false which causes the token balance to          not be sent to the owner, this should only be set to false in case the token is bugged and reverts."
      }
    },
    "notice": "See `IMultiRewarder` and `IRewarder` for documentation.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4809,
        "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21115,
        "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
        "label": "registry",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(RewardRegistry)23240_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)5669": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_contract(IERC20)5669,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(contract IERC20 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_contract(IERC20)5669,t_uint256)"
      },
      "t_mapping(t_address,t_struct(RewardDetails)22479_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMultiRewarder.RewardDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardDetails)22479_storage"
      },
      "t_mapping(t_address,t_struct(UintSet)10844_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)10844_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)5669,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)5669",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)5669,t_struct(UintSet)10844_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)5669",
        "label": "mapping(contract IERC20 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)10844_storage"
      },
      "t_mapping(t_contract(IERC20)5669,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)5669",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RewardPool)22465_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RewardPool)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardPool)22465_storage"
      },
      "t_struct(AddressSet)10687_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 10686,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10372_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RewardDetails)22479_storage": {
        "encoding": "inplace",
        "label": "struct IMultiRewarder.RewardDetails",
        "members": [
          {
            "astId": 22470,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "rewardPerSec",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22472,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "totalAllocPoints",
            "offset": 0,
            "slot": "1",
            "type": "t_uint160"
          },
          {
            "astId": 22474,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "start",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 22476,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "end",
            "offset": 26,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 22478,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "exists",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RewardPool)22465_storage": {
        "encoding": "inplace",
        "label": "struct RewardPool",
        "members": [
          {
            "astId": 22449,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22451,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "rewardToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 22453,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "lastRewardTime",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 22455,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "allocPoints",
            "offset": 26,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 22458,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "stakingToken",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)5669"
          },
          {
            "astId": 22460,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "removed",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 22464,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RewardRegistry)23240_storage": {
        "encoding": "inplace",
        "label": "struct RewardRegistry",
        "members": [
          {
            "astId": 23203,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "rewardIdCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23208,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "pools",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(RewardPool)22465_storage)"
          },
          {
            "astId": 23213,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "byReward",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_struct(UintSet)10844_storage)"
          },
          {
            "astId": 23219,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "byStake",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_contract(IERC20)5669,t_struct(UintSet)10844_storage)"
          },
          {
            "astId": 23226,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "byRewardAndStake",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_mapping(t_contract(IERC20)5669,t_uint256))"
          },
          {
            "astId": 23231,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "rewardDetails",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_struct(RewardDetails)22479_storage)"
          },
          {
            "astId": 23234,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "rewardTokens",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(AddressSet)10687_storage"
          },
          {
            "astId": 23239,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "connected",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_contract(IERC20)5669,t_bool)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Set)10372_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 10367,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 10371,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)10844_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 10843,
            "contract": "src/peripheral/rewarder/StargateMultiRewarder.sol:StargateMultiRewarder",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10372_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint160": {
        "encoding": "inplace",
        "label": "uint160",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      }
    }
  }
}
