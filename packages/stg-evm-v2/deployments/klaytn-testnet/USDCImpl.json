{
  "address": "0x8212C21825a6C9b2FB4432942EB4368F379Be2C8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "AuthorizationUsed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "Blacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newBlacklister",
          "type": "address"
        }
      ],
      "name": "BlacklisterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMasterMinter",
          "type": "address"
        }
      ],
      "name": "MasterMinterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minterAllowedAmount",
          "type": "uint256"
        }
      ],
      "name": "MinterConfigured",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldMinter",
          "type": "address"
        }
      ],
      "name": "MinterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "PauserChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newRescuer",
          "type": "address"
        }
      ],
      "name": "RescuerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "UnBlacklisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Unpause",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CANCEL_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECEIVE_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "authorizationState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "blacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blacklister",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "cancelAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "cancelAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minterAllowedAmount",
          "type": "uint256"
        }
      ],
      "name": "configureMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currency",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "decrement",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "increment",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenCurrency",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "newMasterMinter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newPauser",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newBlacklister",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newName",
          "type": "string"
        }
      ],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lostAndFound",
          "type": "address"
        }
      ],
      "name": "initializeV2_1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accountsToBlacklist",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "newSymbol",
          "type": "string"
        }
      ],
      "name": "initializeV2_2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "isBlacklisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "minterAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauser",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "receiveWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "receiveWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rescueERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescuer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "transferWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validAfter",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "validBefore",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "transferWithAuthorization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "unBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newBlacklister",
          "type": "address"
        }
      ],
      "name": "updateBlacklister",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMasterMinter",
          "type": "address"
        }
      ],
      "name": "updateMasterMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newPauser",
          "type": "address"
        }
      ],
      "name": "updatePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRescuer",
          "type": "address"
        }
      ],
      "name": "updateRescuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe94eaa97dea1a4a69a16d1f610d78b4099450b4adebfb3791293c97f0a072c4f",
  "receipt": {
    "to": null,
    "from": "0x315fBC52Ebe23df572C843da060d0620Bc7bC3fb",
    "contractAddress": "0x8212C21825a6C9b2FB4432942EB4368F379Be2C8",
    "transactionIndex": 0,
    "gasUsed": "6038730",
    "logsBloom": "0x
    "blockHash": "0x4696c32d58ba9174cc880bc57e17bc3847c4dacd30ef2ec88d842f6d2f247a0a",
    "transactionHash": "0xe94eaa97dea1a4a69a16d1f610d78b4099450b4adebfb3791293c97f0a072c4f",
    "logs": [],
    "blockNumber": 159756067,
    "cumulativeGasUsed": "6038730",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7f30a30e9578a142f505c41026c21857",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"AuthorizationUsed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"Blacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"}],\"name\":\"BlacklisterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMasterMinter\",\"type\":\"address\"}],\"name\":\"MasterMinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minterAllowedAmount\",\"type\":\"uint256\"}],\"name\":\"MinterConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMinter\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"PauserChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"RescuerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"UnBlacklisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CANCEL_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECEIVE_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRANSFER_WITH_AUTHORIZATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"authorizationState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklister\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"cancelAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minterAllowedAmount\",\"type\":\"uint256\"}],\"name\":\"configureMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currency\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"decrement\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"increment\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenCurrency\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"newMasterMinter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newBlacklister\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newName\",\"type\":\"string\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lostAndFound\",\"type\":\"address\"}],\"name\":\"initializeV2_1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accountsToBlacklist\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"newSymbol\",\"type\":\"string\"}],\"name\":\"initializeV2_2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isBlacklisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"minterAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"receiveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"receiveWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rescueERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validAfter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"validBefore\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"transferWithAuthorization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"unBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newBlacklister\",\"type\":\"address\"}],\"name\":\"updateBlacklister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMasterMinter\",\"type\":\"address\"}],\"name\":\"updateMasterMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPauser\",\"type\":\"address\"}],\"name\":\"updatePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRescuer\",\"type\":\"address\"}],\"name\":\"updateRescuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"OwnershipTransferred(address,address)\":{\"details\":\"Event to show ownership has been transferred\",\"params\":{\"newOwner\":\"representing the address of the new owner\",\"previousOwner\":\"representing the address of the previous owner\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"_0\":\"The bytes32 EIP712 domain separator.\"}},\"allowance(address,address)\":{\"params\":{\"owner\":\"The token owner's address.\",\"spender\":\"The spender's address.\"},\"returns\":{\"_0\":\"The remaining allowance.\"}},\"approve(address,uint256)\":{\"params\":{\"spender\":\"The spender's address.\",\"value\":\"The allowance amount.\"},\"returns\":{\"_0\":\"True if the operation was successful.\"}},\"authorizationState(address,bytes32)\":{\"details\":\"Nonces are randomly generated 32-byte data unique to the authorizer's address\",\"params\":{\"authorizer\":\"Authorizer's address\",\"nonce\":\"Nonce of the authorization\"},\"returns\":{\"_0\":\"True if the nonce is used\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address to check.\"},\"returns\":{\"_0\":\"balance The fiat token balance of the account.\"}},\"blacklist(address)\":{\"params\":{\"_account\":\"The address to blacklist.\"}},\"burn(uint256)\":{\"details\":\"The caller must be a minter, must not be blacklisted, and the amount to burn should be less than or equal to the account's balance.\",\"params\":{\"_amount\":\"the amount of tokens to be burned.\"}},\"cancelAuthorization(address,bytes32,bytes)\":{\"details\":\"Works only if the authorization is not yet used. EOA wallet signatures should be packed in the order of r, s, v.\",\"params\":{\"authorizer\":\"Authorizer's address\",\"nonce\":\"Nonce of the authorization\",\"signature\":\"Signature bytes signed by an EOA wallet or a contract wallet\"}},\"cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)\":{\"details\":\"Works only if the authorization is not yet used.\",\"params\":{\"authorizer\":\"Authorizer's address\",\"nonce\":\"Nonce of the authorization\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"v\":\"v of the signature\"}},\"configureMinter(address,uint256)\":{\"params\":{\"minter\":\"The address of the minter.\",\"minterAllowedAmount\":\"The minting amount allowed for the minter.\"},\"returns\":{\"_0\":\"True if the operation was successful.\"}},\"decreaseAllowance(address,uint256)\":{\"params\":{\"decrement\":\"Amount of decrease in allowance\",\"spender\":\"Spender's address\"},\"returns\":{\"_0\":\"True if successful\"}},\"increaseAllowance(address,uint256)\":{\"params\":{\"increment\":\"Amount of increase in allowance\",\"spender\":\"Spender's address\"},\"returns\":{\"_0\":\"True if successful\"}},\"initialize(string,string,string,uint8,address,address,address,address)\":{\"params\":{\"newBlacklister\":\"The blacklister address for the fiat token.\",\"newMasterMinter\":\"The masterMinter address for the fiat token.\",\"newOwner\":\"The owner of the fiat token.\",\"newPauser\":\"The pauser address for the fiat token.\",\"tokenCurrency\":\"The fiat currency that the token represents.\",\"tokenDecimals\":\"The number of decimals that the token uses.\",\"tokenName\":\"The name of the fiat token.\",\"tokenSymbol\":\"The symbol of the fiat token.\"}},\"initializeV2(string)\":{\"params\":{\"newName\":\"New token name\"}},\"initializeV2_1(address)\":{\"params\":{\"lostAndFound\":\"The address to which the locked funds are sent\"}},\"initializeV2_2(address[],string)\":{\"params\":{\"accountsToBlacklist\":\"A list of accounts to migrate from the old blacklist\",\"newSymbol\":\"New token symbol data structure to the new blacklist data structure.\"}},\"isBlacklisted(address)\":{\"params\":{\"_account\":\"The address to check.\"},\"returns\":{\"_0\":\"True if the account is blacklisted, false if the account is not blacklisted.\"}},\"isMinter(address)\":{\"params\":{\"account\":\"The address to check.\"},\"returns\":{\"_0\":\"True if the account is a minter, false if the account is not a minter.\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to mint. Must be less than or equal to the minterAllowance of the caller.\",\"_to\":\"The address that will receive the minted tokens.\"},\"returns\":{\"_0\":\"True if the operation was successful.\"}},\"minterAllowance(address)\":{\"params\":{\"minter\":\"The address to check.\"},\"returns\":{\"_0\":\"The remaining minter allowance for the account.\"}},\"nonces(address)\":{\"params\":{\"owner\":\"Token owner's address (Authorizer)\"},\"returns\":{\"_0\":\"Next nonce\"}},\"owner()\":{\"details\":\"Tells the address of the owner\",\"returns\":{\"_0\":\"the address of the owner\"}},\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"permit(address,address,uint256,uint256,bytes)\":{\"details\":\"EOA wallet signatures should be packed in the order of r, s, v.\",\"params\":{\"deadline\":\"The time at which the signature expires (unix time), or max uint256 value to signal no expiration\",\"owner\":\"Token owner's address (Authorizer)\",\"signature\":\"Signature bytes signed by an EOA wallet or a contract wallet\",\"spender\":\"Spender's address\",\"value\":\"Amount of allowance\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which the signature expires (unix time), or max uint256 value to signal no expiration\",\"owner\":\"Token owner's address (Authorizer)\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"spender\":\"Spender's address\",\"v\":\"v of the signature\",\"value\":\"Amount of allowance\"}},\"receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,bytes)\":{\"details\":\"This has an additional check to ensure that the payee's address matches the caller of this function to prevent front-running attacks. EOA wallet signatures should be packed in the order of r, s, v.\",\"params\":{\"from\":\"Payer's address (Authorizer)\",\"nonce\":\"Unique nonce\",\"signature\":\"Signature bytes signed by an EOA wallet or a contract wallet\",\"to\":\"Payee's address\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be transferred\"}},\"receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"details\":\"This has an additional check to ensure that the payee's address matches the caller of this function to prevent front-running attacks.\",\"params\":{\"from\":\"Payer's address (Authorizer)\",\"nonce\":\"Unique nonce\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"to\":\"Payee's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be transferred\"}},\"removeMinter(address)\":{\"params\":{\"minter\":\"The address of the minter to remove.\"},\"returns\":{\"_0\":\"True if the operation was successful.\"}},\"rescueERC20(address,address,uint256)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"to\":\"Recipient address\",\"tokenContract\":\"ERC20 token contract address\"}},\"rescuer()\":{\"returns\":{\"_0\":\"Rescuer's address\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The totalSupply of the fiat token.\"}},\"transfer(address,uint256)\":{\"params\":{\"to\":\"Payee's address.\",\"value\":\"Transfer amount.\"},\"returns\":{\"_0\":\"True if the operation was successful.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"The caller must have some fiat token allowance on the payer's tokens.\",\"params\":{\"from\":\"Payer's address.\",\"to\":\"Payee's address.\",\"value\":\"Transfer amount.\"},\"returns\":{\"_0\":\"True if the operation was successful.\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,bytes)\":{\"details\":\"EOA wallet signatures should be packed in the order of r, s, v.\",\"params\":{\"from\":\"Payer's address (Authorizer)\",\"nonce\":\"Unique nonce\",\"signature\":\"Signature bytes signed by an EOA wallet or a contract wallet\",\"to\":\"Payee's address\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be transferred\"}},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"params\":{\"from\":\"Payer's address (Authorizer)\",\"nonce\":\"Unique nonce\",\"r\":\"r of the signature\",\"s\":\"s of the signature\",\"to\":\"Payee's address\",\"v\":\"v of the signature\",\"validAfter\":\"The time after which this is valid (unix time)\",\"validBefore\":\"The time before which this is valid (unix time)\",\"value\":\"Amount to be transferred\"}},\"unBlacklist(address)\":{\"params\":{\"_account\":\"The address to remove from the blacklist.\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"},\"updateBlacklister(address)\":{\"params\":{\"_newBlacklister\":\"The address of the new blacklister.\"}},\"updateMasterMinter(address)\":{\"params\":{\"_newMasterMinter\":\"The address of the new master minter.\"}},\"updatePauser(address)\":{\"params\":{\"_newPauser\":\"The address of the new pauser.\"}},\"updateRescuer(address)\":{\"params\":{\"newRescuer\":\"The address of the new rescuer.\"}},\"version()\":{\"returns\":{\"_0\":\"Version string\"}}},\"title\":\"FiatToken V2.2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Get the EIP712 Domain Separator.\"},\"allowance(address,address)\":{\"notice\":\"Gets the remaining amount of fiat tokens a spender is allowed to transfer on behalf of the token owner.\"},\"approve(address,uint256)\":{\"notice\":\"Sets a fiat token allowance for a spender to spend on behalf of the caller.\"},\"authorizationState(address,bytes32)\":{\"notice\":\"Returns the state of an authorization\"},\"balanceOf(address)\":{\"notice\":\"Gets the fiat token balance of an account.\"},\"blacklist(address)\":{\"notice\":\"Adds account to blacklist.\"},\"burn(uint256)\":{\"notice\":\"Allows a minter to burn some of its own tokens.\"},\"cancelAuthorization(address,bytes32,bytes)\":{\"notice\":\"Attempt to cancel an authorization\"},\"cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Attempt to cancel an authorization\"},\"configureMinter(address,uint256)\":{\"notice\":\"Adds or updates a new minter with a mint allowance.\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decrease the allowance by a given decrement\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increase the allowance by a given increment\"},\"initialize(string,string,string,uint8,address,address,address,address)\":{\"notice\":\"Initializes the fiat token contract.\"},\"initializeV2(string)\":{\"notice\":\"Initialize v2\"},\"initializeV2_1(address)\":{\"notice\":\"Initialize v2.1\"},\"initializeV2_2(address[],string)\":{\"notice\":\"Initialize v2.2\"},\"isBlacklisted(address)\":{\"notice\":\"Checks if account is blacklisted.\"},\"isMinter(address)\":{\"notice\":\"Checks if an account is a minter.\"},\"mint(address,uint256)\":{\"notice\":\"Mints fiat tokens to an address.\"},\"minterAllowance(address)\":{\"notice\":\"Gets the minter allowance for an account.\"},\"nonces(address)\":{\"notice\":\"Nonces for permit\"},\"permit(address,address,uint256,uint256,bytes)\":{\"notice\":\"Update allowance with a signed permit\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Update allowance with a signed permit\"},\"receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,bytes)\":{\"notice\":\"Receive a transfer with a signed authorization from the payer\"},\"receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Receive a transfer with a signed authorization from the payer\"},\"removeMinter(address)\":{\"notice\":\"Removes a minter.\"},\"rescueERC20(address,address,uint256)\":{\"notice\":\"Rescue ERC20 tokens locked up in this contract.\"},\"rescuer()\":{\"notice\":\"Returns current rescuer\"},\"totalSupply()\":{\"notice\":\"Gets the totalSupply of the fiat token.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers tokens from the caller.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers tokens from an address to another by spending the caller's allowance.\"},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,bytes)\":{\"notice\":\"Execute a transfer with a signed authorization\"},\"transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)\":{\"notice\":\"Execute a transfer with a signed authorization\"},\"unBlacklist(address)\":{\"notice\":\"Removes account from blacklist.\"},\"updateBlacklister(address)\":{\"notice\":\"Updates the blacklister address.\"},\"updateMasterMinter(address)\":{\"notice\":\"Updates the master minter address.\"},\"updatePauser(address)\":{\"notice\":\"Updates the pauser address.\"},\"updateRescuer(address)\":{\"notice\":\"Updates the rescuer address.\"},\"version()\":{\"notice\":\"Version string for the EIP712 domain separator\"}},\"notice\":\"ERC20 Token backed by fiat reserves, version 2.2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/usdc/impl/v2/FiatTokenV2_2.sol\":\"FiatTokenV2_2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"src/usdc/impl/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash          Hash of the data to be signed\\n     * @param signature     Signature byte array associated with the provided data hash\\n     * @return magicValue   bytes4 magic value 0x1626ba7e when function passes\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xbd5ce56510b135ac06b920b14dcdc9d350bb7a22cc867777d0b2d9938fc3854e\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/util/ECRecover.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ECRecover\\n * @notice A library that provides a safe ECDSA recovery function\\n */\\nlibrary ECRecover {\\n    /**\\n     * @notice Recover signer's address from a signed message\\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol\\n     * Modifications: Accept v, r, and s as separate arguments\\n     * @param digest    Keccak-256 hash digest of the signed message\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     * @return Signer address\\n     */\\n    function recover(bytes32 digest, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECRecover: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECRecover: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(digest, v, r, s);\\n        require(signer != address(0), \\\"ECRecover: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Recover signer's address from a signed message\\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0053ee040a7ff1dbc39691c9e67a69f564930a88/contracts/utils/cryptography/ECDSA.sol\\n     * @param digest    Keccak-256 hash digest of the signed message\\n     * @param signature Signature byte array associated with hash\\n     * @return Signer address\\n     */\\n    function recover(bytes32 digest, bytes memory signature) internal pure returns (address) {\\n        require(signature.length == 65, \\\"ECRecover: invalid signature length\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n        return recover(digest, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xead4630c535f486fc99b6246dad8b915b47ce450b8a2e54323fface15a3d7ef4\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/util/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title EIP712\\n * @notice A library that provides EIP712 helper functions\\n */\\nlibrary EIP712 {\\n    /**\\n     * @notice Make EIP712 domain separator\\n     * @param name      Contract name\\n     * @param version   Contract version\\n     * @param chainId   Blockchain ID\\n     * @return Domain separator\\n     */\\n    function makeDomainSeparator(\\n        string memory name,\\n        string memory version,\\n        uint256 chainId\\n    ) internal view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                    0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f,\\n                    keccak256(bytes(name)),\\n                    keccak256(bytes(version)),\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Make EIP712 domain separator\\n     * @param name      Contract name\\n     * @param version   Contract version\\n     * @return Domain separator\\n     */\\n    function makeDomainSeparator(string memory name, string memory version) internal view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return makeDomainSeparator(name, version, chainId);\\n    }\\n}\\n\",\"keccak256\":\"0xb6cc0190819996474ced0124b7c87bd70c22002bf250f18197b323235902c1f9\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/util/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     * Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/21bb89ef5bfc789b9333eb05e3ba2b7b284ac77c/contracts/utils/cryptography/MessageHashUtils.sol\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * @param domainSeparator    Domain separator\\n     * @param structHash         Hashed EIP-712 data struct\\n     * @return digest            The keccak256 digest of an EIP-712 typed data\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x877d79fc749933f2399956ef154f182a4376ac2270f996a3a4095749561ebfbc\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/util/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { ECRecover } from \\\"./ECRecover.sol\\\";\\nimport { IERC1271 } from \\\"../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECRecover.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets.\\n *\\n * Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/21bb89ef5bfc789b9333eb05e3ba2b7b284ac77c/contracts/utils/cryptography/SignatureChecker.sol\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECRecover.recover`.\\n     * @param signer        Address of the claimed signer\\n     * @param digest        Keccak-256 hash digest of the signed message\\n     * @param signature     Signature byte array associated with hash\\n     */\\n    function isValidSignatureNow(address signer, bytes32 digest, bytes memory signature) external view returns (bool) {\\n        if (!isContract(signer)) {\\n            return ECRecover.recover(digest, signature) == signer;\\n        }\\n        return isValidERC1271SignatureNow(signer, digest, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     * @param signer        Address of the claimed signer\\n     * @param digest        Keccak-256 hash digest of the signed message\\n     * @param signature     Signature byte array associated with hash\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, digest, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n\\n    /**\\n     * @dev Checks if the input address is a smart contract.\\n     */\\n    function isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x6f7b341108bbfdea57a0676832d7cbbcaded66128aae4885e971b04a0f466ede\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v1.1/FiatTokenV1_1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { FiatTokenV1 } from \\\"../v1/FiatTokenV1.sol\\\";\\nimport { Rescuable } from \\\"./Rescuable.sol\\\";\\n\\n/**\\n * @title FiatTokenV1_1\\n * @dev ERC20 Token backed by fiat reserves\\n */\\ncontract FiatTokenV1_1 is FiatTokenV1, Rescuable {}\\n\",\"keccak256\":\"0x0a9cabebb4e719ce5ab170a24be895cb71a4b71b9679ea93662d74a54b77b26c\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v1.1/Rescuable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { Ownable } from \\\"../v1/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Rescuable is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    address private _rescuer;\\n\\n    event RescuerChanged(address indexed newRescuer);\\n\\n    /**\\n     * @notice Returns current rescuer\\n     * @return Rescuer's address\\n     */\\n    function rescuer() external view returns (address) {\\n        return _rescuer;\\n    }\\n\\n    /**\\n     * @notice Revert if called by any account other than the rescuer.\\n     */\\n    modifier onlyRescuer() {\\n        require(msg.sender == _rescuer, \\\"Rescuable: caller is not the rescuer\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Rescue ERC20 tokens locked up in this contract.\\n     * @param tokenContract ERC20 token contract address\\n     * @param to        Recipient address\\n     * @param amount    Amount to withdraw\\n     */\\n    function rescueERC20(IERC20 tokenContract, address to, uint256 amount) external onlyRescuer {\\n        tokenContract.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Updates the rescuer address.\\n     * @param newRescuer The address of the new rescuer.\\n     */\\n    function updateRescuer(address newRescuer) external onlyOwner {\\n        require(newRescuer != address(0), \\\"Rescuable: new rescuer is the zero address\\\");\\n        _rescuer = newRescuer;\\n        emit RescuerChanged(newRescuer);\\n    }\\n}\\n\",\"keccak256\":\"0x8489b5dbf11af77d1c0e053c1657859d4f3ac894302fb3177d15b229e3a4e22c\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v1/AbstractFiatTokenV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract AbstractFiatTokenV1 is IERC20 {\\n    function _approve(address owner, address spender, uint256 value) internal virtual;\\n\\n    function _transfer(address from, address to, uint256 value) internal virtual;\\n}\\n\",\"keccak256\":\"0xe9e715b0b662bb14e7e9620f88262cadede86191ed4cbfaef706b1f2606d4756\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v1/Blacklistable.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @title Blacklistable Token\\n * @dev Allows accounts to be blacklisted by a \\\"blacklister\\\" role\\n */\\nabstract contract Blacklistable is Ownable {\\n    address public blacklister;\\n    mapping(address => bool) internal _deprecatedBlacklisted;\\n\\n    event Blacklisted(address indexed _account);\\n    event UnBlacklisted(address indexed _account);\\n    event BlacklisterChanged(address indexed newBlacklister);\\n\\n    /**\\n     * @dev Throws if called by any account other than the blacklister.\\n     */\\n    modifier onlyBlacklister() {\\n        require(msg.sender == blacklister, \\\"Blacklistable: caller is not the blacklister\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if argument account is blacklisted.\\n     * @param _account The address to check.\\n     */\\n    modifier notBlacklisted(address _account) {\\n        require(!_isBlacklisted(_account), \\\"Blacklistable: account is blacklisted\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if account is blacklisted.\\n     * @param _account The address to check.\\n     * @return True if the account is blacklisted, false if the account is not blacklisted.\\n     */\\n    function isBlacklisted(address _account) external view returns (bool) {\\n        return _isBlacklisted(_account);\\n    }\\n\\n    /**\\n     * @notice Adds account to blacklist.\\n     * @param _account The address to blacklist.\\n     */\\n    function blacklist(address _account) external onlyBlacklister {\\n        _blacklist(_account);\\n        emit Blacklisted(_account);\\n    }\\n\\n    /**\\n     * @notice Removes account from blacklist.\\n     * @param _account The address to remove from the blacklist.\\n     */\\n    function unBlacklist(address _account) external onlyBlacklister {\\n        _unBlacklist(_account);\\n        emit UnBlacklisted(_account);\\n    }\\n\\n    /**\\n     * @notice Updates the blacklister address.\\n     * @param _newBlacklister The address of the new blacklister.\\n     */\\n    function updateBlacklister(address _newBlacklister) external onlyOwner {\\n        require(_newBlacklister != address(0), \\\"Blacklistable: new blacklister is the zero address\\\");\\n        blacklister = _newBlacklister;\\n        emit BlacklisterChanged(blacklister);\\n    }\\n\\n    /**\\n     * @dev Checks if account is blacklisted.\\n     * @param _account The address to check.\\n     * @return true if the account is blacklisted, false otherwise.\\n     */\\n    function _isBlacklisted(address _account) internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Helper method that blacklists an account.\\n     * @param _account The address to blacklist.\\n     */\\n    function _blacklist(address _account) internal virtual;\\n\\n    /**\\n     * @dev Helper method that unblacklists an account.\\n     * @param _account The address to unblacklist.\\n     */\\n    function _unBlacklist(address _account) internal virtual;\\n}\\n\",\"keccak256\":\"0xc9deee26dd9c0af6253090bc38165ce216492753e2d7db335839cbb577e1d14c\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v1/FiatTokenV1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { AbstractFiatTokenV1 } from \\\"./AbstractFiatTokenV1.sol\\\";\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\nimport { Pausable } from \\\"./Pausable.sol\\\";\\nimport { Blacklistable } from \\\"./Blacklistable.sol\\\";\\n\\n/**\\n * @title FiatToken\\n * @dev ERC20 Token backed by fiat reserves\\n */\\ncontract FiatTokenV1 is AbstractFiatTokenV1, Ownable, Pausable, Blacklistable {\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n    string public currency;\\n    address public masterMinter;\\n    bool internal initialized;\\n\\n    /// @dev A mapping that stores the balance and blacklist states for a given address.\\n    /// The first bit defines whether the address is blacklisted (1 if blacklisted, 0 otherwise).\\n    /// The last 255 bits define the balance for the address.\\n    mapping(address => uint256) internal balanceAndBlacklistStates;\\n    mapping(address => mapping(address => uint256)) internal allowed;\\n    uint256 internal totalSupply_ = 0;\\n    mapping(address => bool) internal minters;\\n    mapping(address => uint256) internal minterAllowed;\\n\\n    event Mint(address indexed minter, address indexed to, uint256 amount);\\n    event Burn(address indexed burner, uint256 amount);\\n    event MinterConfigured(address indexed minter, uint256 minterAllowedAmount);\\n    event MinterRemoved(address indexed oldMinter);\\n    event MasterMinterChanged(address indexed newMasterMinter);\\n\\n    /**\\n     * @notice Initializes the fiat token contract.\\n     * @param tokenName       The name of the fiat token.\\n     * @param tokenSymbol     The symbol of the fiat token.\\n     * @param tokenCurrency   The fiat currency that the token represents.\\n     * @param tokenDecimals   The number of decimals that the token uses.\\n     * @param newMasterMinter The masterMinter address for the fiat token.\\n     * @param newPauser       The pauser address for the fiat token.\\n     * @param newBlacklister  The blacklister address for the fiat token.\\n     * @param newOwner        The owner of the fiat token.\\n     */\\n    function initialize(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        string memory tokenCurrency,\\n        uint8 tokenDecimals,\\n        address newMasterMinter,\\n        address newPauser,\\n        address newBlacklister,\\n        address newOwner\\n    ) public {\\n        require(!initialized, \\\"FiatToken: contract is already initialized\\\");\\n        require(newMasterMinter != address(0), \\\"FiatToken: new masterMinter is the zero address\\\");\\n        require(newPauser != address(0), \\\"FiatToken: new pauser is the zero address\\\");\\n        require(newBlacklister != address(0), \\\"FiatToken: new blacklister is the zero address\\\");\\n        require(newOwner != address(0), \\\"FiatToken: new owner is the zero address\\\");\\n\\n        name = tokenName;\\n        symbol = tokenSymbol;\\n        currency = tokenCurrency;\\n        decimals = tokenDecimals;\\n        masterMinter = newMasterMinter;\\n        pauser = newPauser;\\n        blacklister = newBlacklister;\\n        setOwner(newOwner);\\n        initialized = true;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than a minter.\\n     */\\n    modifier onlyMinters() {\\n        require(minters[msg.sender], \\\"FiatToken: caller is not a minter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Mints fiat tokens to an address.\\n     * @param _to The address that will receive the minted tokens.\\n     * @param _amount The amount of tokens to mint. Must be less than or equal\\n     * to the minterAllowance of the caller.\\n     * @return True if the operation was successful.\\n     */\\n    function mint(\\n        address _to,\\n        uint256 _amount\\n    ) external whenNotPaused onlyMinters notBlacklisted(msg.sender) notBlacklisted(_to) returns (bool) {\\n        require(_to != address(0), \\\"FiatToken: mint to the zero address\\\");\\n        require(_amount > 0, \\\"FiatToken: mint amount not greater than 0\\\");\\n\\n        uint256 mintingAllowedAmount = minterAllowed[msg.sender];\\n        require(_amount <= mintingAllowedAmount, \\\"FiatToken: mint amount exceeds minterAllowance\\\");\\n\\n        totalSupply_ = totalSupply_ + _amount;\\n        _setBalance(_to, _balanceOf(_to) + _amount);\\n        minterAllowed[msg.sender] = mintingAllowedAmount - _amount;\\n        emit Mint(msg.sender, _to, _amount);\\n        emit Transfer(address(0), _to, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the masterMinter\\n     */\\n    modifier onlyMasterMinter() {\\n        require(msg.sender == masterMinter, \\\"FiatToken: caller is not the masterMinter\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Gets the minter allowance for an account.\\n     * @param minter The address to check.\\n     * @return The remaining minter allowance for the account.\\n     */\\n    function minterAllowance(address minter) external view returns (uint256) {\\n        return minterAllowed[minter];\\n    }\\n\\n    /**\\n     * @notice Checks if an account is a minter.\\n     * @param account The address to check.\\n     * @return True if the account is a minter, false if the account is not a minter.\\n     */\\n    function isMinter(address account) external view returns (bool) {\\n        return minters[account];\\n    }\\n\\n    /**\\n     * @notice Gets the remaining amount of fiat tokens a spender is allowed to transfer on\\n     * behalf of the token owner.\\n     * @param owner   The token owner's address.\\n     * @param spender The spender's address.\\n     * @return The remaining allowance.\\n     */\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return allowed[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Gets the totalSupply of the fiat token.\\n     * @return The totalSupply of the fiat token.\\n     */\\n    function totalSupply() external view override returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    /**\\n     * @notice Gets the fiat token balance of an account.\\n     * @param account  The address to check.\\n     * @return balance The fiat token balance of the account.\\n     */\\n    function balanceOf(address account) external view override returns (uint256) {\\n        return _balanceOf(account);\\n    }\\n\\n    /**\\n     * @notice Sets a fiat token allowance for a spender to spend on behalf of the caller.\\n     * @param spender The spender's address.\\n     * @param value   The allowance amount.\\n     * @return True if the operation was successful.\\n     */\\n    function approve(\\n        address spender,\\n        uint256 value\\n    ) external virtual override whenNotPaused notBlacklisted(msg.sender) notBlacklisted(spender) returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal function to set allowance.\\n     * @param owner     Token owner's address.\\n     * @param spender   Spender's address.\\n     * @param value     Allowance amount.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal override {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        allowed[owner][spender] = value;\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from an address to another by spending the caller's allowance.\\n     * @dev The caller must have some fiat token allowance on the payer's tokens.\\n     * @param from  Payer's address.\\n     * @param to    Payee's address.\\n     * @param value Transfer amount.\\n     * @return True if the operation was successful.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    )\\n        external\\n        override\\n        whenNotPaused\\n        notBlacklisted(msg.sender)\\n        notBlacklisted(from)\\n        notBlacklisted(to)\\n        returns (bool)\\n    {\\n        require(value <= allowed[from][msg.sender], \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _transfer(from, to, value);\\n        allowed[from][msg.sender] = allowed[from][msg.sender] - value;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfers tokens from the caller.\\n     * @param to    Payee's address.\\n     * @param value Transfer amount.\\n     * @return True if the operation was successful.\\n     */\\n    function transfer(\\n        address to,\\n        uint256 value\\n    ) external override whenNotPaused notBlacklisted(msg.sender) notBlacklisted(to) returns (bool) {\\n        _transfer(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Internal function to process transfers.\\n     * @param from  Payer's address.\\n     * @param to    Payee's address.\\n     * @param value Transfer amount.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(value <= _balanceOf(from), \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        _setBalance(from, _balanceOf(from) - value);\\n        _setBalance(to, _balanceOf(to) + value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @notice Adds or updates a new minter with a mint allowance.\\n     * @param minter The address of the minter.\\n     * @param minterAllowedAmount The minting amount allowed for the minter.\\n     * @return True if the operation was successful.\\n     */\\n    function configureMinter(\\n        address minter,\\n        uint256 minterAllowedAmount\\n    ) external whenNotPaused onlyMasterMinter returns (bool) {\\n        minters[minter] = true;\\n        minterAllowed[minter] = minterAllowedAmount;\\n        emit MinterConfigured(minter, minterAllowedAmount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Removes a minter.\\n     * @param minter The address of the minter to remove.\\n     * @return True if the operation was successful.\\n     */\\n    function removeMinter(address minter) external onlyMasterMinter returns (bool) {\\n        minters[minter] = false;\\n        minterAllowed[minter] = 0;\\n        emit MinterRemoved(minter);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Allows a minter to burn some of its own tokens.\\n     * @dev The caller must be a minter, must not be blacklisted, and the amount to burn\\n     * should be less than or equal to the account's balance.\\n     * @param _amount the amount of tokens to be burned.\\n     */\\n    function burn(uint256 _amount) external whenNotPaused onlyMinters notBlacklisted(msg.sender) {\\n        uint256 balance = _balanceOf(msg.sender);\\n        require(_amount > 0, \\\"FiatToken: burn amount not greater than 0\\\");\\n        require(balance >= _amount, \\\"FiatToken: burn amount exceeds balance\\\");\\n\\n        totalSupply_ = totalSupply_ - _amount;\\n        _setBalance(msg.sender, balance - _amount);\\n        emit Burn(msg.sender, _amount);\\n        emit Transfer(msg.sender, address(0), _amount);\\n    }\\n\\n    /**\\n     * @notice Updates the master minter address.\\n     * @param _newMasterMinter The address of the new master minter.\\n     */\\n    function updateMasterMinter(address _newMasterMinter) external onlyOwner {\\n        require(_newMasterMinter != address(0), \\\"FiatToken: new masterMinter is the zero address\\\");\\n        masterMinter = _newMasterMinter;\\n        emit MasterMinterChanged(masterMinter);\\n    }\\n\\n    /**\\n     * @inheritdoc Blacklistable\\n     */\\n    function _blacklist(address _account) internal override {\\n        _setBlacklistState(_account, true);\\n    }\\n\\n    /**\\n     * @inheritdoc Blacklistable\\n     */\\n    function _unBlacklist(address _account) internal override {\\n        _setBlacklistState(_account, false);\\n    }\\n\\n    /**\\n     * @dev Helper method that sets the blacklist state of an account.\\n     * @param _account         The address of the account.\\n     * @param _shouldBlacklist True if the account should be blacklisted, false if the account should be unblacklisted.\\n     */\\n    function _setBlacklistState(address _account, bool _shouldBlacklist) internal virtual {\\n        _deprecatedBlacklisted[_account] = _shouldBlacklist;\\n    }\\n\\n    /**\\n     * @dev Helper method that sets the balance of an account.\\n     * @param _account The address of the account.\\n     * @param _balance The new fiat token balance of the account.\\n     */\\n    function _setBalance(address _account, uint256 _balance) internal virtual {\\n        balanceAndBlacklistStates[_account] = _balance;\\n    }\\n\\n    /**\\n     * @inheritdoc Blacklistable\\n     */\\n    function _isBlacklisted(address _account) internal view virtual override returns (bool) {\\n        return _deprecatedBlacklisted[_account];\\n    }\\n\\n    /**\\n     * @dev Helper method to obtain the balance of an account.\\n     * @param _account  The address of the account.\\n     * @return          The fiat token balance of the account.\\n     */\\n    function _balanceOf(address _account) internal view virtual returns (uint256) {\\n        return balanceAndBlacklistStates[_account];\\n    }\\n}\\n\",\"keccak256\":\"0x672be9629602c09edea51129a687c6c777fcb4003566494c70ab2da9dda32c3d\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v1/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *\\n * Copyright (c) 2018 zOS Global Limited.\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice The Ownable contract has an owner address, and provides basic\\n * authorization control functions\\n * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-labs/blob/3887ab77b8adafba4a26ace002f3a684c1a3388b/upgradeability_ownership/contracts/ownership/Ownable.sol\\n * Modifications:\\n * 1. Consolidate OwnableStorage into this contract (7/13/18)\\n * 2. Reformat, conform to Solidity 0.6 syntax, and add error messages (5/13/20)\\n * 3. Make public functions external (5/27/20)\\n */\\ncontract Ownable {\\n    // Owner of the contract\\n    address private _owner;\\n\\n    /**\\n     * @dev Event to show ownership has been transferred\\n     * @param previousOwner representing the address of the previous owner\\n     * @param newOwner representing the address of the new owner\\n     */\\n    event OwnershipTransferred(address previousOwner, address newOwner);\\n\\n    /**\\n     * @dev The constructor sets the original owner of the contract to the sender account.\\n     */\\n    constructor() {\\n        setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Tells the address of the owner\\n     * @return the address of the owner\\n     */\\n    function owner() external view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Sets a new owner address\\n     */\\n    function setOwner(address newOwner) internal {\\n        _owner = newOwner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(msg.sender == _owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n     * @param newOwner The address to transfer ownership to.\\n     */\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        setOwner(newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6ff2915581a585a32f8bf954661e820f08311cd4168a2aa9038ce0a2a44e3ae8\",\"license\":\"MIT\"},\"src/usdc/impl/v1/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/**\\n *\\n * Copyright (c) 2016 Smart Contract Solutions, Inc.\\n * Copyright (c) 2018-2020 CENTRE SECZ\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n * SOFTWARE.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { Ownable } from \\\"./Ownable.sol\\\";\\n\\n/**\\n * @notice Base contract which allows children to implement an emergency stop\\n * mechanism\\n * @dev Forked from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/feb665136c0dae9912e08397c1a21c4af3651ef3/contracts/lifecycle/Pausable.sol\\n * Modifications:\\n * 1. Added pauser role, switched pause/unpause to be onlyPauser (6/14/2018)\\n * 2. Removed whenNotPause/whenPaused from pause/unpause (6/14/2018)\\n * 3. Removed whenPaused (6/14/2018)\\n * 4. Switches ownable library to use ZeppelinOS (7/12/18)\\n * 5. Remove constructor (7/13/18)\\n * 6. Reformat, conform to Solidity 0.6 syntax and add error messages (5/13/20)\\n * 7. Make public functions external (5/27/20)\\n */\\ncontract Pausable is Ownable {\\n    event Pause();\\n    event Unpause();\\n    event PauserChanged(address indexed newAddress);\\n\\n    address public pauser;\\n    bool public paused = false;\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev throws if called by any account other than the pauser\\n     */\\n    modifier onlyPauser() {\\n        require(msg.sender == pauser, \\\"Pausable: caller is not the pauser\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev called by the owner to pause, triggers stopped state\\n     */\\n    function pause() external onlyPauser {\\n        paused = true;\\n        emit Pause();\\n    }\\n\\n    /**\\n     * @dev called by the owner to unpause, returns to normal state\\n     */\\n    function unpause() external onlyPauser {\\n        paused = false;\\n        emit Unpause();\\n    }\\n\\n    /**\\n     * @notice Updates the pauser address.\\n     * @param _newPauser The address of the new pauser.\\n     */\\n    function updatePauser(address _newPauser) external onlyOwner {\\n        require(_newPauser != address(0), \\\"Pausable: new pauser is the zero address\\\");\\n        pauser = _newPauser;\\n        emit PauserChanged(pauser);\\n    }\\n}\\n\",\"keccak256\":\"0xbbb9b78320ddd3a74ec35c797c8c1e22b2ac24fc42f4be41a2c7ab27e26bbfaa\",\"license\":\"MIT\"},\"src/usdc/impl/v2/AbstractFiatTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { AbstractFiatTokenV1 } from \\\"../v1/AbstractFiatTokenV1.sol\\\";\\n\\nabstract contract AbstractFiatTokenV2 is AbstractFiatTokenV1 {\\n    function _increaseAllowance(address owner, address spender, uint256 increment) internal virtual;\\n\\n    function _decreaseAllowance(address owner, address spender, uint256 decrement) internal virtual;\\n}\\n\",\"keccak256\":\"0x0e93fa12a6002dc9184b5e47e89fa6ad6b4f8b4676e74b12aa57e17118d664d5\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v2/EIP2612.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { AbstractFiatTokenV2 } from \\\"./AbstractFiatTokenV2.sol\\\";\\nimport { EIP712Domain } from \\\"./EIP712Domain.sol\\\";\\nimport { MessageHashUtils } from \\\"../util/MessageHashUtils.sol\\\";\\nimport { SignatureChecker } from \\\"../util/SignatureChecker.sol\\\";\\n\\n/**\\n * @title EIP-2612\\n * @notice Provide internal implementation for gas-abstracted approvals\\n */\\nabstract contract EIP2612 is AbstractFiatTokenV2, EIP712Domain {\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) private _permitNonces;\\n\\n    /**\\n     * @notice Nonces for permit\\n     * @param owner Token owner's address (Authorizer)\\n     * @return Next nonce\\n     */\\n    function nonces(address owner) external view returns (uint256) {\\n        return _permitNonces[owner];\\n    }\\n\\n    /**\\n     * @notice Verify a signed approval permit and execute if valid\\n     * @param owner     Token owner's address (Authorizer)\\n     * @param spender   Spender's address\\n     * @param value     Amount of allowance\\n     * @param deadline  The time at which the signature expires (unix time), or max uint256 value to signal no expiration\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     */\\n    function _permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _permit(owner, spender, value, deadline, abi.encodePacked(r, s, v));\\n    }\\n\\n    /**\\n     * @notice Verify a signed approval permit and execute if valid\\n     * @dev EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param owner      Token owner's address (Authorizer)\\n     * @param spender    Spender's address\\n     * @param value      Amount of allowance\\n     * @param deadline   The time at which the signature expires (unix time), or max uint256 value to signal no expiration\\n     * @param signature  Signature byte array signed by an EOA wallet or a contract wallet\\n     */\\n    function _permit(address owner, address spender, uint256 value, uint256 deadline, bytes memory signature) internal {\\n        require(deadline == type(uint256).max || deadline >= block.timestamp, \\\"FiatTokenV2: permit is expired\\\");\\n\\n        bytes32 typedDataHash = MessageHashUtils.toTypedDataHash(\\n            _domainSeparator(),\\n            keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _permitNonces[owner]++, deadline))\\n        );\\n        require(SignatureChecker.isValidSignatureNow(owner, typedDataHash, signature), \\\"EIP2612: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n}\\n\",\"keccak256\":\"0xadb9798b2374a193fe81786e1d38e920b5c12e6a797e3acfef2dabb3d24fd5cf\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v2/EIP3009.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { AbstractFiatTokenV2 } from \\\"./AbstractFiatTokenV2.sol\\\";\\nimport { EIP712Domain } from \\\"./EIP712Domain.sol\\\";\\nimport { SignatureChecker } from \\\"../util/SignatureChecker.sol\\\";\\nimport { MessageHashUtils } from \\\"../util/MessageHashUtils.sol\\\";\\n\\n/**\\n * @title EIP-3009\\n * @notice Provide internal implementation for gas-abstracted transfers\\n * @dev Contracts that inherit from this must wrap these with publicly\\n * accessible functions, optionally adding modifiers where necessary\\n */\\nabstract contract EIP3009 is AbstractFiatTokenV2, EIP712Domain {\\n    // keccak256(\\\"TransferWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH =\\n        0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267;\\n\\n    // keccak256(\\\"ReceiveWithAuthorization(address from,address to,uint256 value,uint256 validAfter,uint256 validBefore,bytes32 nonce)\\\")\\n    bytes32 public constant RECEIVE_WITH_AUTHORIZATION_TYPEHASH =\\n        0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8;\\n\\n    // keccak256(\\\"CancelAuthorization(address authorizer,bytes32 nonce)\\\")\\n    bytes32 public constant CANCEL_AUTHORIZATION_TYPEHASH =\\n        0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429;\\n\\n    /**\\n     * @dev authorizer address => nonce => bool (true if nonce is used)\\n     */\\n    mapping(address => mapping(bytes32 => bool)) private _authorizationStates;\\n\\n    event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce);\\n    event AuthorizationCanceled(address indexed authorizer, bytes32 indexed nonce);\\n\\n    /**\\n     * @notice Returns the state of an authorization\\n     * @dev Nonces are randomly generated 32-byte data unique to the\\n     * authorizer's address\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @return True if the nonce is used\\n     */\\n    function authorizationState(address authorizer, bytes32 nonce) external view returns (bool) {\\n        return _authorizationStates[authorizer][nonce];\\n    }\\n\\n    /**\\n     * @notice Execute a transfer with a signed authorization\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _transferWithAuthorization(from, to, value, validAfter, validBefore, nonce, abi.encodePacked(r, s, v));\\n    }\\n\\n    /**\\n     * @notice Execute a transfer with a signed authorization\\n     * @dev EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param signature     Signature byte array produced by an EOA wallet or a contract wallet\\n     */\\n    function _transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        bytes memory signature\\n    ) internal {\\n        _requireValidAuthorization(from, nonce, validAfter, validBefore);\\n        _requireValidSignature(\\n            from,\\n            keccak256(\\n                abi.encode(TRANSFER_WITH_AUTHORIZATION_TYPEHASH, from, to, value, validAfter, validBefore, nonce)\\n            ),\\n            signature\\n        );\\n\\n        _markAuthorizationAsUsed(from, nonce);\\n        _transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @notice Receive a transfer with a signed authorization from the payer\\n     * @dev This has an additional check to ensure that the payee's address\\n     * matches the caller of this function to prevent front-running attacks.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        _receiveWithAuthorization(from, to, value, validAfter, validBefore, nonce, abi.encodePacked(r, s, v));\\n    }\\n\\n    /**\\n     * @notice Receive a transfer with a signed authorization from the payer\\n     * @dev This has an additional check to ensure that the payee's address\\n     * matches the caller of this function to prevent front-running attacks.\\n     * EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param signature     Signature byte array produced by an EOA wallet or a contract wallet\\n     */\\n    function _receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        bytes memory signature\\n    ) internal {\\n        require(to == msg.sender, \\\"FiatTokenV2: caller must be the payee\\\");\\n        _requireValidAuthorization(from, nonce, validAfter, validBefore);\\n        _requireValidSignature(\\n            from,\\n            keccak256(abi.encode(RECEIVE_WITH_AUTHORIZATION_TYPEHASH, from, to, value, validAfter, validBefore, nonce)),\\n            signature\\n        );\\n\\n        _markAuthorizationAsUsed(from, nonce);\\n        _transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function _cancelAuthorization(address authorizer, bytes32 nonce, uint8 v, bytes32 r, bytes32 s) internal {\\n        _cancelAuthorization(authorizer, nonce, abi.encodePacked(r, s, v));\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @dev EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param signature     Signature byte array produced by an EOA wallet or a contract wallet\\n     */\\n    function _cancelAuthorization(address authorizer, bytes32 nonce, bytes memory signature) internal {\\n        _requireUnusedAuthorization(authorizer, nonce);\\n        _requireValidSignature(\\n            authorizer,\\n            keccak256(abi.encode(CANCEL_AUTHORIZATION_TYPEHASH, authorizer, nonce)),\\n            signature\\n        );\\n\\n        _authorizationStates[authorizer][nonce] = true;\\n        emit AuthorizationCanceled(authorizer, nonce);\\n    }\\n\\n    /**\\n     * @notice Validates that signature against input data struct\\n     * @param signer        Signer's address\\n     * @param dataHash      Hash of encoded data struct\\n     * @param signature     Signature byte array produced by an EOA wallet or a contract wallet\\n     */\\n    function _requireValidSignature(address signer, bytes32 dataHash, bytes memory signature) private view {\\n        require(\\n            SignatureChecker.isValidSignatureNow(\\n                signer,\\n                MessageHashUtils.toTypedDataHash(_domainSeparator(), dataHash),\\n                signature\\n            ),\\n            \\\"FiatTokenV2: invalid signature\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Check that an authorization is unused\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     */\\n    function _requireUnusedAuthorization(address authorizer, bytes32 nonce) private view {\\n        require(!_authorizationStates[authorizer][nonce], \\\"FiatTokenV2: authorization is used or canceled\\\");\\n    }\\n\\n    /**\\n     * @notice Check that authorization is valid\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     */\\n    function _requireValidAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint256 validAfter,\\n        uint256 validBefore\\n    ) private view {\\n        require(block.timestamp > validAfter, \\\"FiatTokenV2: authorization is not yet valid\\\");\\n        require(block.timestamp < validBefore, \\\"FiatTokenV2: authorization is expired\\\");\\n        _requireUnusedAuthorization(authorizer, nonce);\\n    }\\n\\n    /**\\n     * @notice Mark an authorization as used\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     */\\n    function _markAuthorizationAsUsed(address authorizer, bytes32 nonce) private {\\n        _authorizationStates[authorizer][nonce] = true;\\n        emit AuthorizationUsed(authorizer, nonce);\\n    }\\n}\\n\",\"keccak256\":\"0x3a0d2ade09126f2553e90e3fef43401e77ad75f5c1c78b9d3f5181bcac871d3d\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v2/EIP712Domain.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @title EIP712 Domain\\n */\\ncontract EIP712Domain {\\n    // was originally DOMAIN_SEPARATOR\\n    // but that has been moved to a method so we can override it in V2_2+\\n    bytes32 internal _DEPRECATED_CACHED_DOMAIN_SEPARATOR;\\n\\n    /**\\n     * @notice Get the EIP712 Domain Separator.\\n     * @return The bytes32 EIP712 domain separator.\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparator();\\n    }\\n\\n    /**\\n     * @dev Internal method to get the EIP712 Domain Separator.\\n     * @return The bytes32 EIP712 domain separator.\\n     */\\n    function _domainSeparator() internal view virtual returns (bytes32) {\\n        return _DEPRECATED_CACHED_DOMAIN_SEPARATOR;\\n    }\\n}\\n\",\"keccak256\":\"0xb23cb487e6e1183ae2fad54a93cde0519108f06f6b7471cf71752d52953ef788\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v2/FiatTokenV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { FiatTokenV1_1 } from \\\"../v1.1/FiatTokenV1_1.sol\\\";\\nimport { EIP712 } from \\\"../util/EIP712.sol\\\";\\nimport { EIP3009 } from \\\"./EIP3009.sol\\\";\\nimport { EIP2612 } from \\\"./EIP2612.sol\\\";\\n\\n/**\\n * @title FiatToken V2\\n * @notice ERC20 Token backed by fiat reserves, version 2\\n */\\ncontract FiatTokenV2 is FiatTokenV1_1, EIP3009, EIP2612 {\\n    uint8 internal _initializedVersion;\\n\\n    /**\\n     * @notice Initialize v2\\n     * @param newName   New token name\\n     */\\n    function initializeV2(string calldata newName) external {\\n        // solhint-disable-next-line reason-string\\n        require(initialized && _initializedVersion == 0);\\n        name = newName;\\n        _DEPRECATED_CACHED_DOMAIN_SEPARATOR = EIP712.makeDomainSeparator(newName, \\\"2\\\");\\n        _initializedVersion = 1;\\n    }\\n\\n    /**\\n     * @notice Increase the allowance by a given increment\\n     * @param spender   Spender's address\\n     * @param increment Amount of increase in allowance\\n     * @return True if successful\\n     */\\n    function increaseAllowance(\\n        address spender,\\n        uint256 increment\\n    ) external virtual whenNotPaused notBlacklisted(msg.sender) notBlacklisted(spender) returns (bool) {\\n        _increaseAllowance(msg.sender, spender, increment);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Decrease the allowance by a given decrement\\n     * @param spender   Spender's address\\n     * @param decrement Amount of decrease in allowance\\n     * @return True if successful\\n     */\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 decrement\\n    ) external virtual whenNotPaused notBlacklisted(msg.sender) notBlacklisted(spender) returns (bool) {\\n        _decreaseAllowance(msg.sender, spender, decrement);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Execute a transfer with a signed authorization\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) {\\n        _transferWithAuthorization(from, to, value, validAfter, validBefore, nonce, v, r, s);\\n    }\\n\\n    /**\\n     * @notice Receive a transfer with a signed authorization from the payer\\n     * @dev This has an additional check to ensure that the payee's address\\n     * matches the caller of this function to prevent front-running attacks.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) {\\n        _receiveWithAuthorization(from, to, value, validAfter, validBefore, nonce, v, r, s);\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @dev Works only if the authorization is not yet used.\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param v             v of the signature\\n     * @param r             r of the signature\\n     * @param s             s of the signature\\n     */\\n    function cancelAuthorization(\\n        address authorizer,\\n        bytes32 nonce,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external whenNotPaused {\\n        _cancelAuthorization(authorizer, nonce, v, r, s);\\n    }\\n\\n    /**\\n     * @notice Update allowance with a signed permit\\n     * @param owner       Token owner's address (Authorizer)\\n     * @param spender     Spender's address\\n     * @param value       Amount of allowance\\n     * @param deadline    The time at which the signature expires (unix time), or max uint256 value to signal no expiration\\n     * @param v           v of the signature\\n     * @param r           r of the signature\\n     * @param s           s of the signature\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual whenNotPaused notBlacklisted(owner) notBlacklisted(spender) {\\n        _permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Internal function to increase the allowance by a given increment\\n     * @param owner     Token owner's address\\n     * @param spender   Spender's address\\n     * @param increment Amount of increase\\n     */\\n    function _increaseAllowance(address owner, address spender, uint256 increment) internal override {\\n        _approve(owner, spender, allowed[owner][spender] + increment);\\n    }\\n\\n    /**\\n     * @dev Internal function to decrease the allowance by a given decrement\\n     * @param owner     Token owner's address\\n     * @param spender   Spender's address\\n     * @param decrement Amount of decrease\\n     */\\n    function _decreaseAllowance(address owner, address spender, uint256 decrement) internal override {\\n        uint256 allowance = allowed[owner][spender];\\n        require(decrement <= allowance, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(owner, spender, allowed[owner][spender] - decrement);\\n    }\\n}\\n\",\"keccak256\":\"0xc36f6a5589a0f7464ff80ddc772a647c2dfdcad26333f3aac480025099e27e6f\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v2/FiatTokenV2_1.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { FiatTokenV2 } from \\\"./FiatTokenV2.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @title FiatToken V2.1\\n * @notice ERC20 Token backed by fiat reserves, version 2.1\\n */\\ncontract FiatTokenV2_1 is FiatTokenV2 {\\n    /**\\n     * @notice Initialize v2.1\\n     * @param lostAndFound  The address to which the locked funds are sent\\n     */\\n    function initializeV2_1(address lostAndFound) external {\\n        // solhint-disable-next-line reason-string\\n        require(_initializedVersion == 1);\\n\\n        uint256 lockedAmount = _balanceOf(address(this));\\n        if (lockedAmount > 0) {\\n            _transfer(address(this), lostAndFound, lockedAmount);\\n        }\\n        _blacklist(address(this));\\n\\n        _initializedVersion = 2;\\n    }\\n\\n    /**\\n     * @notice Version string for the EIP712 domain separator\\n     * @return Version string\\n     */\\n    function version() external pure returns (string memory) {\\n        return \\\"2\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x69103b611137e102e286239e5b4d4e4610c4d570f3ca4564cbc76a9ebc179bf6\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/v2/FiatTokenV2_2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { EIP712Domain } from \\\"./EIP712Domain.sol\\\"; // solhint-disable-line no-unused-import\\nimport { Blacklistable } from \\\"../v1/Blacklistable.sol\\\"; // solhint-disable-line no-unused-import\\nimport { FiatTokenV1 } from \\\"../v1/FiatTokenV1.sol\\\"; // solhint-disable-line no-unused-import\\nimport { FiatTokenV2 } from \\\"./FiatTokenV2.sol\\\"; // solhint-disable-line no-unused-import\\nimport { FiatTokenV2_1 } from \\\"./FiatTokenV2_1.sol\\\";\\nimport { EIP712 } from \\\"../util/EIP712.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\n/**\\n * @title FiatToken V2.2\\n * @notice ERC20 Token backed by fiat reserves, version 2.2\\n */\\ncontract FiatTokenV2_2 is FiatTokenV2_1 {\\n    using SafeERC20 for IERC20;\\n    /**\\n     * @notice Initialize v2.2\\n     * @param accountsToBlacklist   A list of accounts to migrate from the old blacklist\\n     * @param newSymbol             New token symbol\\n     * data structure to the new blacklist data structure.\\n     */\\n    function initializeV2_2(address[] calldata accountsToBlacklist, string calldata newSymbol) external {\\n        // solhint-disable-next-line reason-string\\n        require(_initializedVersion == 2);\\n\\n        // Update fiat token symbol\\n        symbol = newSymbol;\\n\\n        // Add previously blacklisted accounts to the new blacklist data structure\\n        // and remove them from the old blacklist data structure.\\n        for (uint256 i = 0; i < accountsToBlacklist.length; i++) {\\n            require(\\n                _deprecatedBlacklisted[accountsToBlacklist[i]],\\n                \\\"FiatTokenV2_2: Blacklisting previously unblacklisted account!\\\"\\n            );\\n            _blacklist(accountsToBlacklist[i]);\\n            delete _deprecatedBlacklisted[accountsToBlacklist[i]];\\n        }\\n        _blacklist(address(this));\\n        delete _deprecatedBlacklisted[address(this)];\\n\\n        _initializedVersion = 3;\\n    }\\n\\n    /**\\n     * @dev Internal function to get the current chain id.\\n     * @return The current chain id.\\n     */\\n    function _chainId() internal view virtual returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n\\n    /**\\n     * @inheritdoc EIP712Domain\\n     */\\n    function _domainSeparator() internal view override returns (bytes32) {\\n        return EIP712.makeDomainSeparator(name, \\\"2\\\", _chainId());\\n    }\\n\\n    /**\\n     * @notice Update allowance with a signed permit\\n     * @dev EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param owner       Token owner's address (Authorizer)\\n     * @param spender     Spender's address\\n     * @param value       Amount of allowance\\n     * @param deadline    The time at which the signature expires (unix time), or max uint256 value to signal no expiration\\n     * @param signature   Signature bytes signed by an EOA wallet or a contract wallet\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        bytes memory signature\\n    ) external whenNotPaused {\\n        _permit(owner, spender, value, deadline, signature);\\n    }\\n\\n    /**\\n     * @notice Execute a transfer with a signed authorization\\n     * @dev EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param signature     Signature bytes signed by an EOA wallet or a contract wallet\\n     */\\n    function transferWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        bytes memory signature\\n    ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) {\\n        _transferWithAuthorization(from, to, value, validAfter, validBefore, nonce, signature);\\n    }\\n\\n    /**\\n     * @notice Receive a transfer with a signed authorization from the payer\\n     * @dev This has an additional check to ensure that the payee's address\\n     * matches the caller of this function to prevent front-running attacks.\\n     * EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param from          Payer's address (Authorizer)\\n     * @param to            Payee's address\\n     * @param value         Amount to be transferred\\n     * @param validAfter    The time after which this is valid (unix time)\\n     * @param validBefore   The time before which this is valid (unix time)\\n     * @param nonce         Unique nonce\\n     * @param signature     Signature bytes signed by an EOA wallet or a contract wallet\\n     */\\n    function receiveWithAuthorization(\\n        address from,\\n        address to,\\n        uint256 value,\\n        uint256 validAfter,\\n        uint256 validBefore,\\n        bytes32 nonce,\\n        bytes memory signature\\n    ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) {\\n        _receiveWithAuthorization(from, to, value, validAfter, validBefore, nonce, signature);\\n    }\\n\\n    /**\\n     * @notice Attempt to cancel an authorization\\n     * @dev Works only if the authorization is not yet used.\\n     * EOA wallet signatures should be packed in the order of r, s, v.\\n     * @param authorizer    Authorizer's address\\n     * @param nonce         Nonce of the authorization\\n     * @param signature     Signature bytes signed by an EOA wallet or a contract wallet\\n     */\\n    function cancelAuthorization(address authorizer, bytes32 nonce, bytes memory signature) external whenNotPaused {\\n        _cancelAuthorization(authorizer, nonce, signature);\\n    }\\n\\n    /**\\n     * @dev Helper method that sets the blacklist state of an account on balanceAndBlacklistStates.\\n     * If _shouldBlacklist is true, we apply a (1 << 255) bitmask with an OR operation on the\\n     * account's balanceAndBlacklistState. This flips the high bit for the account to 1,\\n     * indicating that the account is blacklisted.\\n     *\\n     * If _shouldBlacklist if false, we reset the account's balanceAndBlacklistStates to their\\n     * balances. This clears the high bit for the account, indicating that the account is unblacklisted.\\n     * @param _account         The address of the account.\\n     * @param _shouldBlacklist True if the account should be blacklisted, false if the account should be unblacklisted.\\n     */\\n    function _setBlacklistState(address _account, bool _shouldBlacklist) internal override {\\n        balanceAndBlacklistStates[_account] = _shouldBlacklist\\n            ? balanceAndBlacklistStates[_account] | (1 << 255)\\n            : _balanceOf(_account);\\n    }\\n\\n    /**\\n     * @dev Helper method that sets the balance of an account on balanceAndBlacklistStates.\\n     * Since balances are stored in the last 255 bits of the balanceAndBlacklistStates value,\\n     * we need to ensure that the updated balance does not exceed (2^255 - 1).\\n     * Since blacklisted accounts' balances cannot be updated, the method will also\\n     * revert if the account is blacklisted\\n     * @param _account The address of the account.\\n     * @param _balance The new fiat token balance of the account (max: (2^255 - 1)).\\n     */\\n    function _setBalance(address _account, uint256 _balance) internal override {\\n        require(_balance <= ((1 << 255) - 1), \\\"FiatTokenV2_2: Balance exceeds (2^255 - 1)\\\");\\n        require(!_isBlacklisted(_account), \\\"FiatTokenV2_2: Account is blacklisted\\\");\\n\\n        balanceAndBlacklistStates[_account] = _balance;\\n    }\\n\\n    /**\\n     * @inheritdoc Blacklistable\\n     */\\n    function _isBlacklisted(address _account) internal view override returns (bool) {\\n        return balanceAndBlacklistStates[_account] >> 255 == 1;\\n    }\\n\\n    /**\\n     * @dev Helper method to obtain the balance of an account. Since balances\\n     * are stored in the last 255 bits of the balanceAndBlacklistStates value,\\n     * we apply a ((1 << 255) - 1) bit bitmask with an AND operation on the\\n     * balanceAndBlacklistState to obtain the balance.\\n     * @param _account  The address of the account.\\n     * @return          The fiat token balance of the account.\\n     */\\n    function _balanceOf(address _account) internal view override returns (uint256) {\\n        return balanceAndBlacklistStates[_account] & ((1 << 255) - 1);\\n    }\\n\\n    /**\\n     * @inheritdoc FiatTokenV1\\n     */\\n    function approve(\\n        address spender,\\n        uint256 value\\n    ) external override(FiatTokenV1, IERC20) whenNotPaused returns (bool) {\\n        _approve(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc FiatTokenV2\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override whenNotPaused {\\n        _permit(owner, spender, value, deadline, v, r, s);\\n    }\\n\\n    /**\\n     * @inheritdoc FiatTokenV2\\n     */\\n    function increaseAllowance(address spender, uint256 increment) external override whenNotPaused returns (bool) {\\n        _increaseAllowance(msg.sender, spender, increment);\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc FiatTokenV2\\n     */\\n    function decreaseAllowance(address spender, uint256 decrement) external override whenNotPaused returns (bool) {\\n        _decreaseAllowance(msg.sender, spender, decrement);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xe7c5e39812002f7e2ce2be39cf7d4745740143405ed53f0baa978800eb879b6c\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061036d5760003560e01c80638456cb59116101d3578063b7b7289911610104578063e3ee160e116100a2578063ef55bec61161007c578063ef55bec614610848578063f2fde38b1461085b578063f9f92be41461086e578063fe575a871461088157600080fd5b8063e3ee160e146107f4578063e5a6b10f14610807578063e94a01021461080f57600080fd5b8063d505accf116100de578063d505accf1461076e578063d608ea6414610781578063d916948714610794578063dd62ed3e146107bb57600080fd5b8063b7b7289914610735578063bd10243014610748578063cf0929951461075b57600080fd5b8063a0cc6a6811610171578063aa20e1e41161014b578063aa20e1e4146106d0578063aa271e1a146106e3578063ad38bf221461070f578063b2118a8d1461072257600080fd5b8063a0cc6a6814610683578063a457c2d7146106aa578063a9059cbb146106bd57600080fd5b80638da5cb5b116101ad5780638da5cb5b1461064457806395d89b41146106555780639fd0506d1461065d5780639fd5a6cf1461067057600080fd5b80638456cb591461060057806388b7ab63146106085780638a6db9c31461061b57600080fd5b806338a63183116102ad57806354fd4d501161024b5780635c975abb116102255780635c975abb1461058957806370a082311461059d5780637ecebe00146105b05780637f2eecc3146105d957600080fd5b806354fd4d501461052a578063554bab3c146105635780635a049a701461057657600080fd5b806340c10f191161028757806340c10f19146104de57806342966c68146104f1578063430239b4146105045780634e44d9561461051757600080fd5b806338a63183146104b257806339509351146104c35780633f4ba83a146104d657600080fd5b80632fc81e091161031a578063313ce567116102f4578063313ce5671461044d5780633357162b1461046c57806335d99f351461047f5780633644e515146104aa57600080fd5b80632fc81e09146104005780633092afd51461041357806330adf81f1461042657600080fd5b80631a8952661161034b5780631a895266146103c557806323b872dd146103da5780632ab60045146103ed57600080fd5b806306fdde0314610372578063095ea7b31461039057806318160ddd146103b3575b600080fd5b61037a610894565b6040516103879190614394565b60405180910390f35b6103a361039e3660046143ce565b610922565b6040519015158152602001610387565b600b545b604051908152602001610387565b6103d86103d33660046143fa565b61098c565b005b6103a36103e8366004614417565b610a4c565b6103d86103fb3660046143fa565b610d07565b6103d861040e3660046143fa565b610e3f565b6103a36104213660046143fa565b610eae565b6103b77f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60065461045a9060ff1681565b60405160ff9091168152602001610387565b6103d861047a366004614525565b610f8d565b600854610492906001600160a01b031681565b6040516001600160a01b039091168152602001610387565b6103b76112cd565b600e546001600160a01b0316610492565b6103a36104d13660046143ce565b6112dc565b6103d8611337565b6103a36104ec3660046143ce565b61140a565b6103d86104ff366004614601565b611850565b6103d8610512366004614663565b611b3f565b6103a36105253660046143ce565b611ce0565b60408051808201909152600181527f3200000000000000000000000000000000000000000000000000000000000000602082015261037a565b6103d86105713660046143fa565b611e1a565b6103d86105843660046146fd565b611f52565b6001546103a390600160a01b900460ff1681565b6103b76105ab3660046143fa565b611fb3565b6103b76105be3660046143fa565b6001600160a01b031660009081526011602052604090205490565b6103b77fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de881565b6103d8611ff3565b6103d861061636600461474d565b6120cc565b6103b76106293660046143fa565b6001600160a01b03166000908152600d602052604090205490565b6000546001600160a01b0316610492565b61037a612229565b600154610492906001600160a01b031681565b6103d861067e3660046147d6565b612236565b6103b77f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226781565b6103a36106b83660046143ce565b612290565b6103a36106cb3660046143ce565b6122eb565b6103d86106de3660046143fa565b61243c565b6103a36106f13660046143fa565b6001600160a01b03166000908152600c602052604090205460ff1690565b6103d861071d3660046143fa565b612574565b6103d8610730366004614417565b6126ac565b6103d861074336600461484c565b612744565b600254610492906001600160a01b031681565b6103d861076936600461474d565b61279c565b6103d861077c3660046148a5565b6128ee565b6103d861078f366004614913565b612953565b6103b77f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742981565b6103b76107c9366004614955565b6001600160a01b039182166000908152600a6020908152604080832093909416825291909152205490565b6103d861080236600461498e565b612a0e565b61037a612b6f565b6103a361081d3660046143ce565b6001600160a01b03919091166000908152601060209081526040808320938352929052205460ff1690565b6103d861085636600461498e565b612b7c565b6103d86108693660046143fa565b612cd0565b6103d861087c3660046143fa565b612e26565b6103a361088f3660046143fa565b612ee6565b600480546108a190614a10565b80601f01602080910402602001604051908101604052809291908181526020018280546108cd90614a10565b801561091a5780601f106108ef5761010080835404028352916020019161091a565b820191906000526020600020905b8154815290600101906020018083116108fd57829003601f168201915b505050505081565b600154600090600160a01b900460ff16156109775760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064015b60405180910390fd5b610982338484612f0a565b5060015b92915050565b6002546001600160a01b03163314610a0c5760405162461bcd60e51b815260206004820152602c60248201527f426c61636b6c69737461626c653a2063616c6c6572206973206e6f742074686560448201527f20626c61636b6c69737465720000000000000000000000000000000000000000606482015260840161096e565b610a158161305a565b6040516001600160a01b038216907f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e90600090a250565b600154600090600160a01b900460ff1615610a9c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b3360008181526009602052604090205460ff1c600103610b0c5760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b6001600160a01b038516600090815260096020526040902054859060ff1c600103610b875760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b6001600160a01b038516600090815260096020526040902054859060ff1c600103610c025760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b6001600160a01b0387166000908152600a60209081526040808320338452909152902054851115610c9b5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000606482015260840161096e565b610ca6878787613065565b6001600160a01b0387166000908152600a60209081526040808320338452909152902054610cd5908690614a92565b6001600160a01b0388166000908152600a60209081526040808320338452909152902055600193505050509392505050565b6000546001600160a01b03163314610d615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161096e565b6001600160a01b038116610ddd5760405162461bcd60e51b815260206004820152602a60248201527f526573637561626c653a206e6577207265736375657220697320746865207a6560448201527f726f206164647265737300000000000000000000000000000000000000000000606482015260840161096e565b600e80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fe475e580d85111348e40d8ca33cfdd74c30fe1655c2d8537a13abc10065ffa5a90600090a250565b60125460ff16600114610e5157600080fd5b306000908152600960205260409020547f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff168015610e9457610e94308383613065565b610e9d306132e8565b50506012805460ff19166002179055565b6008546000906001600160a01b03163314610f315760405162461bcd60e51b815260206004820152602960248201527f46696174546f6b656e3a2063616c6c6572206973206e6f7420746865206d617360448201527f7465724d696e7465720000000000000000000000000000000000000000000000606482015260840161096e565b6001600160a01b0382166000818152600c60209081526040808320805460ff19169055600d909152808220829055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a25060015b919050565b600854600160a01b900460ff161561100d5760405162461bcd60e51b815260206004820152602a60248201527f46696174546f6b656e3a20636f6e747261637420697320616c7265616479206960448201527f6e697469616c697a656400000000000000000000000000000000000000000000606482015260840161096e565b6001600160a01b0384166110895760405162461bcd60e51b815260206004820152602f60248201527f46696174546f6b656e3a206e6577206d61737465724d696e746572206973207460448201527f6865207a65726f20616464726573730000000000000000000000000000000000606482015260840161096e565b6001600160a01b0383166111055760405162461bcd60e51b815260206004820152602960248201527f46696174546f6b656e3a206e65772070617573657220697320746865207a657260448201527f6f20616464726573730000000000000000000000000000000000000000000000606482015260840161096e565b6001600160a01b0382166111815760405162461bcd60e51b815260206004820152602e60248201527f46696174546f6b656e3a206e657720626c61636b6c697374657220697320746860448201527f65207a65726f2061646472657373000000000000000000000000000000000000606482015260840161096e565b6001600160a01b0381166111fd5760405162461bcd60e51b815260206004820152602860248201527f46696174546f6b656e3a206e6577206f776e657220697320746865207a65726f60448201527f2061646472657373000000000000000000000000000000000000000000000000606482015260840161096e565b60046112098982614aed565b5060056112168882614aed565b5060076112238782614aed565b506006805460ff191660ff8716179055600880547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b0387811691909117909255600180548216868416179055600280548216858416179055600080549091169183169190911790555050600880547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b179055505050505050565b60006112d76132f3565b905090565b600154600090600160a01b900460ff161561132c5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b610982338484613434565b6001546001600160a01b031633146113b75760405162461bcd60e51b815260206004820152602260248201527f5061757361626c653a2063616c6c6572206973206e6f7420746865207061757360448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161096e565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600154600090600160a01b900460ff161561145a5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b336000908152600c602052604090205460ff166114df5760405162461bcd60e51b815260206004820152602160248201527f46696174546f6b656e3a2063616c6c6572206973206e6f742061206d696e746560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161096e565b3360008181526009602052604090205460ff1c60010361154f5760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b6001600160a01b038416600090815260096020526040902054849060ff1c6001036115ca5760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b6001600160a01b0385166116465760405162461bcd60e51b815260206004820152602360248201527f46696174546f6b656e3a206d696e7420746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161096e565b600084116116bc5760405162461bcd60e51b815260206004820152602960248201527f46696174546f6b656e3a206d696e7420616d6f756e74206e6f7420677265617460448201527f6572207468616e20300000000000000000000000000000000000000000000000606482015260840161096e565b336000908152600d6020526040902054808511156117425760405162461bcd60e51b815260206004820152602e60248201527f46696174546f6b656e3a206d696e7420616d6f756e742065786365656473206d60448201527f696e746572416c6c6f77616e6365000000000000000000000000000000000000606482015260840161096e565b84600b546117509190614bad565b600b556117a88686611799826001600160a01b03166000908152600960205260409020547f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b6117a39190614bad565b613472565b6117b28582614a92565b336000818152600d602090815260409182902093909355518781526001600160a01b038916927fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8910160405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a350600195945050505050565b600154600160a01b900460ff161561189d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b336000908152600c602052604090205460ff166119225760405162461bcd60e51b815260206004820152602160248201527f46696174546f6b656e3a2063616c6c6572206973206e6f742061206d696e746560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161096e565b3360008181526009602052604090205460ff1c6001036119925760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b336000908152600960205260409020547f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1682611a375760405162461bcd60e51b815260206004820152602960248201527f46696174546f6b656e3a206275726e20616d6f756e74206e6f7420677265617460448201527f6572207468616e20300000000000000000000000000000000000000000000000606482015260840161096e565b82811015611aad5760405162461bcd60e51b815260206004820152602660248201527f46696174546f6b656e3a206275726e20616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161096e565b82600b54611abb9190614a92565b600b55611acc336117a38584614a92565b60405183815233907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59060200160405180910390a260405183815260009033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050565b60125460ff16600214611b5157600080fd5b6005611b5e828483614bc0565b5060005b83811015611ca75760036000868684818110611b8057611b80614c80565b9050602002016020810190611b9591906143fa565b6001600160a01b0316815260208101919091526040016000205460ff16611c245760405162461bcd60e51b815260206004820152603d60248201527f46696174546f6b656e56325f323a20426c61636b6c697374696e67207072657660448201527f696f75736c7920756e626c61636b6c6973746564206163636f756e7421000000606482015260840161096e565b611c53858583818110611c3957611c39614c80565b9050602002016020810190611c4e91906143fa565b6132e8565b60036000868684818110611c6957611c69614c80565b9050602002016020810190611c7e91906143fa565b6001600160a01b031681526020810191909152604001600020805460ff19169055600101611b62565b50611cb1306132e8565b5050306000908152600360208190526040909120805460ff199081169091556012805490911690911790555050565b600154600090600160a01b900460ff1615611d305760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b6008546001600160a01b03163314611db05760405162461bcd60e51b815260206004820152602960248201527f46696174546f6b656e3a2063616c6c6572206973206e6f7420746865206d617360448201527f7465724d696e7465720000000000000000000000000000000000000000000000606482015260840161096e565b6001600160a01b0383166000818152600c60209081526040808320805460ff19166001179055600d82529182902085905590518481527f46980fca912ef9bcdbd36877427b6b90e860769f604e89c0e67720cece530d20910160405180910390a250600192915050565b6000546001600160a01b03163314611e745760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161096e565b6001600160a01b038116611ef05760405162461bcd60e51b815260206004820152602860248201527f5061757361626c653a206e65772070617573657220697320746865207a65726f60448201527f2061646472657373000000000000000000000000000000000000000000000000606482015260840161096e565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a60490600090a250565b600154600160a01b900460ff1615611f9f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b611fac858585858561359d565b5050505050565b6001600160a01b0381166000908152600960205260408120547f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16610986565b6001546001600160a01b031633146120735760405162461bcd60e51b815260206004820152602260248201527f5061757361626c653a2063616c6c6572206973206e6f7420746865207061757360448201527f6572000000000000000000000000000000000000000000000000000000000000606482015260840161096e565b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16600160a01b1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600154600160a01b900460ff16156121195760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b6001600160a01b038716600090815260096020526040902054879060ff1c6001036121945760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b6001600160a01b038716600090815260096020526040902054879060ff1c60010361220f5760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b61221e898989898989896135f9565b505050505050505050565b600580546108a190614a10565b600154600160a01b900460ff16156122835760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b611fac858585858561371f565b600154600090600160a01b900460ff16156122e05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b610982338484613959565b600154600090600160a01b900460ff161561233b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b3360008181526009602052604090205460ff1c6001036123ab5760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b6001600160a01b038416600090815260096020526040902054849060ff1c6001036124265760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b612431338686613065565b506001949350505050565b6000546001600160a01b031633146124965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161096e565b6001600160a01b0381166125125760405162461bcd60e51b815260206004820152602f60248201527f46696174546f6b656e3a206e6577206d61737465724d696e746572206973207460448201527f6865207a65726f20616464726573730000000000000000000000000000000000606482015260840161096e565b600880547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fdb66dfa9c6b8f5226fe9aac7e51897ae8ee94ac31dc70bb6c9900b2574b707e690600090a250565b6000546001600160a01b031633146125ce5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161096e565b6001600160a01b03811661264a5760405162461bcd60e51b815260206004820152603260248201527f426c61636b6c69737461626c653a206e657720626c61636b6c6973746572206960448201527f7320746865207a65726f20616464726573730000000000000000000000000000606482015260840161096e565b600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517fc67398012c111ce95ecb7429b933096c977380ee6c421175a71a4a4c6c88c06e90600090a250565b600e546001600160a01b0316331461272b5760405162461bcd60e51b8152602060048201526024808201527f526573637561626c653a2063616c6c6572206973206e6f74207468652072657360448201527f6375657200000000000000000000000000000000000000000000000000000000606482015260840161096e565b61273f6001600160a01b0384168383613a34565b505050565b600154600160a01b900460ff16156127915760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b61273f838383613ab4565b600154600160a01b900460ff16156127e95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b6001600160a01b038716600090815260096020526040902054879060ff1c6001036128645760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b6001600160a01b038716600090815260096020526040902054879060ff1c6001036128df5760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b61221e89898989898989613b69565b600154600160a01b900460ff161561293b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b61294a87878787878787613be4565b50505050505050565b600854600160a01b900460ff16801561296f575060125460ff16155b61297857600080fd5b6004612985828483614bc0565b506129fa82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600181527f320000000000000000000000000000000000000000000000000000000000000060208201529150613c4a9050565b600f5550506012805460ff19166001179055565b600154600160a01b900460ff1615612a5b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b6001600160a01b038916600090815260096020526040902054899060ff1c600103612ad65760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b6001600160a01b038916600090815260096020526040902054899060ff1c600103612b515760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b612b628b8b8b8b8b8b8b8b8b613ccf565b5050505050505050505050565b600780546108a190614a10565b600154600160a01b900460ff1615612bc95760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161096e565b6001600160a01b038916600090815260096020526040902054899060ff1c600103612c445760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b6001600160a01b038916600090815260096020526040902054899060ff1c600103612cbf5760405162461bcd60e51b815260206004820152602560248201527f426c61636b6c69737461626c653a206163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b612b628b8b8b8b8b8b8b8b8b613d37565b6000546001600160a01b03163314612d2a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161096e565b6001600160a01b038116612da65760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161096e565b600054604080516001600160a01b03928316815291831660208301527f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0910160405180910390a1600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03831617905550565b50565b6002546001600160a01b03163314612ea65760405162461bcd60e51b815260206004820152602c60248201527f426c61636b6c69737461626c653a2063616c6c6572206973206e6f742074686560448201527f20626c61636b6c69737465720000000000000000000000000000000000000000606482015260840161096e565b612eaf816132e8565b6040516001600160a01b038216907fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b85590600090a250565b6001600160a01b03811660009081526009602052604081205460ff1c600114610986565b6001600160a01b038316612f855760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f7265737300000000000000000000000000000000000000000000000000000000606482015260840161096e565b6001600160a01b0382166130015760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f7373000000000000000000000000000000000000000000000000000000000000606482015260840161096e565b6001600160a01b038381166000818152600a602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101611b32565b612e23816000613d9f565b6001600160a01b0383166130e15760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161096e565b6001600160a01b03821661315d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f6573730000000000000000000000000000000000000000000000000000000000606482015260840161096e565b6001600160a01b0383166000908152600960205260409020547f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1681111561320d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161096e565b61325d8382613253866001600160a01b03166000908152600960205260409020547f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b6117a39190614a92565b6132a38282611799856001600160a01b03166000908152600960205260409020547f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690565b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611b3291815260200190565b612e23816001613d9f565b60006112d76004805461330590614a10565b80601f016020809104026020016040519081016040528092919081815260200182805461333190614a10565b801561337e5780601f106133535761010080835404028352916020019161337e565b820191906000526020600020905b81548152906001019060200180831161336157829003601f168201915b50505050506040518060400160405280600181526020017f32000000000000000000000000000000000000000000000000000000000000008152506133c04690565b8251602093840120825192840192909220604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8187015280820194909452606084019190915260808301919091523060a0808401919091528151808403909101815260c09092019052805191012090565b6001600160a01b038084166000908152600a602090815260408083209386168352929052205461273f908490849061346d908590614bad565b612f0a565b7f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8111156135085760405162461bcd60e51b815260206004820152602a60248201527f46696174546f6b656e56325f323a2042616c616e63652065786365656473202860448201527f325e323535202d20312900000000000000000000000000000000000000000000606482015260840161096e565b6001600160a01b03821660009081526009602052604090205460ff1c6001036135815760405162461bcd60e51b815260206004820152602560248201527f46696174546f6b656e56325f323a204163636f756e7420697320626c61636b6c6044820152641a5cdd195960da1b606482015260840161096e565b6001600160a01b03909116600090815260096020526040902055565b60408051602081018490529081018290527fff0000000000000000000000000000000000000000000000000000000000000060f885901b166060820152611fac9086908690606101604051602081830303815290604052613ab4565b6001600160a01b03861633146136775760405162461bcd60e51b815260206004820152602560248201527f46696174546f6b656e56323a2063616c6c6572206d757374206265207468652060448201527f7061796565000000000000000000000000000000000000000000000000000000606482015260840161096e565b61368387838686613e40565b604080517fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de860208201526001600160a01b03808a169282019290925290871660608201526080810186905260a0810185905260c0810184905260e0810183905261370a908890610100015b6040516020818303038152906040528051906020012083613f34565b6137148783614041565b61294a878787613065565b60001982148061372f5750428210155b61377b5760405162461bcd60e51b815260206004820152601e60248201527f46696174546f6b656e56323a207065726d697420697320657870697265640000604482015260640161096e565b60006138626137886132f3565b6001600160a01b038816600090815260116020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928b928b928b929091906137d683614caf565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001206040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b6040517f6ccea65200000000000000000000000000000000000000000000000000000000815290915073__$4aa58fbb4121ecfaea545b1f4293c2e7c7$__90636ccea652906138b990899085908790600401614cc9565b602060405180830381865af41580156138d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138fa9190614cfa565b6139465760405162461bcd60e51b815260206004820152601a60248201527f454950323631323a20696e76616c6964207369676e6174757265000000000000604482015260640161096e565b613951868686612f0a565b505050505050565b6001600160a01b038084166000908152600a6020908152604080832093861683529290522054808211156139f55760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161096e565b6001600160a01b038085166000908152600a6020908152604080832093871683529290522054613a2e908590859061346d908690614a92565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261273f90849061409b565b613abe8383614183565b604080517f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742960208201526001600160a01b0385169181019190915260608101839052613b0e9084906080016136ee565b6001600160a01b0383166000818152601060209081526040808320868452909152808220805460ff19166001179055518492917f1cdd46ff242716cdaa72d159d339a485b3438398348d68f09d7c8c0a59353d8191a3505050565b613b7587838686613e40565b604080517f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226760208201526001600160a01b03808a169282019290925290871660608201526080810186905260a0810185905260c0810184905260e0810183905261370a908890610100016136ee565b61294a87878787868689604051602001613c3693929190928352602083019190915260f81b7fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b60405160208183030381529060405261371f565b600046613cc78484838251602093840120825192840192909220604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8187015280820194909452606084019190915260808301919091523060a0808401919091528151808403909101815260c09092019052805191012090565b949350505050565b61221e89898989898988888b604051602001613d2393929190928352602083019190915260f81b7fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b604051602081830303815290604052613b69565b61221e89898989898988888b604051602001613d8b93929190928352602083019190915260f81b7fff0000000000000000000000000000000000000000000000000000000000000016604082015260410190565b6040516020818303038152906040526135f9565b80613de4576001600160a01b0382166000908152600960205260409020547f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16613e20565b6001600160a01b0382166000908152600960205260409020547f8000000000000000000000000000000000000000000000000000000000000000175b6001600160a01b0390921660009081526009602052604090209190915550565b814211613eb55760405162461bcd60e51b815260206004820152602b60248201527f46696174546f6b656e56323a20617574686f72697a6174696f6e206973206e6f60448201527f74207965742076616c6964000000000000000000000000000000000000000000606482015260840161096e565b804210613f2a5760405162461bcd60e51b815260206004820152602560248201527f46696174546f6b656e56323a20617574686f72697a6174696f6e20697320657860448201527f7069726564000000000000000000000000000000000000000000000000000000606482015260840161096e565b613a2e8484614183565b73__$4aa58fbb4121ecfaea545b1f4293c2e7c7$__636ccea65284613f95613f5a6132f3565b866040517f19010000000000000000000000000000000000000000000000000000000000008152600281019290925260228201526042902090565b846040518463ffffffff1660e01b8152600401613fb493929190614cc9565b602060405180830381865af4158015613fd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff59190614cfa565b61273f5760405162461bcd60e51b815260206004820152601e60248201527f46696174546f6b656e56323a20696e76616c6964207369676e61747572650000604482015260640161096e565b6001600160a01b0382166000818152601060209081526040808320858452909152808220805460ff19166001179055518392917f98de503528ee59b575ef0c0a2576a82497bfc029a5685b209e9ec333479b10a591a35050565b60006140f0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142219092919063ffffffff16565b90508051600014806141115750808060200190518101906141119190614cfa565b61273f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161096e565b6001600160a01b038216600090815260106020908152604080832084845290915290205460ff161561421d5760405162461bcd60e51b815260206004820152602e60248201527f46696174546f6b656e56323a20617574686f72697a6174696f6e20697320757360448201527f6564206f722063616e63656c6564000000000000000000000000000000000000606482015260840161096e565b5050565b6060613cc7848460008585600080866001600160a01b031685876040516142489190614d1c565b60006040518083038185875af1925050503d8060008114614285576040519150601f19603f3d011682016040523d82523d6000602084013e61428a565b606091505b509150915061429b878383876142a6565b979650505050505050565b6060831561431557825160000361430e576001600160a01b0385163b61430e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161096e565b5081613cc7565b613cc7838381511561432a5781518083602001fd5b8060405162461bcd60e51b815260040161096e9190614394565b60005b8381101561435f578181015183820152602001614347565b50506000910152565b60008151808452614380816020860160208601614344565b601f01601f19169290920160200192915050565b6020815260006143a76020830184614368565b9392505050565b6001600160a01b0381168114612e2357600080fd5b8035610f88816143ae565b600080604083850312156143e157600080fd5b82356143ec816143ae565b946020939093013593505050565b60006020828403121561440c57600080fd5b81356143a7816143ae565b60008060006060848603121561442c57600080fd5b8335614437816143ae565b92506020840135614447816143ae565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261449857600080fd5b813567ffffffffffffffff808211156144b3576144b3614458565b604051601f8301601f19908116603f011681019082821181831017156144db576144db614458565b816040528381528660208588010111156144f457600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114610f8857600080fd5b600080600080600080600080610100898b03121561454257600080fd5b883567ffffffffffffffff8082111561455a57600080fd5b6145668c838d01614487565b995060208b013591508082111561457c57600080fd5b6145888c838d01614487565b985060408b013591508082111561459e57600080fd5b506145ab8b828c01614487565b9650506145ba60608a01614514565b94506145c860808a016143c3565b93506145d660a08a016143c3565b92506145e460c08a016143c3565b91506145f260e08a016143c3565b90509295985092959890939650565b60006020828403121561461357600080fd5b5035919050565b60008083601f84011261462c57600080fd5b50813567ffffffffffffffff81111561464457600080fd5b60208301915083602082850101111561465c57600080fd5b9250929050565b6000806000806040858703121561467957600080fd5b843567ffffffffffffffff8082111561469157600080fd5b818701915087601f8301126146a557600080fd5b8135818111156146b457600080fd5b8860208260051b85010111156146c957600080fd5b6020928301965094509086013590808211156146e457600080fd5b506146f18782880161461a565b95989497509550505050565b600080600080600060a0868803121561471557600080fd5b8535614720816143ae565b94506020860135935061473560408701614514565b94979396509394606081013594506080013592915050565b600080600080600080600060e0888a03121561476857600080fd5b8735614773816143ae565b96506020880135614783816143ae565b955060408801359450606088013593506080880135925060a0880135915060c088013567ffffffffffffffff8111156147bb57600080fd5b6147c78a828b01614487565b91505092959891949750929550565b600080600080600060a086880312156147ee57600080fd5b85356147f9816143ae565b94506020860135614809816143ae565b93506040860135925060608601359150608086013567ffffffffffffffff81111561483357600080fd5b61483f88828901614487565b9150509295509295909350565b60008060006060848603121561486157600080fd5b833561486c816143ae565b925060208401359150604084013567ffffffffffffffff81111561488f57600080fd5b61489b86828701614487565b9150509250925092565b600080600080600080600060e0888a0312156148c057600080fd5b87356148cb816143ae565b965060208801356148db816143ae565b955060408801359450606088013593506148f760808901614514565b925060a0880135915060c0880135905092959891949750929550565b6000806020838503121561492657600080fd5b823567ffffffffffffffff81111561493d57600080fd5b6149498582860161461a565b90969095509350505050565b6000806040838503121561496857600080fd5b8235614973816143ae565b91506020830135614983816143ae565b809150509250929050565b60008060008060008060008060006101208a8c0312156149ad57600080fd5b89356149b8816143ae565b985060208a01356149c8816143ae565b975060408a0135965060608a0135955060808a0135945060a08a013593506149f260c08b01614514565b925060e08a013591506101008a013590509295985092959850929598565b600181811c90821680614a2457607f821691505b602082108103614a5d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561098657610986614a63565b601f82111561273f576000816000526020600020601f850160051c81016020861015614ace5750805b601f850160051c820191505b8181101561395157828155600101614ada565b815167ffffffffffffffff811115614b0757614b07614458565b614b1b81614b158454614a10565b84614aa5565b602080601f831160018114614b505760008415614b385750858301515b600019600386901b1c1916600185901b178555613951565b600085815260208120601f198616915b82811015614b7f57888601518255948401946001909101908401614b60565b5085821015614b9d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111561098657610986614a63565b67ffffffffffffffff831115614bd857614bd8614458565b614bec83614be68354614a10565b83614aa5565b6000601f841160018114614c205760008515614c085750838201355b600019600387901b1c1916600186901b178355611fac565b600083815260209020601f19861690835b82811015614c515786850135825560209485019460019092019101614c31565b5086821015614c6e5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006000198203614cc257614cc2614a63565b5060010190565b6001600160a01b0384168152826020820152606060408201526000614cf16060830184614368565b95945050505050565b600060208284031215614d0c57600080fd5b815180151581146143a757600080fd5b60008251614d2e818460208701614344565b919091019291505056fea2646970667358221220fc10824b7b6c8f74952dc37f6680cbd148036d1d952b783841fdd84c229ec25f64736f6c63430008160033",
  "libraries": {
    "SignatureChecker": "0x333b8F15830b539bb0e64C426B3A7eBE25F04086"
  },
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "OwnershipTransferred(address,address)": {
        "details": "Event to show ownership has been transferred",
        "params": {
          "newOwner": "representing the address of the new owner",
          "previousOwner": "representing the address of the previous owner"
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "returns": {
          "_0": "The bytes32 EIP712 domain separator."
        }
      },
      "allowance(address,address)": {
        "params": {
          "owner": "The token owner's address.",
          "spender": "The spender's address."
        },
        "returns": {
          "_0": "The remaining allowance."
        }
      },
      "approve(address,uint256)": {
        "params": {
          "spender": "The spender's address.",
          "value": "The allowance amount."
        },
        "returns": {
          "_0": "True if the operation was successful."
        }
      },
      "authorizationState(address,bytes32)": {
        "details": "Nonces are randomly generated 32-byte data unique to the authorizer's address",
        "params": {
          "authorizer": "Authorizer's address",
          "nonce": "Nonce of the authorization"
        },
        "returns": {
          "_0": "True if the nonce is used"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address to check."
        },
        "returns": {
          "_0": "balance The fiat token balance of the account."
        }
      },
      "blacklist(address)": {
        "params": {
          "_account": "The address to blacklist."
        }
      },
      "burn(uint256)": {
        "details": "The caller must be a minter, must not be blacklisted, and the amount to burn should be less than or equal to the account's balance.",
        "params": {
          "_amount": "the amount of tokens to be burned."
        }
      },
      "cancelAuthorization(address,bytes32,bytes)": {
        "details": "Works only if the authorization is not yet used. EOA wallet signatures should be packed in the order of r, s, v.",
        "params": {
          "authorizer": "Authorizer's address",
          "nonce": "Nonce of the authorization",
          "signature": "Signature bytes signed by an EOA wallet or a contract wallet"
        }
      },
      "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": {
        "details": "Works only if the authorization is not yet used.",
        "params": {
          "authorizer": "Authorizer's address",
          "nonce": "Nonce of the authorization",
          "r": "r of the signature",
          "s": "s of the signature",
          "v": "v of the signature"
        }
      },
      "configureMinter(address,uint256)": {
        "params": {
          "minter": "The address of the minter.",
          "minterAllowedAmount": "The minting amount allowed for the minter."
        },
        "returns": {
          "_0": "True if the operation was successful."
        }
      },
      "decreaseAllowance(address,uint256)": {
        "params": {
          "decrement": "Amount of decrease in allowance",
          "spender": "Spender's address"
        },
        "returns": {
          "_0": "True if successful"
        }
      },
      "increaseAllowance(address,uint256)": {
        "params": {
          "increment": "Amount of increase in allowance",
          "spender": "Spender's address"
        },
        "returns": {
          "_0": "True if successful"
        }
      },
      "initialize(string,string,string,uint8,address,address,address,address)": {
        "params": {
          "newBlacklister": "The blacklister address for the fiat token.",
          "newMasterMinter": "The masterMinter address for the fiat token.",
          "newOwner": "The owner of the fiat token.",
          "newPauser": "The pauser address for the fiat token.",
          "tokenCurrency": "The fiat currency that the token represents.",
          "tokenDecimals": "The number of decimals that the token uses.",
          "tokenName": "The name of the fiat token.",
          "tokenSymbol": "The symbol of the fiat token."
        }
      },
      "initializeV2(string)": {
        "params": {
          "newName": "New token name"
        }
      },
      "initializeV2_1(address)": {
        "params": {
          "lostAndFound": "The address to which the locked funds are sent"
        }
      },
      "initializeV2_2(address[],string)": {
        "params": {
          "accountsToBlacklist": "A list of accounts to migrate from the old blacklist",
          "newSymbol": "New token symbol data structure to the new blacklist data structure."
        }
      },
      "isBlacklisted(address)": {
        "params": {
          "_account": "The address to check."
        },
        "returns": {
          "_0": "True if the account is blacklisted, false if the account is not blacklisted."
        }
      },
      "isMinter(address)": {
        "params": {
          "account": "The address to check."
        },
        "returns": {
          "_0": "True if the account is a minter, false if the account is not a minter."
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "The amount of tokens to mint. Must be less than or equal to the minterAllowance of the caller.",
          "_to": "The address that will receive the minted tokens."
        },
        "returns": {
          "_0": "True if the operation was successful."
        }
      },
      "minterAllowance(address)": {
        "params": {
          "minter": "The address to check."
        },
        "returns": {
          "_0": "The remaining minter allowance for the account."
        }
      },
      "nonces(address)": {
        "params": {
          "owner": "Token owner's address (Authorizer)"
        },
        "returns": {
          "_0": "Next nonce"
        }
      },
      "owner()": {
        "details": "Tells the address of the owner",
        "returns": {
          "_0": "the address of the owner"
        }
      },
      "pause()": {
        "details": "called by the owner to pause, triggers stopped state"
      },
      "permit(address,address,uint256,uint256,bytes)": {
        "details": "EOA wallet signatures should be packed in the order of r, s, v.",
        "params": {
          "deadline": "The time at which the signature expires (unix time), or max uint256 value to signal no expiration",
          "owner": "Token owner's address (Authorizer)",
          "signature": "Signature bytes signed by an EOA wallet or a contract wallet",
          "spender": "Spender's address",
          "value": "Amount of allowance"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which the signature expires (unix time), or max uint256 value to signal no expiration",
          "owner": "Token owner's address (Authorizer)",
          "r": "r of the signature",
          "s": "s of the signature",
          "spender": "Spender's address",
          "v": "v of the signature",
          "value": "Amount of allowance"
        }
      },
      "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,bytes)": {
        "details": "This has an additional check to ensure that the payee's address matches the caller of this function to prevent front-running attacks. EOA wallet signatures should be packed in the order of r, s, v.",
        "params": {
          "from": "Payer's address (Authorizer)",
          "nonce": "Unique nonce",
          "signature": "Signature bytes signed by an EOA wallet or a contract wallet",
          "to": "Payee's address",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be transferred"
        }
      },
      "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "details": "This has an additional check to ensure that the payee's address matches the caller of this function to prevent front-running attacks.",
        "params": {
          "from": "Payer's address (Authorizer)",
          "nonce": "Unique nonce",
          "r": "r of the signature",
          "s": "s of the signature",
          "to": "Payee's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be transferred"
        }
      },
      "removeMinter(address)": {
        "params": {
          "minter": "The address of the minter to remove."
        },
        "returns": {
          "_0": "True if the operation was successful."
        }
      },
      "rescueERC20(address,address,uint256)": {
        "params": {
          "amount": "Amount to withdraw",
          "to": "Recipient address",
          "tokenContract": "ERC20 token contract address"
        }
      },
      "rescuer()": {
        "returns": {
          "_0": "Rescuer's address"
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": "The totalSupply of the fiat token."
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "to": "Payee's address.",
          "value": "Transfer amount."
        },
        "returns": {
          "_0": "True if the operation was successful."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "The caller must have some fiat token allowance on the payer's tokens.",
        "params": {
          "from": "Payer's address.",
          "to": "Payee's address.",
          "value": "Transfer amount."
        },
        "returns": {
          "_0": "True if the operation was successful."
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,bytes)": {
        "details": "EOA wallet signatures should be packed in the order of r, s, v.",
        "params": {
          "from": "Payer's address (Authorizer)",
          "nonce": "Unique nonce",
          "signature": "Signature bytes signed by an EOA wallet or a contract wallet",
          "to": "Payee's address",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be transferred"
        }
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "params": {
          "from": "Payer's address (Authorizer)",
          "nonce": "Unique nonce",
          "r": "r of the signature",
          "s": "s of the signature",
          "to": "Payee's address",
          "v": "v of the signature",
          "validAfter": "The time after which this is valid (unix time)",
          "validBefore": "The time before which this is valid (unix time)",
          "value": "Amount to be transferred"
        }
      },
      "unBlacklist(address)": {
        "params": {
          "_account": "The address to remove from the blacklist."
        }
      },
      "unpause()": {
        "details": "called by the owner to unpause, returns to normal state"
      },
      "updateBlacklister(address)": {
        "params": {
          "_newBlacklister": "The address of the new blacklister."
        }
      },
      "updateMasterMinter(address)": {
        "params": {
          "_newMasterMinter": "The address of the new master minter."
        }
      },
      "updatePauser(address)": {
        "params": {
          "_newPauser": "The address of the new pauser."
        }
      },
      "updateRescuer(address)": {
        "params": {
          "newRescuer": "The address of the new rescuer."
        }
      },
      "version()": {
        "returns": {
          "_0": "Version string"
        }
      }
    },
    "title": "FiatToken V2.2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "Get the EIP712 Domain Separator."
      },
      "allowance(address,address)": {
        "notice": "Gets the remaining amount of fiat tokens a spender is allowed to transfer on behalf of the token owner."
      },
      "approve(address,uint256)": {
        "notice": "Sets a fiat token allowance for a spender to spend on behalf of the caller."
      },
      "authorizationState(address,bytes32)": {
        "notice": "Returns the state of an authorization"
      },
      "balanceOf(address)": {
        "notice": "Gets the fiat token balance of an account."
      },
      "blacklist(address)": {
        "notice": "Adds account to blacklist."
      },
      "burn(uint256)": {
        "notice": "Allows a minter to burn some of its own tokens."
      },
      "cancelAuthorization(address,bytes32,bytes)": {
        "notice": "Attempt to cancel an authorization"
      },
      "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Attempt to cancel an authorization"
      },
      "configureMinter(address,uint256)": {
        "notice": "Adds or updates a new minter with a mint allowance."
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Decrease the allowance by a given decrement"
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Increase the allowance by a given increment"
      },
      "initialize(string,string,string,uint8,address,address,address,address)": {
        "notice": "Initializes the fiat token contract."
      },
      "initializeV2(string)": {
        "notice": "Initialize v2"
      },
      "initializeV2_1(address)": {
        "notice": "Initialize v2.1"
      },
      "initializeV2_2(address[],string)": {
        "notice": "Initialize v2.2"
      },
      "isBlacklisted(address)": {
        "notice": "Checks if account is blacklisted."
      },
      "isMinter(address)": {
        "notice": "Checks if an account is a minter."
      },
      "mint(address,uint256)": {
        "notice": "Mints fiat tokens to an address."
      },
      "minterAllowance(address)": {
        "notice": "Gets the minter allowance for an account."
      },
      "nonces(address)": {
        "notice": "Nonces for permit"
      },
      "permit(address,address,uint256,uint256,bytes)": {
        "notice": "Update allowance with a signed permit"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Update allowance with a signed permit"
      },
      "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,bytes)": {
        "notice": "Receive a transfer with a signed authorization from the payer"
      },
      "receiveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Receive a transfer with a signed authorization from the payer"
      },
      "removeMinter(address)": {
        "notice": "Removes a minter."
      },
      "rescueERC20(address,address,uint256)": {
        "notice": "Rescue ERC20 tokens locked up in this contract."
      },
      "rescuer()": {
        "notice": "Returns current rescuer"
      },
      "totalSupply()": {
        "notice": "Gets the totalSupply of the fiat token."
      },
      "transfer(address,uint256)": {
        "notice": "Transfers tokens from the caller."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfers tokens from an address to another by spending the caller's allowance."
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,bytes)": {
        "notice": "Execute a transfer with a signed authorization"
      },
      "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": {
        "notice": "Execute a transfer with a signed authorization"
      },
      "unBlacklist(address)": {
        "notice": "Removes account from blacklist."
      },
      "updateBlacklister(address)": {
        "notice": "Updates the blacklister address."
      },
      "updateMasterMinter(address)": {
        "notice": "Updates the master minter address."
      },
      "updatePauser(address)": {
        "notice": "Updates the pauser address."
      },
      "updateRescuer(address)": {
        "notice": "Updates the rescuer address."
      },
      "version()": {
        "notice": "Version string for the EIP712 domain separator"
      }
    },
    "notice": "ERC20 Token backed by fiat reserves, version 2.2",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 27303,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 27399,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "pauser",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 27402,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "paused",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 26296,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "blacklister",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 26300,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "_deprecatedBlacklisted",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 26473,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 26475,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 26477,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "decimals",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 26479,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "currency",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 26481,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "masterMinter",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 26483,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "initialized",
        "offset": 20,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 26488,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "balanceAndBlacklistStates",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 26494,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "allowed",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 26497,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "totalSupply_",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 26501,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "minters",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 26505,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "minterAllowed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 26187,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "_rescuer",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 28071,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "_DEPRECATED_CACHED_DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "15",
        "type": "t_bytes32"
      },
      {
        "astId": 27675,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "_authorizationStates",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 27529,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "_permitNonces",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28394,
        "contract": "src/usdc/impl/v2/FiatTokenV2_2.sol:FiatTokenV2_2",
        "label": "_initializedVersion",
        "offset": 0,
        "slot": "18",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
