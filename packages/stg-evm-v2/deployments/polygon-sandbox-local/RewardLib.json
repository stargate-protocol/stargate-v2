{
  "address": "0x28c2aFeE24F98fBEf45130f10d128f62D0C7C769",
  "abi": [],
  "transactionHash": "0x137f82e005f41817c4b0a7fb258df0e696a41d17f47e3f3a5fa656c0f9cd34d4",
  "receipt": {
    "to": null,
    "from": "0x14dC79964da2C08b23698B3D3cc7Ca32193d9955",
    "contractAddress": "0x28c2aFeE24F98fBEf45130f10d128f62D0C7C769",
    "transactionIndex": 0,
    "gasUsed": "72227",
    "logsBloom": "0x
    "blockHash": "0xb27b5de057868cb594adf9c96661e0653229b446d70c8651623a26b3f45e426f",
    "transactionHash": "0x137f82e005f41817c4b0a7fb258df0e696a41d17f47e3f3a5fa656c0f9cd34d4",
    "logs": [],
    "blockNumber": 415,
    "cumulativeGasUsed": "72227",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5da1f9dc2dcad3e22e7dd546a533ccc5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library which handles staking rewards.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/peripheral/rewarder/lib/RewardLib.sol\":\"RewardLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"src/peripheral/rewarder/interfaces/IMultiRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { IRewarder, IERC20 } from \\\"./IRewarder.sol\\\";\\n\\n// @dev This is an internal struct, placed here as its shared between multiple libraries.\\nstruct RewardPool {\\n    uint256 accRewardPerShare;\\n    address rewardToken;\\n    uint48 lastRewardTime;\\n    uint48 allocPoints;\\n    IERC20 stakingToken;\\n    bool removed;\\n    mapping(address => uint256) rewardDebt;\\n}\\n\\n/// @notice A rewarder that can distribute multiple reward tokens (ERC20 and native) to `StargateStaking` pools.\\n/// @dev The native token is encoded as 0x0.\\ninterface IMultiRewarder is IRewarder {\\n    struct RewardDetails {\\n        uint256 rewardPerSec;\\n        uint160 totalAllocPoints;\\n        uint48 start;\\n        uint48 end;\\n        bool exists;\\n    }\\n\\n    /// @notice MultiRewarder renounce ownership is disabled.\\n    error MultiRewarderRenounceOwnershipDisabled();\\n    /// @notice The token is not connected to the staking contract, connect it first.\\n    error MultiRewarderDisconnectedStakingToken(address token);\\n    /// @notice This token is not registered via `setReward` yet, register it first.\\n    error MultiRewarderUnregisteredToken(address token);\\n    /**\\n     *  @notice Due to various functions looping over the staking tokens connected to a reward token,\\n     *          a maximum number of such links is instated.\\n     */\\n    error MultiRewarderMaxPoolsForRewardToken();\\n    /**\\n     *  @notice Due to various functions looping over the reward tokens connected to a staking token,\\n     *          a maximum number of such links is instated.\\n     */\\n    error MultiRewarderMaxActiveRewardTokens();\\n    /// @notice The function can only be called while the pool hasn't ended yet.\\n    error MultiRewarderPoolFinished(address rewardToken);\\n    /// @notice The pool emission duration cannot be set to zero, as this would cause the rewards to be voided.\\n    error MultiRewarderZeroDuration();\\n    /// @notice The pool start time cannot be set in the past, as this would cause the rewards to be voided.\\n    error MultiRewarderStartInPast(uint256 start);\\n    /**\\n     *  @notice The recipient failed to handle the receipt of the native tokens, do they have a receipt hook?\\n     *          If not, use `emergencyWithdraw`.\\n     */\\n    error MultiRewarderNativeTransferFailed(address to, uint256 amount);\\n    /**\\n     *  @notice A wrong `msg.value` was provided while setting a native reward, make sure it matches the function\\n     *          `amount`.\\n     */\\n    error MultiRewarderIncorrectNative(uint256 expected, uint256 actual);\\n    /**\\n     *  @notice Due to a zero input or rounding, the reward rate while setting this pool would be zero,\\n     *          which is not allowed.\\n     */\\n    error MultiRewarderZeroRewardRate();\\n\\n    /// @notice Emitted when additional rewards were added to a pool, extending the reward duration.\\n    event RewardExtended(address indexed rewardToken, uint256 amountAdded, uint48 newEnd);\\n    /**\\n     *  @notice Emitted when a reward token has been registered. Can be emitted again for the same token after it has\\n     *          been explicitly stopped.\\n     */\\n    event RewardRegistered(address indexed rewardToken);\\n    /// @notice Emitted when the reward pool has been adjusted or intialized, with the new params.\\n    event RewardSet(\\n        address indexed rewardToken,\\n        uint256 amountAdded,\\n        uint256 amountPeriod,\\n        uint48 start,\\n        uint48 duration\\n    );\\n    /// @notice Emitted whenever rewards are claimed via the staking pool.\\n    event RewardsClaimed(address indexed user, address[] rewardTokens, uint256[] amounts);\\n    /**\\n     *  @notice Emitted whenever a new staking pool combination was registered via the allocation point adjustment\\n     *          function.\\n     */\\n    event PoolRegistered(address indexed rewardToken, IERC20 indexed stakeToken);\\n    /// @notice Emitted when the owner adjusts the allocation points for pools.\\n    event AllocPointsSet(address indexed rewardToken, IERC20[] indexed stakeToken, uint48[] allocPoint);\\n    /// @notice Emitted when a reward token is stopped.\\n    event RewardStopped(address indexed rewardToken, address indexed receiver, bool pullTokens);\\n\\n    /**\\n     *  @notice Sets the reward for `rewards` of `rewardToken` over `duration` seconds, starting at `start`. The actual\\n     *          reward over this period will be increased by any rewards on the pool that haven't been distributed yet.\\n     */\\n    function setReward(address rewardToken, uint256 rewards, uint48 start, uint48 duration) external payable;\\n    /**\\n     *  @notice Extends the reward duration for `rewardToken` by `amount` tokens, extending the duration by the\\n     *          equivalent time according to the `rewardPerSec` rate of the pool.\\n     */\\n    function extendReward(address rewardToken, uint256 amount) external payable;\\n    /**\\n     *  @notice Configures allocation points for a reward token over multiple staking tokens, setting the `allocPoints`\\n     *          for each `stakingTokens` and updating the `totalAllocPoint` for the `rewardToken`. The allocation\\n     *          points of any non-provided staking tokens will be left as-is, and won't be reset to zero.\\n     */\\n    function setAllocPoints(\\n        address rewardToken,\\n        IERC20[] calldata stakingTokens,\\n        uint48[] calldata allocPoints\\n    ) external;\\n    /**\\n     *  @notice Unregisters a reward token fully, immediately preventing users from ever harvesting their pending\\n     *          accumulated rewards. Optionally `pullTokens` can be set to false which causes the token balance to\\n     *          not be sent to the owner, this should only be set to false in case the token is bugged and reverts.\\n     */\\n    function stopReward(address rewardToken, address receiver, bool pullTokens) external;\\n\\n    /**\\n     *  @notice Returns the reward pools linked to the `stakingToken` alongside the pending rewards for `user`\\n     *          for these pools.\\n     */\\n    function getRewards(IERC20 stakingToken, address user) external view returns (address[] memory, uint256[] memory);\\n\\n    /// @notice Returns the allocation points for the `rewardToken` over all staking tokens linked to it.\\n    function allocPointsByReward(\\n        address rewardToken\\n    ) external view returns (IERC20[] memory stakingTokens, uint48[] memory allocPoints);\\n    /// @notice Returns the allocation points for the `stakingToken` over all reward tokens linked to it.\\n    function allocPointsByStake(\\n        IERC20 stakingToken\\n    ) external view returns (address[] memory rewardTokens, uint48[] memory allocPoints);\\n\\n    /// @notice Returns all enabled reward tokens. Stopped reward tokens are not included, while ended rewards are.\\n    function rewardTokens() external view returns (address[] memory);\\n    /// @notice Returns the emission details of a `rewardToken`, configured via `setReward`.\\n    function rewardDetails(address rewardToken) external view returns (RewardDetails memory);\\n}\\n\",\"keccak256\":\"0x739f3fb28c7e5d44a35db352cdffeb0076e8c0c18028d6f23c4b0b3e01dad589\",\"license\":\"BUSL-1.1\"},\"src/peripheral/rewarder/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n *  @notice A rewarder is connected to the staking contract and distributes rewards whenever the staking contract\\n *          updates the rewarder.\\n */\\ninterface IRewarder {\\n    /**\\n     *  @notice This function is only callable by the staking contract.\\n     */\\n    error MultiRewarderUnauthorizedCaller(address caller);\\n    /**\\n     *  @notice The rewarder cannot be reconnected to the same staking token as it would cause wrongful reward\\n     *          attribution through reconfiguration.\\n     */\\n    error RewarderAlreadyConnected(IERC20 stakingToken);\\n\\n    /**\\n     *  @notice Emitted when the rewarder is connected to a staking token.\\n     */\\n    event RewarderConnected(IERC20 indexed stakingToken);\\n\\n    /**\\n     *  @notice Informs the rewarder of an update in the staking contract, such as a deposit, withdraw or claim.\\n     *  @dev Emergency withdrawals draw the balance of a user to 0, and DO NOT call `onUpdate`.\\n     *       The rewarder logic must keep this in mind!\\n     */\\n    function onUpdate(IERC20 token, address user, uint256 oldStake, uint256 oldSupply, uint256 newStake) external;\\n\\n    /**\\n     *  @notice Called by the staking contract whenever this rewarder is connected to a staking token in the staking\\n     *          contract. Should only be callable once per staking token to avoid wrongful reward attribution through\\n     *          reconfiguration.\\n     */\\n    function connect(IERC20 stakingToken) external;\\n}\\n\",\"keccak256\":\"0x8a190dc01c20581529de7fe951f33133e948d97de73295ac7fcfc294f5b48420\",\"license\":\"BUSL-1.1\"},\"src/peripheral/rewarder/lib/RewardLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.22;\\n\\nimport { IMultiRewarder, RewardPool } from \\\"../interfaces/IMultiRewarder.sol\\\";\\n\\n/// @dev Library which handles staking rewards.\\nlibrary RewardLib {\\n    uint256 private constant PRECISION = 10 ** 24;\\n\\n    function indexAndUpdate(\\n        RewardPool storage pool,\\n        IMultiRewarder.RewardDetails storage rewardDetails,\\n        address user,\\n        uint256 oldStake,\\n        uint256 totalSupply\\n    ) internal returns (uint256) {\\n        uint256 accRewardPerShare = index(pool, rewardDetails, totalSupply);\\n        return update(pool, user, oldStake, accRewardPerShare);\\n    }\\n\\n    function update(\\n        RewardPool storage pool,\\n        address user,\\n        uint256 oldStake,\\n        uint256 accRewardPerShare\\n    ) internal returns (uint256) {\\n        uint256 rewardsForUser = ((accRewardPerShare - pool.rewardDebt[user]) * oldStake) / PRECISION;\\n        pool.rewardDebt[user] = accRewardPerShare;\\n        return rewardsForUser;\\n    }\\n\\n    function index(\\n        RewardPool storage pool,\\n        IMultiRewarder.RewardDetails storage rewardDetails,\\n        uint256 totalSupply\\n    ) internal returns (uint256 accRewardPerShare) {\\n        accRewardPerShare = _index(pool, rewardDetails, totalSupply);\\n        pool.accRewardPerShare = accRewardPerShare;\\n        pool.lastRewardTime = uint48(block.timestamp);\\n    }\\n\\n    function _index(\\n        RewardPool storage pool,\\n        IMultiRewarder.RewardDetails storage rewardDetails,\\n        uint256 totalSupply\\n    ) internal view returns (uint256) {\\n        // max(start, lastRewardTime)\\n        uint256 start = rewardDetails.start > pool.lastRewardTime ? rewardDetails.start : pool.lastRewardTime;\\n        // min(end, now)\\n        uint256 end = rewardDetails.end < block.timestamp ? rewardDetails.end : block.timestamp;\\n        if (start >= end || totalSupply == 0 || rewardDetails.totalAllocPoints == 0) {\\n            return pool.accRewardPerShare;\\n        }\\n\\n        return\\n            (rewardDetails.rewardPerSec * (end - start) * pool.allocPoints * PRECISION) /\\n            rewardDetails.totalAllocPoints /\\n            totalSupply +\\n            pool.accRewardPerShare;\\n    }\\n\\n    function getRewards(\\n        RewardPool storage pool,\\n        IMultiRewarder.RewardDetails storage rewardDetails,\\n        address user,\\n        uint256 oldStake,\\n        uint256 oldSupply\\n    ) internal view returns (uint256) {\\n        uint256 accRewardPerShare = _index(pool, rewardDetails, oldSupply);\\n        return ((accRewardPerShare - pool.rewardDebt[user]) * oldStake) / PRECISION;\\n    }\\n}\\n\",\"keccak256\":\"0x218e8b950a311e84a18149eab569b13d17f7c1216447acf9afa5c3c10eb61d0c\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122072412a753f4b3d96a52447395a0c8c062f4c9a2f25be71914649ee633552d24964736f6c63430008160033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122072412a753f4b3d96a52447395a0c8c062f4c9a2f25be71914649ee633552d24964736f6c63430008160033",
  "devdoc": {
    "details": "Library which handles staking rewards.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
