{
  "address": "0x5c386D85b1B82FD9Db681b9176C8a4248bb6345B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "digest",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "isValidSignatureNow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x84ad8a8c584825012e6c10c350d34a8856aa3c15a038fdd69f7a793ca7ab0b06",
  "receipt": {
    "to": null,
    "from": "0x4A79AdC4539905376D339C69b6a7092D0598cc24",
    "contractAddress": "0x5c386D85b1B82FD9Db681b9176C8a4248bb6345B",
    "transactionIndex": 0,
    "gasUsed": "428677",
    "logsBloom": "0x
    "blockHash": "0xa5f4e2eb367cf9420663ea6d29315da4a32e236968465b22545c5f0e844dd8d7",
    "transactionHash": "0x84ad8a8c584825012e6c10c350d34a8856aa3c15a038fdd69f7a793ca7ab0b06",
    "logs": [],
    "blockNumber": 164916,
    "cumulativeGasUsed": "428677",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7f30a30e9578a142f505c41026c21857",
  "metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignatureNow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Signature verification helper that can be used instead of `ECRecover.recover` to seamlessly support both ECDSA signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets. Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/21bb89ef5bfc789b9333eb05e3ba2b7b284ac77c/contracts/utils/cryptography/SignatureChecker.sol\",\"kind\":\"dev\",\"methods\":{\"isValidSignatureNow(address,bytes32,bytes)\":{\"details\":\"Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECRecover.recover`.\",\"params\":{\"digest\":\"Keccak-256 hash digest of the signed message\",\"signature\":\"Signature byte array associated with hash\",\"signer\":\"Address of the claimed signer\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/usdc/impl/util/SignatureChecker.sol\":\"SignatureChecker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"src/usdc/impl/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash          Hash of the data to be signed\\n     * @param signature     Signature byte array associated with the provided data hash\\n     * @return magicValue   bytes4 magic value 0x1626ba7e when function passes\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xbd5ce56510b135ac06b920b14dcdc9d350bb7a22cc867777d0b2d9938fc3854e\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/util/ECRecover.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ECRecover\\n * @notice A library that provides a safe ECDSA recovery function\\n */\\nlibrary ECRecover {\\n    /**\\n     * @notice Recover signer's address from a signed message\\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/65e4ffde586ec89af3b7e9140bdc9235d1254853/contracts/cryptography/ECDSA.sol\\n     * Modifications: Accept v, r, and s as separate arguments\\n     * @param digest    Keccak-256 hash digest of the signed message\\n     * @param v         v of the signature\\n     * @param r         r of the signature\\n     * @param s         s of the signature\\n     * @return Signer address\\n     */\\n    function recover(bytes32 digest, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert(\\\"ECRecover: invalid signature 's' value\\\");\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert(\\\"ECRecover: invalid signature 'v' value\\\");\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(digest, v, r, s);\\n        require(signer != address(0), \\\"ECRecover: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Recover signer's address from a signed message\\n     * @dev Adapted from: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/0053ee040a7ff1dbc39691c9e67a69f564930a88/contracts/utils/cryptography/ECDSA.sol\\n     * @param digest    Keccak-256 hash digest of the signed message\\n     * @param signature Signature byte array associated with hash\\n     * @return Signer address\\n     */\\n    function recover(bytes32 digest, bytes memory signature) internal pure returns (address) {\\n        require(signature.length == 65, \\\"ECRecover: invalid signature length\\\");\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n        return recover(digest, v, r, s);\\n    }\\n}\\n\",\"keccak256\":\"0xead4630c535f486fc99b6246dad8b915b47ce450b8a2e54323fface15a3d7ef4\",\"license\":\"Apache-2.0\"},\"src/usdc/impl/util/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/**\\n * Copyright 2023 Circle Internet Financial, LTD. All rights reserved.\\n *\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport { ECRecover } from \\\"./ECRecover.sol\\\";\\nimport { IERC1271 } from \\\"../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECRecover.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets.\\n *\\n * Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/21bb89ef5bfc789b9333eb05e3ba2b7b284ac77c/contracts/utils/cryptography/SignatureChecker.sol\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECRecover.recover`.\\n     * @param signer        Address of the claimed signer\\n     * @param digest        Keccak-256 hash digest of the signed message\\n     * @param signature     Signature byte array associated with hash\\n     */\\n    function isValidSignatureNow(address signer, bytes32 digest, bytes memory signature) external view returns (bool) {\\n        if (!isContract(signer)) {\\n            return ECRecover.recover(digest, signature) == signer;\\n        }\\n        return isValidERC1271SignatureNow(signer, digest, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     * @param signer        Address of the claimed signer\\n     * @param digest        Keccak-256 hash digest of the signed message\\n     * @param signature     Signature byte array associated with hash\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 digest,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, digest, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n\\n    /**\\n     * @dev Checks if the input address is a smart contract.\\n     */\\n    function isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x6f7b341108bbfdea57a0676832d7cbbcaded66128aae4885e971b04a0f466ede\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6106d861003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80636ccea6521461003a575b600080fd5b61004d610048366004610529565b610061565b604051901515815260200160405180910390f35b6000833b6100a8578373ffffffffffffffffffffffffffffffffffffffff1661008a84846100bd565b73ffffffffffffffffffffffffffffffffffffffff161490506100b6565b6100b384848461017d565b90505b9392505050565b60008151604114610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45435265636f7665723a20696e76616c6964207369676e6174757265206c656e60448201527f677468000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60208201516040830151606084015160001a610173868285856102bc565b9695505050505050565b60008060008573ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b86866040516024016101b4929190610633565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161021f919061066d565b600060405180830381855afa9150503d806000811461025a576040519150601f19603f3d011682016040523d82523d6000602084013e61025f565b606091505b509150915081801561027357506020815110155b8015610173575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906102b19083016020908101908401610689565b149695505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561036e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45435265636f7665723a20696e76616c6964207369676e61747572652027732760448201527f2076616c75650000000000000000000000000000000000000000000000000000606482015260840161014c565b8360ff16601b1415801561038657508360ff16601c14155b15610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45435265636f7665723a20696e76616c6964207369676e61747572652027762760448201527f2076616c75650000000000000000000000000000000000000000000000000000606482015260840161014c565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015610467573d6000803e3d6000fd5b5050604051601f19015191505073ffffffffffffffffffffffffffffffffffffffff81166104f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f45435265636f7665723a20696e76616c6964207369676e617475726500000000604482015260640161014c565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060006060848603121561053e57600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461056257600080fd5b925060208401359150604084013567ffffffffffffffff8082111561058657600080fd5b818601915086601f83011261059a57600080fd5b8135818111156105ac576105ac6104fa565b604051601f8201601f19908116603f011681019083821181831017156105d4576105d46104fa565b816040528281528960208487010111156105ed57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60005b8381101561062a578181015183820152602001610612565b50506000910152565b828152604060208201526000825180604084015261065881606085016020870161060f565b601f01601f1916919091016060019392505050565b6000825161067f81846020870161060f565b9190910192915050565b60006020828403121561069b57600080fd5b505191905056fea2646970667358221220838f4edba48371a3bd204749e3da0c29033ea0e239561400e67cd53ebe972f6164736f6c63430008160033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80636ccea6521461003a575b600080fd5b61004d610048366004610529565b610061565b604051901515815260200160405180910390f35b6000833b6100a8578373ffffffffffffffffffffffffffffffffffffffff1661008a84846100bd565b73ffffffffffffffffffffffffffffffffffffffff161490506100b6565b6100b384848461017d565b90505b9392505050565b60008151604114610155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f45435265636f7665723a20696e76616c6964207369676e6174757265206c656e60448201527f677468000000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60208201516040830151606084015160001a610173868285856102bc565b9695505050505050565b60008060008573ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b86866040516024016101b4929190610633565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090941693909317909252905161021f919061066d565b600060405180830381855afa9150503d806000811461025a576040519150601f19603f3d011682016040523d82523d6000602084013e61025f565b606091505b509150915081801561027357506020815110155b8015610173575080517f1626ba7e00000000000000000000000000000000000000000000000000000000906102b19083016020908101908401610689565b149695505050505050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561036e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45435265636f7665723a20696e76616c6964207369676e61747572652027732760448201527f2076616c75650000000000000000000000000000000000000000000000000000606482015260840161014c565b8360ff16601b1415801561038657508360ff16601c14155b15610413576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f45435265636f7665723a20696e76616c6964207369676e61747572652027762760448201527f2076616c75650000000000000000000000000000000000000000000000000000606482015260840161014c565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015610467573d6000803e3d6000fd5b5050604051601f19015191505073ffffffffffffffffffffffffffffffffffffffff81166104f1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f45435265636f7665723a20696e76616c6964207369676e617475726500000000604482015260640161014c565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060006060848603121561053e57600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461056257600080fd5b925060208401359150604084013567ffffffffffffffff8082111561058657600080fd5b818601915086601f83011261059a57600080fd5b8135818111156105ac576105ac6104fa565b604051601f8201601f19908116603f011681019083821181831017156105d4576105d46104fa565b816040528281528960208487010111156105ed57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60005b8381101561062a578181015183820152602001610612565b50506000910152565b828152604060208201526000825180604084015261065881606085016020870161060f565b601f01601f1916919091016060019392505050565b6000825161067f81846020870161060f565b9190910192915050565b60006020828403121561069b57600080fd5b505191905056fea2646970667358221220838f4edba48371a3bd204749e3da0c29033ea0e239561400e67cd53ebe972f6164736f6c63430008160033",
  "devdoc": {
    "details": "Signature verification helper that can be used instead of `ECRecover.recover` to seamlessly support both ECDSA signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets. Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/21bb89ef5bfc789b9333eb05e3ba2b7b284ac77c/contracts/utils/cryptography/SignatureChecker.sol",
    "kind": "dev",
    "methods": {
      "isValidSignatureNow(address,bytes32,bytes)": {
        "details": "Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECRecover.recover`.",
        "params": {
          "digest": "Keccak-256 hash digest of the signed message",
          "signature": "Signature byte array associated with hash",
          "signer": "Address of the claimed signer"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
