// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

import "forge-std/Script.sol";

import { StargateOFTUSDC } from "../src/usdc/StargateOFTUSDC.sol";

import { OFTLimit, OFTFeeDetail, OFTReceipt, SendParam, MessagingReceipt, MessagingFee, IOFT } from "@layerzerolabs/lz-evm-oapp-v2/contracts/oft/interfaces/IOFT.sol";

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
contract SimulateTx is Script {
    address deployer = 0x5e6e4f234c7Ad525700fcF5B7862589950589ed5;
    function run() external {
        uint256 convertRate = 10 ** (18 - 6);

        // Start broadcasting transactions
        uint256 deployerPrivateKey = vm.envUint("PRIVATE_KEY");
        vm.startBroadcast(deployerPrivateKey);

        StargateOFTUSDC stargateOFTUSDC = StargateOFTUSDC(0x12a272A581feE5577A5dFa371afEB4b2F3a8C2F8);
        // Simulate the transaction
        console.log("Simulating transaction...");
        console.log("From:", msg.sender);

        bytes
            memory data = hex"c7c7f5b300000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000a765e116bb5467400000000000000000000000000000000000000000000000000000000000000000000000000000000000000006e47f840847940fc47e1c9ab3be333ebcc63d69e00000000000000000000000000000000000000000000000000000000000075e80000000000000000000000006e47f840847940fc47e1c9ab3be333ebcc63d69e00000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000182b800000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        uint256 amount = 100000;
        // (bool success, ) = to.call(data);
        SendParam memory sendParam = SendParam({
            dstEid: 30110,
            to: bytes32(uint256(uint160(deployer))),
            amountLD: amount,
            minAmountLD: 99000,
            extraOptions: "",
            composeMsg: "",
            oftCmd: ""
        });

        // IERC20(stargateOFTUSDC.token()).approve(address(stargateOFTUSDC), amount);

        MessagingFee memory messagingFee = stargateOFTUSDC.quoteSend(sendParam, false); // get the fee

        uint256 nativeFee = ((messagingFee.nativeFee / convertRate) + 1) * convertRate;

        console.log("Native fee 6 decimals :------------------", nativeFee);
        console.log("Native fee:------------------", messagingFee.nativeFee);

        // 1058288144492926914
        // 1058288000000100000
        // 1058288000000000000
        // 1058288144492926914
        // console.log("Native fee:------------------");
        // console.log(messagingFee.nativeFee);

        // 1131139149653227128
        // 1131139000000000000

        messagingFee.nativeFee = nativeFee;

        bytes memory newData = abi.encodeWithSelector(IOFT.send.selector, sendParam, messagingFee, deployer);

        console.logBytes(newData);

        // 857478250035547474
        // 1131139149653227128

        (bool success, ) = address(stargateOFTUSDC).call{ value: messagingFee.nativeFee, gas: 1000000 }(newData);
        require(success, "Transfer failed");

        // Stop broadcasting
        vm.stopBroadcast();
    }
}

// 753893416545633908

// c7c7f5b3
// 0000000000000000000000000000000000000000000000000000000000000080
// 0000000000000000000000000000000000000000000000000a765e116bb54674 // native fee
// 0000000000000000000000000000000000000000000000000000000000000000 // lz fee
// 0000000000000000000000006e47f840847940fc47e1c9ab3be333ebcc63d69e // refund address
// 00000000000000000000000000000000000000000000000000000000000075e8 // dest eid
// 0000000000000000000000006e47f840847940fc47e1c9ab3be333ebcc63d69e // deployer
// 00000000000000000000000000000000000000000000000000000000000186a0 // amountLD
// 00000000000000000000000000000000000000000000000000000000000182b8 // minAmountLD

// 1058288144492926914
// 1058288000000100000
// 0000000000000000000000000000000000000000000000000eafcb75da8217c2 1058288144492926914
// 0000000000000000000000000000000000000000000000000eafcb54361086a0 1058288000000100000
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000000

// 00000000000000000000000000000000000000000000000000000000000000e0 // offset extra options
// 0000000000000000000000000000000000000000000000000000000000000100 // offset compose msg
// 0000000000000000000000000000000000000000000000000000000000000120 // offset oftCcm
// 0000000000000000000000000000000000000000000000000000000000000000 // extra options
// 0000000000000000000000000000000000000000000000000000000000000000 // compose msg
// 0000000000000000000000000000000000000000000000000000000000000000 // oftCmd

// c7c7f5b3
// 0000000000000000000000000000000000000000000000000000000000000080 // offset
// 0000000000000000000000000000000000000000000000000f69a08e9c395246 dest eid
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000005e6e4f234c7ad525700fcf5b7862589950589ed5 // deployer
// 000000000000000000000000000000000000000000000000000000000000759e
// 0000000000000000000000005e6e4f234c7ad525700fcf5b7862589950589ed5 // deployer
// 0000000000000000000000000000000000000000000000000de0b6b3a7640000
// 0000000000000000000000000000000000000000000000000de0b6b3a7640000
// 00000000000000000000000000000000000000000000000000000000000000e0
// 0000000000000000000000000000000000000000000000000000000000000100
// 0000000000000000000000000000000000000000000000000000000000000120
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000000
