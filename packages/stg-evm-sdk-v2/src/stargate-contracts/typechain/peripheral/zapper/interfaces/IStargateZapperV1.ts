/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common'

export interface IStargateZapperV1Interface extends utils.Interface {
    functions: {
        'depositAndStake(address,uint256,uint256)': FunctionFragment
        'depositAndStakeWithPermit(address,uint256,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment
        'migrateV1LpToV2Stake(uint16,uint256,uint256)': FunctionFragment
        'migrateV1LpToV2StakeWithPermit(uint16,uint256,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment
        'onWithdrawReceived(address,address,uint256,bytes)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'depositAndStake'
            | 'depositAndStakeWithPermit'
            | 'migrateV1LpToV2Stake'
            | 'migrateV1LpToV2StakeWithPermit'
            | 'onWithdrawReceived'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'depositAndStake',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'depositAndStakeWithPermit',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'migrateV1LpToV2Stake',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'migrateV1LpToV2StakeWithPermit',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'onWithdrawReceived',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
        ]
    ): string

    decodeFunctionResult(functionFragment: 'depositAndStake', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'depositAndStakeWithPermit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'migrateV1LpToV2Stake', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'migrateV1LpToV2StakeWithPermit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'onWithdrawReceived', data: BytesLike): Result

    events: {
        'LpConfigured(address,address,address)': EventFragment
        'TokenSwept(address,address,uint256)': EventFragment
        'V1PoolConfigured(uint16,address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'LpConfigured'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TokenSwept'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'V1PoolConfigured'): EventFragment
}

export interface LpConfiguredEventObject {
    lpToken: string
    pool: string
    asset: string
}
export type LpConfiguredEvent = TypedEvent<[string, string, string], LpConfiguredEventObject>

export type LpConfiguredEventFilter = TypedEventFilter<LpConfiguredEvent>

export interface TokenSweptEventObject {
    token: string
    receiver: string
    amount: BigNumber
}
export type TokenSweptEvent = TypedEvent<[string, string, BigNumber], TokenSweptEventObject>

export type TokenSweptEventFilter = TypedEventFilter<TokenSweptEvent>

export interface V1PoolConfiguredEventObject {
    poolId: number
    v1LpToken: string
    v2LpToken: string
}
export type V1PoolConfiguredEvent = TypedEvent<[number, string, string], V1PoolConfiguredEventObject>

export type V1PoolConfiguredEventFilter = TypedEventFilter<V1PoolConfiguredEvent>

export interface IStargateZapperV1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IStargateZapperV1Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        depositAndStake(
            lpToken: PromiseOrValue<string>,
            assetInAmount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        depositAndStakeWithPermit(
            lpToken: PromiseOrValue<string>,
            assetInAmount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        migrateV1LpToV2Stake(
            poolId: PromiseOrValue<BigNumberish>,
            amount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        migrateV1LpToV2StakeWithPermit(
            poolId: PromiseOrValue<BigNumberish>,
            amount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        onWithdrawReceived(
            token: PromiseOrValue<string>,
            from: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    depositAndStake(
        lpToken: PromiseOrValue<string>,
        assetInAmount: PromiseOrValue<BigNumberish>,
        minStakeAmount: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    depositAndStakeWithPermit(
        lpToken: PromiseOrValue<string>,
        assetInAmount: PromiseOrValue<BigNumberish>,
        minStakeAmount: PromiseOrValue<BigNumberish>,
        deadline: PromiseOrValue<BigNumberish>,
        v: PromiseOrValue<BigNumberish>,
        r: PromiseOrValue<BytesLike>,
        s: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    migrateV1LpToV2Stake(
        poolId: PromiseOrValue<BigNumberish>,
        amount: PromiseOrValue<BigNumberish>,
        minStakeAmount: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    migrateV1LpToV2StakeWithPermit(
        poolId: PromiseOrValue<BigNumberish>,
        amount: PromiseOrValue<BigNumberish>,
        minStakeAmount: PromiseOrValue<BigNumberish>,
        deadline: PromiseOrValue<BigNumberish>,
        v: PromiseOrValue<BigNumberish>,
        r: PromiseOrValue<BytesLike>,
        s: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    onWithdrawReceived(
        token: PromiseOrValue<string>,
        from: PromiseOrValue<string>,
        value: PromiseOrValue<BigNumberish>,
        data: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        depositAndStake(
            lpToken: PromiseOrValue<string>,
            assetInAmount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        depositAndStakeWithPermit(
            lpToken: PromiseOrValue<string>,
            assetInAmount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        migrateV1LpToV2Stake(
            poolId: PromiseOrValue<BigNumberish>,
            amount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        migrateV1LpToV2StakeWithPermit(
            poolId: PromiseOrValue<BigNumberish>,
            amount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        onWithdrawReceived(
            token: PromiseOrValue<string>,
            from: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>
    }

    filters: {
        'LpConfigured(address,address,address)'(
            lpToken?: PromiseOrValue<string> | null,
            pool?: PromiseOrValue<string> | null,
            asset?: null
        ): LpConfiguredEventFilter
        LpConfigured(
            lpToken?: PromiseOrValue<string> | null,
            pool?: PromiseOrValue<string> | null,
            asset?: null
        ): LpConfiguredEventFilter

        'TokenSwept(address,address,uint256)'(
            token?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            amount?: null
        ): TokenSweptEventFilter
        TokenSwept(
            token?: PromiseOrValue<string> | null,
            receiver?: PromiseOrValue<string> | null,
            amount?: null
        ): TokenSweptEventFilter

        'V1PoolConfigured(uint16,address,address)'(
            poolId?: PromiseOrValue<BigNumberish> | null,
            v1LpToken?: PromiseOrValue<string> | null,
            v2LpToken?: PromiseOrValue<string> | null
        ): V1PoolConfiguredEventFilter
        V1PoolConfigured(
            poolId?: PromiseOrValue<BigNumberish> | null,
            v1LpToken?: PromiseOrValue<string> | null,
            v2LpToken?: PromiseOrValue<string> | null
        ): V1PoolConfiguredEventFilter
    }

    estimateGas: {
        depositAndStake(
            lpToken: PromiseOrValue<string>,
            assetInAmount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        depositAndStakeWithPermit(
            lpToken: PromiseOrValue<string>,
            assetInAmount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        migrateV1LpToV2Stake(
            poolId: PromiseOrValue<BigNumberish>,
            amount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        migrateV1LpToV2StakeWithPermit(
            poolId: PromiseOrValue<BigNumberish>,
            amount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        onWithdrawReceived(
            token: PromiseOrValue<string>,
            from: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        depositAndStake(
            lpToken: PromiseOrValue<string>,
            assetInAmount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        depositAndStakeWithPermit(
            lpToken: PromiseOrValue<string>,
            assetInAmount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        migrateV1LpToV2Stake(
            poolId: PromiseOrValue<BigNumberish>,
            amount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        migrateV1LpToV2StakeWithPermit(
            poolId: PromiseOrValue<BigNumberish>,
            amount: PromiseOrValue<BigNumberish>,
            minStakeAmount: PromiseOrValue<BigNumberish>,
            deadline: PromiseOrValue<BigNumberish>,
            v: PromiseOrValue<BigNumberish>,
            r: PromiseOrValue<BytesLike>,
            s: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        onWithdrawReceived(
            token: PromiseOrValue<string>,
            from: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
