/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export interface RebateCampaignInterface extends utils.Interface {
    functions: {
        'END_TIME()': FunctionFragment
        'START_TIME()': FunctionFragment
        'addReward(address,uint256)': FunctionFragment
        'claimReward()': FunctionFragment
        'feeLib()': FunctionFragment
        'owner()': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'rewardAdded()': FunctionFragment
        'scores(address)': FunctionFragment
        'sum()': FunctionFragment
        'token()': FunctionFragment
        'totalRewards()': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'tryAdd(address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'END_TIME'
            | 'START_TIME'
            | 'addReward'
            | 'claimReward'
            | 'feeLib'
            | 'owner'
            | 'renounceOwnership'
            | 'rewardAdded'
            | 'scores'
            | 'sum'
            | 'token'
            | 'totalRewards'
            | 'transferOwnership'
            | 'tryAdd'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'END_TIME', values?: undefined): string
    encodeFunctionData(functionFragment: 'START_TIME', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'addReward',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'claimReward', values?: undefined): string
    encodeFunctionData(functionFragment: 'feeLib', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'rewardAdded', values?: undefined): string
    encodeFunctionData(functionFragment: 'scores', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'sum', values?: undefined): string
    encodeFunctionData(functionFragment: 'token', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalRewards', values?: undefined): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'tryAdd',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'END_TIME', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'START_TIME', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'addReward', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'claimReward', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'feeLib', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'rewardAdded', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'scores', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'sum', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalRewards', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'tryAdd', data: BytesLike): Result

    events: {
        'OwnershipTransferred(address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface RebateCampaign extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: RebateCampaignInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        END_TIME(overrides?: CallOverrides): Promise<[BigNumber]>

        START_TIME(overrides?: CallOverrides): Promise<[BigNumber]>

        addReward(
            _token: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        feeLib(overrides?: CallOverrides): Promise<[string]>

        owner(overrides?: CallOverrides): Promise<[string]>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        rewardAdded(overrides?: CallOverrides): Promise<[boolean]>

        scores(payer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & { amount: BigNumber }>

        sum(overrides?: CallOverrides): Promise<[BigNumber]>

        token(overrides?: CallOverrides): Promise<[string]>

        totalRewards(overrides?: CallOverrides): Promise<[BigNumber]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        tryAdd(
            _payer: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    END_TIME(overrides?: CallOverrides): Promise<BigNumber>

    START_TIME(overrides?: CallOverrides): Promise<BigNumber>

    addReward(
        _token: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    feeLib(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    rewardAdded(overrides?: CallOverrides): Promise<boolean>

    scores(payer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    sum(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<string>

    totalRewards(overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    tryAdd(
        _payer: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        END_TIME(overrides?: CallOverrides): Promise<BigNumber>

        START_TIME(overrides?: CallOverrides): Promise<BigNumber>

        addReward(
            _token: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        claimReward(overrides?: CallOverrides): Promise<void>

        feeLib(overrides?: CallOverrides): Promise<string>

        owner(overrides?: CallOverrides): Promise<string>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        rewardAdded(overrides?: CallOverrides): Promise<boolean>

        scores(payer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        sum(overrides?: CallOverrides): Promise<BigNumber>

        token(overrides?: CallOverrides): Promise<string>

        totalRewards(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        tryAdd(
            _payer: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
    }

    estimateGas: {
        END_TIME(overrides?: CallOverrides): Promise<BigNumber>

        START_TIME(overrides?: CallOverrides): Promise<BigNumber>

        addReward(
            _token: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        feeLib(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        rewardAdded(overrides?: CallOverrides): Promise<BigNumber>

        scores(payer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        sum(overrides?: CallOverrides): Promise<BigNumber>

        token(overrides?: CallOverrides): Promise<BigNumber>

        totalRewards(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        tryAdd(
            _payer: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        END_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>

        START_TIME(overrides?: CallOverrides): Promise<PopulatedTransaction>

        addReward(
            _token: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        claimReward(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        feeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        rewardAdded(overrides?: CallOverrides): Promise<PopulatedTransaction>

        scores(payer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        sum(overrides?: CallOverrides): Promise<PopulatedTransaction>

        token(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        tryAdd(
            _payer: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
