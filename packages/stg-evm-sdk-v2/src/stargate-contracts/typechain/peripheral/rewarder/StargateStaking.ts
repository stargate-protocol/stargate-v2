/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export interface StargateStakingInterface extends utils.Interface {
    functions: {
        'balanceOf(address,address)': FunctionFragment
        'claim(address[])': FunctionFragment
        'deposit(address,uint256)': FunctionFragment
        'depositTo(address,address,uint256)': FunctionFragment
        'emergencyWithdraw(address)': FunctionFragment
        'isPool(address)': FunctionFragment
        'owner()': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'rewarder(address)': FunctionFragment
        'setPool(address,address)': FunctionFragment
        'tokens(uint256,uint256)': FunctionFragment
        'tokens()': FunctionFragment
        'tokensLength()': FunctionFragment
        'totalSupply(address)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'withdraw(address,uint256)': FunctionFragment
        'withdrawToAndCall(address,address,uint256,bytes)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'balanceOf'
            | 'claim'
            | 'deposit'
            | 'depositTo'
            | 'emergencyWithdraw'
            | 'isPool'
            | 'owner'
            | 'renounceOwnership'
            | 'rewarder'
            | 'setPool'
            | 'tokens(uint256,uint256)'
            | 'tokens()'
            | 'tokensLength'
            | 'totalSupply'
            | 'transferOwnership'
            | 'withdraw'
            | 'withdrawToAndCall'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'claim', values: [PromiseOrValue<string>[]]): string
    encodeFunctionData(
        functionFragment: 'deposit',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'depositTo',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'emergencyWithdraw', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'isPool', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'rewarder', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'setPool', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'tokens(uint256,uint256)',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'tokens()', values?: undefined): string
    encodeFunctionData(functionFragment: 'tokensLength', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalSupply', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'withdraw',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawToAndCall',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
        ]
    ): string

    decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'claim', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'depositTo', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isPool', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'rewarder', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setPool', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'tokens(uint256,uint256)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'tokens()', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'tokensLength', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawToAndCall', data: BytesLike): Result

    events: {
        'Deposit(address,address,address,uint256)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'PoolSet(address,address,bool)': EventFragment
        'Withdraw(address,address,address,uint256,bool)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'Deposit'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PoolSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
}

export interface DepositEventObject {
    token: string
    from: string
    to: string
    amount: BigNumber
}
export type DepositEvent = TypedEvent<[string, string, string, BigNumber], DepositEventObject>

export type DepositEventFilter = TypedEventFilter<DepositEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PoolSetEventObject {
    token: string
    rewarder: string
    exists: boolean
}
export type PoolSetEvent = TypedEvent<[string, string, boolean], PoolSetEventObject>

export type PoolSetEventFilter = TypedEventFilter<PoolSetEvent>

export interface WithdrawEventObject {
    token: string
    from: string
    to: string
    amount: BigNumber
    withUpdate: boolean
}
export type WithdrawEvent = TypedEvent<[string, string, string, BigNumber, boolean], WithdrawEventObject>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface StargateStaking extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: StargateStakingInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        balanceOf(
            token: PromiseOrValue<string>,
            user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        claim(
            lpTokens: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        deposit(
            token: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        depositTo(
            token: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        emergencyWithdraw(
            token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        isPool(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

        owner(overrides?: CallOverrides): Promise<[string]>

        renounceOwnership(overrides?: CallOverrides): Promise<[void]>

        rewarder(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>

        setPool(
            token: PromiseOrValue<string>,
            newRewarder: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        'tokens(uint256,uint256)'(
            start: PromiseOrValue<BigNumberish>,
            end: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string[]]>

        'tokens()'(overrides?: CallOverrides): Promise<[string[]]>

        tokensLength(overrides?: CallOverrides): Promise<[BigNumber]>

        totalSupply(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdraw(
            token: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawToAndCall(
            token: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    balanceOf(
        token: PromiseOrValue<string>,
        user: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    claim(
        lpTokens: PromiseOrValue<string>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    deposit(
        token: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    depositTo(
        token: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    emergencyWithdraw(
        token: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    isPool(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    rewarder(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

    setPool(
        token: PromiseOrValue<string>,
        newRewarder: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'tokens(uint256,uint256)'(
        start: PromiseOrValue<BigNumberish>,
        end: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string[]>

    'tokens()'(overrides?: CallOverrides): Promise<string[]>

    tokensLength(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdraw(
        token: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawToAndCall(
        token: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        data: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        balanceOf(
            token: PromiseOrValue<string>,
            user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        claim(lpTokens: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<void>

        deposit(
            token: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        depositTo(
            token: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        emergencyWithdraw(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        isPool(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        owner(overrides?: CallOverrides): Promise<string>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        rewarder(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

        setPool(
            token: PromiseOrValue<string>,
            newRewarder: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        'tokens(uint256,uint256)'(
            start: PromiseOrValue<BigNumberish>,
            end: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string[]>

        'tokens()'(overrides?: CallOverrides): Promise<string[]>

        tokensLength(overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        withdraw(
            token: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        withdrawToAndCall(
            token: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'Deposit(address,address,address,uint256)'(
            token?: PromiseOrValue<string> | null,
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            amount?: null
        ): DepositEventFilter
        Deposit(
            token?: PromiseOrValue<string> | null,
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            amount?: null
        ): DepositEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'PoolSet(address,address,bool)'(
            token?: PromiseOrValue<string> | null,
            rewarder?: null,
            exists?: null
        ): PoolSetEventFilter
        PoolSet(token?: PromiseOrValue<string> | null, rewarder?: null, exists?: null): PoolSetEventFilter

        'Withdraw(address,address,address,uint256,bool)'(
            token?: PromiseOrValue<string> | null,
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            amount?: null,
            withUpdate?: null
        ): WithdrawEventFilter
        Withdraw(
            token?: PromiseOrValue<string> | null,
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            amount?: null,
            withUpdate?: null
        ): WithdrawEventFilter
    }

    estimateGas: {
        balanceOf(
            token: PromiseOrValue<string>,
            user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        claim(
            lpTokens: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        deposit(
            token: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        depositTo(
            token: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        emergencyWithdraw(
            token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        isPool(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>

        rewarder(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        setPool(
            token: PromiseOrValue<string>,
            newRewarder: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        'tokens(uint256,uint256)'(
            start: PromiseOrValue<BigNumberish>,
            end: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'tokens()'(overrides?: CallOverrides): Promise<BigNumber>

        tokensLength(overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdraw(
            token: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawToAndCall(
            token: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        balanceOf(
            token: PromiseOrValue<string>,
            user: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        claim(
            lpTokens: PromiseOrValue<string>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        deposit(
            token: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        depositTo(
            token: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        emergencyWithdraw(
            token: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        isPool(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>

        rewarder(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        setPool(
            token: PromiseOrValue<string>,
            newRewarder: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        'tokens(uint256,uint256)'(
            start: PromiseOrValue<BigNumberish>,
            end: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'tokens()'(overrides?: CallOverrides): Promise<PopulatedTransaction>

        tokensLength(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalSupply(token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdraw(
            token: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawToAndCall(
            token: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            data: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
