/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import type { Provider } from '@ethersproject/providers'
import type { ICreditMessaging, ICreditMessagingInterface } from '../../interfaces/ICreditMessaging'

const _abi = [
    {
        inputs: [
            {
                internalType: 'uint32',
                name: '_dstEid',
                type: 'uint32',
            },
            {
                components: [
                    {
                        internalType: 'uint16',
                        name: 'assetId',
                        type: 'uint16',
                    },
                    {
                        components: [
                            {
                                internalType: 'uint32',
                                name: 'srcEid',
                                type: 'uint32',
                            },
                            {
                                internalType: 'uint64',
                                name: 'amount',
                                type: 'uint64',
                            },
                            {
                                internalType: 'uint64',
                                name: 'minAmount',
                                type: 'uint64',
                            },
                        ],
                        internalType: 'struct TargetCredit[]',
                        name: 'credits',
                        type: 'tuple[]',
                    },
                ],
                internalType: 'struct TargetCreditBatch[]',
                name: '_creditBatches',
                type: 'tuple[]',
            },
        ],
        name: 'quoteSendCredits',
        outputs: [
            {
                components: [
                    {
                        internalType: 'uint256',
                        name: 'nativeFee',
                        type: 'uint256',
                    },
                    {
                        internalType: 'uint256',
                        name: 'lzTokenFee',
                        type: 'uint256',
                    },
                ],
                internalType: 'struct MessagingFee',
                name: 'fee',
                type: 'tuple',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint32',
                name: '_dstEid',
                type: 'uint32',
            },
            {
                components: [
                    {
                        internalType: 'uint16',
                        name: 'assetId',
                        type: 'uint16',
                    },
                    {
                        components: [
                            {
                                internalType: 'uint32',
                                name: 'srcEid',
                                type: 'uint32',
                            },
                            {
                                internalType: 'uint64',
                                name: 'amount',
                                type: 'uint64',
                            },
                            {
                                internalType: 'uint64',
                                name: 'minAmount',
                                type: 'uint64',
                            },
                        ],
                        internalType: 'struct TargetCredit[]',
                        name: 'credits',
                        type: 'tuple[]',
                    },
                ],
                internalType: 'struct TargetCreditBatch[]',
                name: '_creditBatches',
                type: 'tuple[]',
            },
        ],
        name: 'sendCredits',
        outputs: [],
        stateMutability: 'payable',
        type: 'function',
    },
] as const

export class ICreditMessaging__factory {
    static readonly abi = _abi
    static createInterface(): ICreditMessagingInterface {
        return new utils.Interface(_abi) as ICreditMessagingInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): ICreditMessaging {
        return new Contract(address, _abi, signerOrProvider) as ICreditMessaging
    }
}
