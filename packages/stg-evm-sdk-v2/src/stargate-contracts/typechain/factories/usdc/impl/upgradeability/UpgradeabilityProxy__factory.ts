/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../../../common'
import type {
    UpgradeabilityProxy,
    UpgradeabilityProxyInterface,
} from '../../../../usdc/impl/upgradeability/UpgradeabilityProxy'

const _abi = [
    {
        inputs: [
            {
                internalType: 'address',
                name: 'implementationContract',
                type: 'address',
            },
        ],
        stateMutability: 'nonpayable',
        type: 'constructor',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'address',
                name: 'implementation',
                type: 'address',
            },
        ],
        name: 'Upgraded',
        type: 'event',
    },
    {
        stateMutability: 'payable',
        type: 'fallback',
    },
] as const

const _bytecode =
    '0x608060405234801561001057600080fd5b506040516101b53803806101b583398101604081905261002f916100e3565b6100388161003e565b50610113565b6001600160a01b0381163b6100bf5760405162461bcd60e51b815260206004820152603b60248201527f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60448201527f6e20746f2061206e6f6e2d636f6e747261637420616464726573730000000000606482015260840160405180910390fd5b7f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c355565b6000602082840312156100f557600080fd5b81516001600160a01b038116811461010c57600080fd5b9392505050565b6094806101216000396000f3fe6080604052600a600c565b005b603960357f7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c35490565b603b565b565b3660008037600080366000845af43d6000803e8080156059573d6000f35b3d6000fdfea26469706673582212205e3b1f8f893834454dfc5fb1aa056f54c1f31790f127e1a85d7ab980fc308e5964736f6c63430008160033'

type UpgradeabilityProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: UpgradeabilityProxyConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1

export class UpgradeabilityProxy__factory extends ContractFactory {
    constructor(...args: UpgradeabilityProxyConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args)
        } else {
            super(_abi, _bytecode, args[0])
        }
    }

    override deploy(
        implementationContract: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<UpgradeabilityProxy> {
        return super.deploy(implementationContract, overrides || {}) as Promise<UpgradeabilityProxy>
    }
    override getDeployTransaction(
        implementationContract: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): TransactionRequest {
        return super.getDeployTransaction(implementationContract, overrides || {})
    }
    override attach(address: string): UpgradeabilityProxy {
        return super.attach(address) as UpgradeabilityProxy
    }
    override connect(signer: Signer): UpgradeabilityProxy__factory {
        return super.connect(signer) as UpgradeabilityProxy__factory
    }

    static readonly bytecode = _bytecode
    static readonly abi = _abi
    static createInterface(): UpgradeabilityProxyInterface {
        return new utils.Interface(_abi) as UpgradeabilityProxyInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): UpgradeabilityProxy {
        return new Contract(address, _abi, signerOrProvider) as UpgradeabilityProxy
    }
}
