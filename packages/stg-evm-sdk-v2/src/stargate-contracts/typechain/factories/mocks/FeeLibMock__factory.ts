/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../common'
import type { FeeLibMock, FeeLibMockInterface } from '../../mocks/FeeLibMock'

const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'sender',
                        type: 'address',
                    },
                    {
                        internalType: 'uint32',
                        name: 'dstEid',
                        type: 'uint32',
                    },
                    {
                        internalType: 'uint64',
                        name: 'amountInSD',
                        type: 'uint64',
                    },
                    {
                        internalType: 'uint64',
                        name: 'deficitSD',
                        type: 'uint64',
                    },
                    {
                        internalType: 'bool',
                        name: 'toOFT',
                        type: 'bool',
                    },
                    {
                        internalType: 'bool',
                        name: 'isTaxi',
                        type: 'bool',
                    },
                ],
                internalType: 'struct FeeParams',
                name: '_params',
                type: 'tuple',
            },
        ],
        name: 'applyFee',
        outputs: [
            {
                internalType: 'uint64',
                name: 'amountOutSD',
                type: 'uint64',
            },
        ],
        stateMutability: 'pure',
        type: 'function',
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'sender',
                        type: 'address',
                    },
                    {
                        internalType: 'uint32',
                        name: 'dstEid',
                        type: 'uint32',
                    },
                    {
                        internalType: 'uint64',
                        name: 'amountInSD',
                        type: 'uint64',
                    },
                    {
                        internalType: 'uint64',
                        name: 'deficitSD',
                        type: 'uint64',
                    },
                    {
                        internalType: 'bool',
                        name: 'toOFT',
                        type: 'bool',
                    },
                    {
                        internalType: 'bool',
                        name: 'isTaxi',
                        type: 'bool',
                    },
                ],
                internalType: 'struct FeeParams',
                name: '_params',
                type: 'tuple',
            },
        ],
        name: 'applyFeeView',
        outputs: [
            {
                internalType: 'uint64',
                name: 'amountOutSD',
                type: 'uint64',
            },
        ],
        stateMutability: 'pure',
        type: 'function',
    },
] as const

const _bytecode =
    '0x608060405234801561001057600080fd5b5060f58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c806343d9564d14603757806381993cd0146037575b600080fd5b604660423660046079565b6063565b60405167ffffffffffffffff909116815260200160405180910390f35b6000607360608301604084016090565b92915050565b600060c08284031215608a57600080fd5b50919050565b60006020828403121560a157600080fd5b813567ffffffffffffffff8116811460b857600080fd5b939250505056fea26469706673582212207fd6ff55f41b5d597df7126ff0b33637b4e60c9fbe1edaae3744555ac0eb256e64736f6c63430008160033'

type FeeLibMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: FeeLibMockConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1

export class FeeLibMock__factory extends ContractFactory {
    constructor(...args: FeeLibMockConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args)
        } else {
            super(_abi, _bytecode, args[0])
        }
    }

    override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<FeeLibMock> {
        return super.deploy(overrides || {}) as Promise<FeeLibMock>
    }
    override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {})
    }
    override attach(address: string): FeeLibMock {
        return super.attach(address) as FeeLibMock
    }
    override connect(signer: Signer): FeeLibMock__factory {
        return super.connect(signer) as FeeLibMock__factory
    }

    static readonly bytecode = _bytecode
    static readonly abi = _abi
    static createInterface(): FeeLibMockInterface {
        return new utils.Interface(_abi) as FeeLibMockInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): FeeLibMock {
        return new Contract(address, _abi, signerOrProvider) as FeeLibMock
    }
}
