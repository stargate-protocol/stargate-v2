/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../common'
import type { BlacklistableMock, BlacklistableMockInterface } from '../../mocks/BlacklistableMock'

const _abi = [
    {
        inputs: [],
        stateMutability: 'nonpayable',
        type: 'constructor',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: '_account',
                type: 'address',
            },
        ],
        name: 'Blacklisted',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'newBlacklister',
                type: 'address',
            },
        ],
        name: 'BlacklisterChanged',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'address',
                name: 'previousOwner',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'address',
                name: 'newOwner',
                type: 'address',
            },
        ],
        name: 'OwnershipTransferred',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: '_account',
                type: 'address',
            },
        ],
        name: 'UnBlacklisted',
        type: 'event',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_account',
                type: 'address',
            },
        ],
        name: 'blacklist',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [],
        name: 'blacklister',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_account',
                type: 'address',
            },
        ],
        name: 'isBlacklisted',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'owner',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'newOwner',
                type: 'address',
            },
        ],
        name: 'transferOwnership',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_account',
                type: 'address',
            },
        ],
        name: 'unBlacklist',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_newBlacklister',
                type: 'address',
            },
        ],
        name: 'updateBlacklister',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
] as const

const _bytecode =
    '0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055600180546001600160a01b03191633179055610722806100446000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063bd1024301161005b578063bd102430146100ee578063f2fde38b1461010e578063f9f92be414610121578063fe575a871461013457600080fd5b80631a895266146100825780638da5cb5b14610097578063ad38bf22146100db575b600080fd5b6100956100903660046106af565b61017d565b005b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100956100e93660046106af565b6102a3565b6001546100b19073ffffffffffffffffffffffffffffffffffffffff1681565b61009561011c3660046106af565b610402565b61009561012f3660046106af565b610589565b61016d6101423660046106af565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602052604090205460ff1690565b60405190151581526020016100d2565b60015473ffffffffffffffffffffffffffffffffffffffff16331461020f5760405162461bcd60e51b815260206004820152602c60248201527f426c61636b6c69737461626c653a2063616c6c6572206973206e6f742074686560448201527f20626c61636b6c6973746572000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61025f8173ffffffffffffffffffffffffffffffffffffffff16600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e90600090a250565b60005473ffffffffffffffffffffffffffffffffffffffff16331461030a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610206565b73ffffffffffffffffffffffffffffffffffffffff81166103935760405162461bcd60e51b815260206004820152603260248201527f426c61636b6c69737461626c653a206e657720626c61636b6c6973746572206960448201527f7320746865207a65726f206164647265737300000000000000000000000000006064820152608401610206565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fc67398012c111ce95ecb7429b933096c977380ee6c421175a71a4a4c6c88c06e90600090a250565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610206565b73ffffffffffffffffffffffffffffffffffffffff81166104f25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610206565b6000546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0910160405180910390a1600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831617905550565b60015473ffffffffffffffffffffffffffffffffffffffff1633146106165760405162461bcd60e51b815260206004820152602c60248201527f426c61636b6c69737461626c653a2063616c6c6572206973206e6f742074686560448201527f20626c61636b6c697374657200000000000000000000000000000000000000006064820152608401610206565b61066b8173ffffffffffffffffffffffffffffffffffffffff8116600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905550565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b85590600090a250565b6000602082840312156106c157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146106e557600080fd5b939250505056fea2646970667358221220442a66f0610d310d3bf39650255b641a279b4f383380077dde1d95d1515745fe64736f6c63430008160033'

type BlacklistableMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: BlacklistableMockConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1

export class BlacklistableMock__factory extends ContractFactory {
    constructor(...args: BlacklistableMockConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args)
        } else {
            super(_abi, _bytecode, args[0])
        }
    }

    override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BlacklistableMock> {
        return super.deploy(overrides || {}) as Promise<BlacklistableMock>
    }
    override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {})
    }
    override attach(address: string): BlacklistableMock {
        return super.attach(address) as BlacklistableMock
    }
    override connect(signer: Signer): BlacklistableMock__factory {
        return super.connect(signer) as BlacklistableMock__factory
    }

    static readonly bytecode = _bytecode
    static readonly abi = _abi
    static createInterface(): BlacklistableMockInterface {
        return new utils.Interface(_abi) as BlacklistableMockInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): BlacklistableMock {
        return new Contract(address, _abi, signerOrProvider) as BlacklistableMock
    }
}
