/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import type { Provider } from '@ethersproject/providers'
import type {
    IStargateZapperV1,
    IStargateZapperV1Interface,
} from '../../../../peripheral/zapper/interfaces/IStargateZapperV1'

const _abi = [
    {
        inputs: [
            {
                internalType: 'uint256',
                name: 'actual',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'expect',
                type: 'uint256',
            },
        ],
        name: 'StargateZapperV1__IncorrectNative',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: 'actual',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'expect',
                type: 'uint256',
            },
        ],
        name: 'StargateZapperV1__InsufficientOutputAmount',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'uint16',
                name: 'poolId',
                type: 'uint16',
            },
        ],
        name: 'StargateZapperV1__InvalidPoolId',
        type: 'error',
    },
    {
        inputs: [],
        name: 'StargateZapperV1__NativeTransferFailed',
        type: 'error',
    },
    {
        inputs: [],
        name: 'StargateZapperV1__OnlyCallableByStaking',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'contract IERC20',
                name: 'lpToken',
                type: 'address',
            },
        ],
        name: 'StargateZapperV1__UnknownLpToken',
        type: 'error',
    },
    {
        inputs: [],
        name: 'StargateZapperV1__ZeroAmount',
        type: 'error',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'contract IERC20',
                name: 'lpToken',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'contract IStargatePool',
                name: 'pool',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'contract IERC20',
                name: 'asset',
                type: 'address',
            },
        ],
        name: 'LpConfigured',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'token',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'receiver',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
            },
        ],
        name: 'TokenSwept',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'uint16',
                name: 'poolId',
                type: 'uint16',
            },
            {
                indexed: true,
                internalType: 'contract IERC20',
                name: 'v1LpToken',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'contract IERC20',
                name: 'v2LpToken',
                type: 'address',
            },
        ],
        name: 'V1PoolConfigured',
        type: 'event',
    },
    {
        inputs: [
            {
                internalType: 'contract IERC20',
                name: 'lpToken',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: 'assetInAmount',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'minStakeAmount',
                type: 'uint256',
            },
        ],
        name: 'depositAndStake',
        outputs: [],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'contract IERC20',
                name: 'lpToken',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: 'assetInAmount',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'minStakeAmount',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'deadline',
                type: 'uint256',
            },
            {
                internalType: 'uint8',
                name: 'v',
                type: 'uint8',
            },
            {
                internalType: 'bytes32',
                name: 'r',
                type: 'bytes32',
            },
            {
                internalType: 'bytes32',
                name: 's',
                type: 'bytes32',
            },
        ],
        name: 'depositAndStakeWithPermit',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint16',
                name: 'poolId',
                type: 'uint16',
            },
            {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'minStakeAmount',
                type: 'uint256',
            },
        ],
        name: 'migrateV1LpToV2Stake',
        outputs: [],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint16',
                name: 'poolId',
                type: 'uint16',
            },
            {
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'minStakeAmount',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'deadline',
                type: 'uint256',
            },
            {
                internalType: 'uint8',
                name: 'v',
                type: 'uint8',
            },
            {
                internalType: 'bytes32',
                name: 'r',
                type: 'bytes32',
            },
            {
                internalType: 'bytes32',
                name: 's',
                type: 'bytes32',
            },
        ],
        name: 'migrateV1LpToV2StakeWithPermit',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'contract IERC20',
                name: 'token',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'from',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
            },
            {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes',
            },
        ],
        name: 'onWithdrawReceived',
        outputs: [
            {
                internalType: 'bytes4',
                name: '',
                type: 'bytes4',
            },
        ],
        stateMutability: 'nonpayable',
        type: 'function',
    },
] as const

export class IStargateZapperV1__factory {
    static readonly abi = _abi
    static createInterface(): IStargateZapperV1Interface {
        return new utils.Interface(_abi) as IStargateZapperV1Interface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): IStargateZapperV1 {
        return new Contract(address, _abi, signerOrProvider) as IStargateZapperV1
    }
}
