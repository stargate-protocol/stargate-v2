/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../common'
import type { Planner, PlannerInterface } from '../../peripheral/Planner'

const _abi = [
    {
        inputs: [
            {
                internalType: 'uint256',
                name: 'index',
                type: 'uint256',
            },
            {
                internalType: 'bytes',
                name: 'reason',
                type: 'bytes',
            },
        ],
        name: 'CallFailed',
        type: 'error',
    },
    {
        inputs: [],
        name: 'Transfer_ApproveFailed',
        type: 'error',
    },
    {
        inputs: [],
        name: 'Transfer_TransferFailed',
        type: 'error',
    },
    {
        anonymous: false,
        inputs: [
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'target',
                        type: 'address',
                    },
                    {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes',
                    },
                    {
                        internalType: 'uint256',
                        name: 'value',
                        type: 'uint256',
                    },
                    {
                        internalType: 'bool',
                        name: 'allowFailure',
                        type: 'bool',
                    },
                ],
                indexed: false,
                internalType: 'struct Planner.Call[]',
                name: 'calls',
                type: 'tuple[]',
            },
            {
                components: [
                    {
                        internalType: 'bool',
                        name: 'success',
                        type: 'bool',
                    },
                    {
                        internalType: 'bytes',
                        name: 'returnData',
                        type: 'bytes',
                    },
                ],
                indexed: false,
                internalType: 'struct Planner.Result[]',
                name: 'results',
                type: 'tuple[]',
            },
        ],
        name: 'Multicalled',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'previousOwner',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'newOwner',
                type: 'address',
            },
        ],
        name: 'OwnershipTransferred',
        type: 'event',
    },
    {
        inputs: [],
        name: 'getTransferGasLimit',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'address',
                        name: 'target',
                        type: 'address',
                    },
                    {
                        internalType: 'bytes',
                        name: 'data',
                        type: 'bytes',
                    },
                    {
                        internalType: 'uint256',
                        name: 'value',
                        type: 'uint256',
                    },
                    {
                        internalType: 'bool',
                        name: 'allowFailure',
                        type: 'bool',
                    },
                ],
                internalType: 'struct Planner.Call[]',
                name: '_calls',
                type: 'tuple[]',
            },
        ],
        name: 'multicall',
        outputs: [
            {
                components: [
                    {
                        internalType: 'bool',
                        name: 'success',
                        type: 'bool',
                    },
                    {
                        internalType: 'bytes',
                        name: 'returnData',
                        type: 'bytes',
                    },
                ],
                internalType: 'struct Planner.Result[]',
                name: 'results',
                type: 'tuple[]',
            },
        ],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        inputs: [],
        name: 'owner',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'renounceOwnership',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: '_gasLimit',
                type: 'uint256',
            },
        ],
        name: 'setTransferGasLimit',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'newOwner',
                type: 'address',
            },
        ],
        name: 'transferOwnership',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_token',
                type: 'address',
            },
            {
                internalType: 'address',
                name: '_to',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: '_amount',
                type: 'uint256',
            },
        ],
        name: 'withdrawFee',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        stateMutability: 'payable',
        type: 'receive',
    },
] as const

const _bytecode =
    '0x60806040526108fc60015534801561001657600080fd5b5061002033610025565b610075565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610c6e806100846000396000f3fe6080604052600436106100745760003560e01c80638c70830b1161004e5780638c70830b146100da5780638da5cb5b146100fa578063cffb5cd61461012f578063f2fde38b1461014f57600080fd5b80631095b6d714610080578063715018a6146100a257806388543f0e146100b757600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b506100a061009b36600461074e565b61016f565b005b3480156100ae57600080fd5b506100a061018a565b3480156100c357600080fd5b506001546040519081526020015b60405180910390f35b3480156100e657600080fd5b506100a06100f536600461078a565b61019e565b34801561010657600080fd5b5060005460405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100d1565b61014261013d3660046107a3565b6101ab565b6040516100d191906108d6565b34801561015b57600080fd5b506100a061016a3660046108f0565b6103b6565b61017761046d565b61018483838360006104ee565b50505050565b61019261046d565b61019c6000610533565b565b6101a661046d565b600155565b60606101b561046d565b8167ffffffffffffffff8111156101ce576101ce61090b565b60405190808252806020026020018201604052801561021457816020015b6040805180820190915260008152606060208201528152602001906001900390816101ec5790505b50905060005b8281101561037457368484838181106102355761023561093a565b90506020028101906102479190610969565b905060008061025960208401846108f0565b73ffffffffffffffffffffffffffffffffffffffff16604084013561028160208601866109a7565b60405161028f929190610a13565b60006040518083038185875af1925050503d80600081146102cc576040519150601f19603f3d011682016040523d82523d6000602084013e6102d1565b606091505b5090925090506102e76080840160608501610a3c565b80156102f1575081155b156103355783816040517f5c0dee5d00000000000000000000000000000000000000000000000000000000815260040161032c929190610a59565b60405180910390fd5b604051806040016040528083151581526020018281525085858151811061035e5761035e61093a565b602090810291909101015250505060010161021a565b507f4a5907487b59cde6c64214888ce4cd6c47c19ec365519580cafbf9d3ef50e7798383836040516103a893929190610a9d565b60405180910390a192915050565b6103be61046d565b73ffffffffffffffffffffffffffffffffffffffff8116610461576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161032c565b61046a81610533565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461019c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161032c565b600073ffffffffffffffffffffffffffffffffffffffff851661051d576105168484846105a8565b905061052b565b6105288585856105cf565b90505b949350505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080826105b6575a6105ba565b6001545b9050600080600080878986f195945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905260009061052b9085907fa9059cbb000000000000000000000000000000000000000000000000000000009060640160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915260008060008473ffffffffffffffffffffffffffffffffffffffff16846040516106ac9190610c09565b6000604051808303816000865af19150503d80600081146106e9576040519150601f19603f3d011682016040523d82523d6000602084013e6106ee565b606091505b5091509150816106ff57600061071c565b8051158061071c57508080602001905181019061071c9190610c1b565b95945050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461074957600080fd5b919050565b60008060006060848603121561076357600080fd5b61076c84610725565b925061077a60208501610725565b9150604084013590509250925092565b60006020828403121561079c57600080fd5b5035919050565b600080602083850312156107b657600080fd5b823567ffffffffffffffff808211156107ce57600080fd5b818501915085601f8301126107e257600080fd5b8135818111156107f157600080fd5b8660208260051b850101111561080657600080fd5b60209290920196919550909350505050565b60005b8381101561083357818101518382015260200161081b565b50506000910152565b60008151808452610854816020860160208601610818565b601f01601f19169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b848110156108c957858303601f19018952815180511515845284015160408585018190526108b58186018361083c565b9a86019a9450505090830190600101610885565b5090979650505050505050565b6020815260006108e96020830184610868565b9392505050565b60006020828403121561090257600080fd5b6108e982610725565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8183360301811261099d57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126109dc57600080fd5b83018035915067ffffffffffffffff8211156109f757600080fd5b602001915036819003821315610a0c57600080fd5b9250929050565b8183823760009101908152919050565b801515811461046a57600080fd5b803561074981610a23565b600060208284031215610a4e57600080fd5b81356108e981610a23565b82815260406020820152600061052b604083018461083c565b818352818160208501375060006020828401015260006020601f19601f840116840101905092915050565b60408082528181018490526000906060808401600587901b8501820188855b89811015610be8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa088840301845281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff818c3603018112610b1d57600080fd5b8b01608073ffffffffffffffffffffffffffffffffffffffff610b3f83610725565b1685526020808301357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610b7857600080fd5b8301818101903567ffffffffffffffff811115610b9457600080fd5b803603821315610ba357600080fd5b8383890152610bb58489018284610a72565b935050508883013589870152610bcc888401610a31565b1515958801959095529484019493929092019150600101610abc565b50508581036020870152610bfc8188610868565b9998505050505050505050565b6000825161099d818460208701610818565b600060208284031215610c2d57600080fd5b81516108e981610a2356fea26469706673582212204900f85a5a3b282a3f1d6638a0065488bf3ab124e97cf62a817ead5fea2e319a64736f6c63430008160033'

type PlannerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: PlannerConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Planner__factory extends ContractFactory {
    constructor(...args: PlannerConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args)
        } else {
            super(_abi, _bytecode, args[0])
        }
    }

    override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Planner> {
        return super.deploy(overrides || {}) as Promise<Planner>
    }
    override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {})
    }
    override attach(address: string): Planner {
        return super.attach(address) as Planner
    }
    override connect(signer: Signer): Planner__factory {
        return super.connect(signer) as Planner__factory
    }

    static readonly bytecode = _bytecode
    static readonly abi = _abi
    static createInterface(): PlannerInterface {
        return new utils.Interface(_abi) as PlannerInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): Planner {
        return new Contract(address, _abi, signerOrProvider) as Planner
    }
}
