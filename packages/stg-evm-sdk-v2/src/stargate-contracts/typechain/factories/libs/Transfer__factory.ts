/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../common'
import type { Transfer, TransferInterface } from '../../libs/Transfer'

const _abi = [
    {
        inputs: [],
        name: 'Transfer_ApproveFailed',
        type: 'error',
    },
    {
        inputs: [],
        name: 'Transfer_TransferFailed',
        type: 'error',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'previousOwner',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'newOwner',
                type: 'address',
            },
        ],
        name: 'OwnershipTransferred',
        type: 'event',
    },
    {
        inputs: [],
        name: 'getTransferGasLimit',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'owner',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'renounceOwnership',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: '_gasLimit',
                type: 'uint256',
            },
        ],
        name: 'setTransferGasLimit',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'newOwner',
                type: 'address',
            },
        ],
        name: 'transferOwnership',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
] as const

const _bytecode =
    '0x60806040526108fc60015534801561001657600080fd5b5061002033610025565b610075565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610339806100846000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80638c70830b116100505780638c70830b1461008c5780638da5cb5b1461009f578063f2fde38b146100c757600080fd5b8063715018a61461006c57806388543f0e14610076575b600080fd5b6100746100da565b005b6001546040519081526020015b60405180910390f35b61007461009a3660046102ad565b6100ee565b60005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610083565b6100746100d53660046102c6565b6100fb565b6100e26101b7565b6100ec6000610238565b565b6100f66101b7565b600155565b6101036101b7565b73ffffffffffffffffffffffffffffffffffffffff81166101ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6101b481610238565b50565b60005473ffffffffffffffffffffffffffffffffffffffff1633146100ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101a2565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156102bf57600080fd5b5035919050565b6000602082840312156102d857600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146102fc57600080fd5b939250505056fea2646970667358221220c3258e7f2e0c250bbf2882189c66f12075c066b832ccca3b04f90b784a970ae864736f6c63430008160033'

type TransferConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: TransferConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
    xs.length > 1

export class Transfer__factory extends ContractFactory {
    constructor(...args: TransferConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args)
        } else {
            super(_abi, _bytecode, args[0])
        }
    }

    override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Transfer> {
        return super.deploy(overrides || {}) as Promise<Transfer>
    }
    override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {})
    }
    override attach(address: string): Transfer {
        return super.attach(address) as Transfer
    }
    override connect(signer: Signer): Transfer__factory {
        return super.connect(signer) as Transfer__factory
    }

    static readonly bytecode = _bytecode
    static readonly abi = _abi
    static createInterface(): TransferInterface {
        return new utils.Interface(_abi) as TransferInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): Transfer {
        return new Contract(address, _abi, signerOrProvider) as Transfer
    }
}
