/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../../common'
import type { BusLib, BusLibInterface } from '../../../libs/Bus.sol/BusLib'

const _abi = [
    {
        inputs: [
            {
                internalType: 'bool',
                name: 'nativeDrop',
                type: 'bool',
            },
        ],
        name: 'Bus_InvalidFare',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'uint8',
                name: 'numPassengers',
                type: 'uint8',
            },
        ],
        name: 'Bus_InvalidNumPassengers',
        type: 'error',
    },
    {
        inputs: [],
        name: 'Bus_InvalidPassenger',
        type: 'error',
    },
    {
        inputs: [],
        name: 'Bus_InvalidStartTicket',
        type: 'error',
    },
    {
        inputs: [],
        name: 'Bus_QueueFull',
        type: 'error',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'uint32',
                name: 'dstEid',
                type: 'uint32',
            },
            {
                indexed: false,
                internalType: 'uint72',
                name: 'startTicketId',
                type: 'uint72',
            },
            {
                indexed: false,
                internalType: 'uint8',
                name: 'numPassengers',
                type: 'uint8',
            },
            {
                indexed: false,
                internalType: 'bytes32',
                name: 'guid',
                type: 'bytes32',
            },
        ],
        name: 'BusDriven',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'uint32',
                name: 'dstEid',
                type: 'uint32',
            },
            {
                indexed: false,
                internalType: 'uint72',
                name: 'ticketId',
                type: 'uint72',
            },
            {
                indexed: false,
                internalType: 'uint80',
                name: 'fare',
                type: 'uint80',
            },
            {
                indexed: false,
                internalType: 'bytes',
                name: 'passenger',
                type: 'bytes',
            },
        ],
        name: 'BusRode',
        type: 'event',
    },
] as const

const _bytecode =
    '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200bd85b0f5e79c0bb4b9b8f1bb93376bd556836e72cbcb0cb5b12d638b817e0af64736f6c63430008160033'

type BusLibConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: BusLibConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class BusLib__factory extends ContractFactory {
    constructor(...args: BusLibConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args)
        } else {
            super(_abi, _bytecode, args[0])
        }
    }

    override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BusLib> {
        return super.deploy(overrides || {}) as Promise<BusLib>
    }
    override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {})
    }
    override attach(address: string): BusLib {
        return super.attach(address) as BusLib
    }
    override connect(signer: Signer): BusLib__factory {
        return super.connect(signer) as BusLib__factory
    }

    static readonly bytecode = _bytecode
    static readonly abi = _abi
    static createInterface(): BusLibInterface {
        return new utils.Interface(_abi) as BusLibInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): BusLib {
        return new Contract(address, _abi, signerOrProvider) as BusLib
    }
}
