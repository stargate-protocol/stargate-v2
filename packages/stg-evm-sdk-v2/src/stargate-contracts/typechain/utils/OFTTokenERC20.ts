/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export interface OFTTokenERC20Interface extends utils.Interface {
    functions: {
        'addMinter(address)': FunctionFragment
        'allowance(address,address)': FunctionFragment
        'approve(address,uint256)': FunctionFragment
        'balanceOf(address)': FunctionFragment
        'burnFrom(address,uint256)': FunctionFragment
        'decimals()': FunctionFragment
        'decreaseAllowance(address,uint256)': FunctionFragment
        'increaseAllowance(address,uint256)': FunctionFragment
        'mint(address,uint256)': FunctionFragment
        'minters(address)': FunctionFragment
        'name()': FunctionFragment
        'owner()': FunctionFragment
        'removeMinter(address)': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'symbol()': FunctionFragment
        'totalSupply()': FunctionFragment
        'transfer(address,uint256)': FunctionFragment
        'transferFrom(address,address,uint256)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'addMinter'
            | 'allowance'
            | 'approve'
            | 'balanceOf'
            | 'burnFrom'
            | 'decimals'
            | 'decreaseAllowance'
            | 'increaseAllowance'
            | 'mint'
            | 'minters'
            | 'name'
            | 'owner'
            | 'removeMinter'
            | 'renounceOwnership'
            | 'symbol'
            | 'totalSupply'
            | 'transfer'
            | 'transferFrom'
            | 'transferOwnership'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'addMinter', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'approve',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'burnFrom',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'decreaseAllowance',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'increaseAllowance',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'mint', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'minters', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'name', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'removeMinter', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'transfer',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'transferFrom',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string

    decodeFunctionResult(functionFragment: 'addMinter', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'burnFrom', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'decreaseAllowance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'increaseAllowance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'minters', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'removeMinter', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

    events: {
        'Approval(address,address,uint256)': EventFragment
        'MinterAdded(address)': EventFragment
        'MinterRemoved(address)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'Transfer(address,address,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'MinterAdded'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'MinterRemoved'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export interface ApprovalEventObject {
    owner: string
    spender: string
    value: BigNumber
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface MinterAddedEventObject {
    minter: string
}
export type MinterAddedEvent = TypedEvent<[string], MinterAddedEventObject>

export type MinterAddedEventFilter = TypedEventFilter<MinterAddedEvent>

export interface MinterRemovedEventObject {
    minter: string
}
export type MinterRemovedEvent = TypedEvent<[string], MinterRemovedEventObject>

export type MinterRemovedEventFilter = TypedEventFilter<MinterRemovedEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface TransferEventObject {
    from: string
    to: string
    value: BigNumber
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface OFTTokenERC20 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: OFTTokenERC20Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        addMinter(
            _minter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

        burnFrom(
            _account: PromiseOrValue<string>,
            _value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        decimals(overrides?: CallOverrides): Promise<[number]>

        decreaseAllowance(
            spender: PromiseOrValue<string>,
            subtractedValue: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        increaseAllowance(
            spender: PromiseOrValue<string>,
            addedValue: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        mint(
            _account: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        minters(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean] & { canMint: boolean }>

        name(overrides?: CallOverrides): Promise<[string]>

        owner(overrides?: CallOverrides): Promise<[string]>

        removeMinter(
            _minter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        symbol(overrides?: CallOverrides): Promise<[string]>

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    addMinter(
        _minter: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    allowance(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    burnFrom(
        _account: PromiseOrValue<string>,
        _value: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    decimals(overrides?: CallOverrides): Promise<number>

    decreaseAllowance(
        spender: PromiseOrValue<string>,
        subtractedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    increaseAllowance(
        spender: PromiseOrValue<string>,
        addedValue: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    mint(
        _account: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    minters(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    name(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    removeMinter(
        _minter: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferFrom(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        addMinter(_minter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        burnFrom(
            _account: PromiseOrValue<string>,
            _value: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        decimals(overrides?: CallOverrides): Promise<number>

        decreaseAllowance(
            spender: PromiseOrValue<string>,
            subtractedValue: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        increaseAllowance(
            spender: PromiseOrValue<string>,
            addedValue: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        mint(
            _account: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        minters(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        name(overrides?: CallOverrides): Promise<string>

        owner(overrides?: CallOverrides): Promise<string>

        removeMinter(_minter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        symbol(overrides?: CallOverrides): Promise<string>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'Approval(address,address,uint256)'(
            owner?: PromiseOrValue<string> | null,
            spender?: PromiseOrValue<string> | null,
            value?: null
        ): ApprovalEventFilter
        Approval(
            owner?: PromiseOrValue<string> | null,
            spender?: PromiseOrValue<string> | null,
            value?: null
        ): ApprovalEventFilter

        'MinterAdded(address)'(minter?: PromiseOrValue<string> | null): MinterAddedEventFilter
        MinterAdded(minter?: PromiseOrValue<string> | null): MinterAddedEventFilter

        'MinterRemoved(address)'(minter?: PromiseOrValue<string> | null): MinterRemovedEventFilter
        MinterRemoved(minter?: PromiseOrValue<string> | null): MinterRemovedEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'Transfer(address,address,uint256)'(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            value?: null
        ): TransferEventFilter
        Transfer(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            value?: null
        ): TransferEventFilter
    }

    estimateGas: {
        addMinter(
            _minter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        burnFrom(
            _account: PromiseOrValue<string>,
            _value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        decimals(overrides?: CallOverrides): Promise<BigNumber>

        decreaseAllowance(
            spender: PromiseOrValue<string>,
            subtractedValue: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        increaseAllowance(
            spender: PromiseOrValue<string>,
            addedValue: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        mint(
            _account: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        minters(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        name(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        removeMinter(
            _minter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        symbol(overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        addMinter(
            _minter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        burnFrom(
            _account: PromiseOrValue<string>,
            _value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

        decreaseAllowance(
            spender: PromiseOrValue<string>,
            subtractedValue: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        increaseAllowance(
            spender: PromiseOrValue<string>,
            addedValue: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        mint(
            _account: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        minters(addr: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        removeMinter(
            _minter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
