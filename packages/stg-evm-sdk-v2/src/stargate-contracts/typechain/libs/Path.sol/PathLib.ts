/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from 'ethers'
import type { EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../common'

export interface PathLibInterface extends utils.Interface {
    functions: {}

    events: {
        'Path_CreditBurned(uint64)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'Path_CreditBurned'): EventFragment
}

export interface Path_CreditBurnedEventObject {
    amountSD: BigNumber
}
export type Path_CreditBurnedEvent = TypedEvent<[BigNumber], Path_CreditBurnedEventObject>

export type Path_CreditBurnedEventFilter = TypedEventFilter<Path_CreditBurnedEvent>

export interface PathLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: PathLibInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {}

    callStatic: {}

    filters: {
        'Path_CreditBurned(uint64)'(amountSD?: null): Path_CreditBurnedEventFilter
        Path_CreditBurned(amountSD?: null): Path_CreditBurnedEventFilter
    }

    estimateGas: {}

    populateTransaction: {}
}
