/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from 'ethers'
import type { EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from '../../common'

export interface BusLibInterface extends utils.Interface {
    functions: {}

    events: {
        'BusDriven(uint32,uint72,uint8,bytes32)': EventFragment
        'BusRode(uint32,uint72,uint80,bytes)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'BusDriven'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'BusRode'): EventFragment
}

export interface BusDrivenEventObject {
    dstEid: number
    startTicketId: BigNumber
    numPassengers: number
    guid: string
}
export type BusDrivenEvent = TypedEvent<[number, BigNumber, number, string], BusDrivenEventObject>

export type BusDrivenEventFilter = TypedEventFilter<BusDrivenEvent>

export interface BusRodeEventObject {
    dstEid: number
    ticketId: BigNumber
    fare: BigNumber
    passenger: string
}
export type BusRodeEvent = TypedEvent<[number, BigNumber, BigNumber, string], BusRodeEventObject>

export type BusRodeEventFilter = TypedEventFilter<BusRodeEvent>

export interface BusLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: BusLibInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {}

    callStatic: {}

    filters: {
        'BusDriven(uint32,uint72,uint8,bytes32)'(
            dstEid?: null,
            startTicketId?: null,
            numPassengers?: null,
            guid?: null
        ): BusDrivenEventFilter
        BusDriven(dstEid?: null, startTicketId?: null, numPassengers?: null, guid?: null): BusDrivenEventFilter

        'BusRode(uint32,uint72,uint80,bytes)'(
            dstEid?: null,
            ticketId?: null,
            fare?: null,
            passenger?: null
        ): BusRodeEventFilter
        BusRode(dstEid?: null, ticketId?: null, fare?: null, passenger?: null): BusRodeEventFilter
    }

    estimateGas: {}

    populateTransaction: {}
}
