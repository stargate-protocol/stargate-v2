/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type FeeConfigStruct = {
    paused: PromiseOrValue<boolean>
    zone1UpperBound: PromiseOrValue<BigNumberish>
    zone2UpperBound: PromiseOrValue<BigNumberish>
    zone1FeeMillionth: PromiseOrValue<BigNumberish>
    zone2FeeMillionth: PromiseOrValue<BigNumberish>
    zone3FeeMillionth: PromiseOrValue<BigNumberish>
    rewardMillionth: PromiseOrValue<BigNumberish>
}

export type FeeConfigStructOutput = [boolean, BigNumber, BigNumber, number, number, number, number] & {
    paused: boolean
    zone1UpperBound: BigNumber
    zone2UpperBound: BigNumber
    zone1FeeMillionth: number
    zone2FeeMillionth: number
    zone3FeeMillionth: number
    rewardMillionth: number
}

export type FeeParamsStruct = {
    sender: PromiseOrValue<string>
    dstEid: PromiseOrValue<BigNumberish>
    amountInSD: PromiseOrValue<BigNumberish>
    deficitSD: PromiseOrValue<BigNumberish>
    toOFT: PromiseOrValue<boolean>
    isTaxi: PromiseOrValue<boolean>
}

export type FeeParamsStructOutput = [string, number, BigNumber, BigNumber, boolean, boolean] & {
    sender: string
    dstEid: number
    amountInSD: BigNumber
    deficitSD: BigNumber
    toOFT: boolean
    isTaxi: boolean
}

export interface FeeLibV1Interface extends utils.Interface {
    functions: {
        'applyFee((address,uint32,uint64,uint64,bool,bool))': FunctionFragment
        'applyFeeView((address,uint32,uint64,uint64,bool,bool))': FunctionFragment
        'feeConfigs(uint32)': FunctionFragment
        'owner()': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'setFeeConfig(uint32,uint64,uint64,uint24,uint24,uint24,uint24)': FunctionFragment
        'setPaused(uint32,bool)': FunctionFragment
        'stargate()': FunctionFragment
        'stargateType()': FunctionFragment
        'transferOwnership(address)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'applyFee'
            | 'applyFeeView'
            | 'feeConfigs'
            | 'owner'
            | 'renounceOwnership'
            | 'setFeeConfig'
            | 'setPaused'
            | 'stargate'
            | 'stargateType'
            | 'transferOwnership'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'applyFee', values: [FeeParamsStruct]): string
    encodeFunctionData(functionFragment: 'applyFeeView', values: [FeeParamsStruct]): string
    encodeFunctionData(functionFragment: 'feeConfigs', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'setFeeConfig',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setPaused',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(functionFragment: 'stargate', values?: undefined): string
    encodeFunctionData(functionFragment: 'stargateType', values?: undefined): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string

    decodeFunctionResult(functionFragment: 'applyFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'applyFeeView', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'feeConfigs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setFeeConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'stargate', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'stargateType', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

    events: {
        'FeeConfigSet(uint32,tuple)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'PausedSet(uint32,bool)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'FeeConfigSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PausedSet'): EventFragment
}

export interface FeeConfigSetEventObject {
    eid: number
    config: FeeConfigStructOutput
}
export type FeeConfigSetEvent = TypedEvent<[number, FeeConfigStructOutput], FeeConfigSetEventObject>

export type FeeConfigSetEventFilter = TypedEventFilter<FeeConfigSetEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PausedSetEventObject {
    eid: number
    isPaused: boolean
}
export type PausedSetEvent = TypedEvent<[number, boolean], PausedSetEventObject>

export type PausedSetEventFilter = TypedEventFilter<PausedSetEvent>

export interface FeeLibV1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: FeeLibV1Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        applyFee(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<[BigNumber] & { amountOutSD: BigNumber }>

        applyFeeView(
            _params: FeeParamsStruct,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { amountOutSD: BigNumber }>

        feeConfigs(
            eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [boolean, BigNumber, BigNumber, number, number, number, number] & {
                paused: boolean
                zone1UpperBound: BigNumber
                zone2UpperBound: BigNumber
                zone1FeeMillionth: number
                zone2FeeMillionth: number
                zone3FeeMillionth: number
                rewardMillionth: number
            }
        >

        owner(overrides?: CallOverrides): Promise<[string]>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        setFeeConfig(
            _dstEid: PromiseOrValue<BigNumberish>,
            _zone1UpperBound: PromiseOrValue<BigNumberish>,
            _zone2UpperBound: PromiseOrValue<BigNumberish>,
            _zone1FeeMillionth: PromiseOrValue<BigNumberish>,
            _zone2FeeMillionth: PromiseOrValue<BigNumberish>,
            _zone3FeeMillionth: PromiseOrValue<BigNumberish>,
            _rewardMillionth: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setPaused(
            _dstEid: PromiseOrValue<BigNumberish>,
            _isPaused: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        stargate(overrides?: CallOverrides): Promise<[string]>

        stargateType(overrides?: CallOverrides): Promise<[number]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    applyFee(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<BigNumber>

    applyFeeView(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<BigNumber>

    feeConfigs(
        eid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<
        [boolean, BigNumber, BigNumber, number, number, number, number] & {
            paused: boolean
            zone1UpperBound: BigNumber
            zone2UpperBound: BigNumber
            zone1FeeMillionth: number
            zone2FeeMillionth: number
            zone3FeeMillionth: number
            rewardMillionth: number
        }
    >

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    setFeeConfig(
        _dstEid: PromiseOrValue<BigNumberish>,
        _zone1UpperBound: PromiseOrValue<BigNumberish>,
        _zone2UpperBound: PromiseOrValue<BigNumberish>,
        _zone1FeeMillionth: PromiseOrValue<BigNumberish>,
        _zone2FeeMillionth: PromiseOrValue<BigNumberish>,
        _zone3FeeMillionth: PromiseOrValue<BigNumberish>,
        _rewardMillionth: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPaused(
        _dstEid: PromiseOrValue<BigNumberish>,
        _isPaused: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    stargate(overrides?: CallOverrides): Promise<string>

    stargateType(overrides?: CallOverrides): Promise<number>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        applyFee(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<BigNumber>

        applyFeeView(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<BigNumber>

        feeConfigs(
            eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [boolean, BigNumber, BigNumber, number, number, number, number] & {
                paused: boolean
                zone1UpperBound: BigNumber
                zone2UpperBound: BigNumber
                zone1FeeMillionth: number
                zone2FeeMillionth: number
                zone3FeeMillionth: number
                rewardMillionth: number
            }
        >

        owner(overrides?: CallOverrides): Promise<string>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        setFeeConfig(
            _dstEid: PromiseOrValue<BigNumberish>,
            _zone1UpperBound: PromiseOrValue<BigNumberish>,
            _zone2UpperBound: PromiseOrValue<BigNumberish>,
            _zone1FeeMillionth: PromiseOrValue<BigNumberish>,
            _zone2FeeMillionth: PromiseOrValue<BigNumberish>,
            _zone3FeeMillionth: PromiseOrValue<BigNumberish>,
            _rewardMillionth: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        setPaused(
            _dstEid: PromiseOrValue<BigNumberish>,
            _isPaused: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<void>

        stargate(overrides?: CallOverrides): Promise<string>

        stargateType(overrides?: CallOverrides): Promise<number>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'FeeConfigSet(uint32,tuple)'(eid?: null, config?: null): FeeConfigSetEventFilter
        FeeConfigSet(eid?: null, config?: null): FeeConfigSetEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'PausedSet(uint32,bool)'(eid?: null, isPaused?: null): PausedSetEventFilter
        PausedSet(eid?: null, isPaused?: null): PausedSetEventFilter
    }

    estimateGas: {
        applyFee(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<BigNumber>

        applyFeeView(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<BigNumber>

        feeConfigs(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        setFeeConfig(
            _dstEid: PromiseOrValue<BigNumberish>,
            _zone1UpperBound: PromiseOrValue<BigNumberish>,
            _zone2UpperBound: PromiseOrValue<BigNumberish>,
            _zone1FeeMillionth: PromiseOrValue<BigNumberish>,
            _zone2FeeMillionth: PromiseOrValue<BigNumberish>,
            _zone3FeeMillionth: PromiseOrValue<BigNumberish>,
            _rewardMillionth: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setPaused(
            _dstEid: PromiseOrValue<BigNumberish>,
            _isPaused: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        stargate(overrides?: CallOverrides): Promise<BigNumber>

        stargateType(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        applyFee(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>

        applyFeeView(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>

        feeConfigs(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        setFeeConfig(
            _dstEid: PromiseOrValue<BigNumberish>,
            _zone1UpperBound: PromiseOrValue<BigNumberish>,
            _zone2UpperBound: PromiseOrValue<BigNumberish>,
            _zone1FeeMillionth: PromiseOrValue<BigNumberish>,
            _zone2FeeMillionth: PromiseOrValue<BigNumberish>,
            _zone3FeeMillionth: PromiseOrValue<BigNumberish>,
            _rewardMillionth: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setPaused(
            _dstEid: PromiseOrValue<BigNumberish>,
            _isPaused: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        stargate(overrides?: CallOverrides): Promise<PopulatedTransaction>

        stargateType(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
