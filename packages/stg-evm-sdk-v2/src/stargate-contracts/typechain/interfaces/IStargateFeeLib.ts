/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type FeeParamsStruct = {
    sender: PromiseOrValue<string>
    dstEid: PromiseOrValue<BigNumberish>
    amountInSD: PromiseOrValue<BigNumberish>
    deficitSD: PromiseOrValue<BigNumberish>
    toOFT: PromiseOrValue<boolean>
    isTaxi: PromiseOrValue<boolean>
}

export type FeeParamsStructOutput = [string, number, BigNumber, BigNumber, boolean, boolean] & {
    sender: string
    dstEid: number
    amountInSD: BigNumber
    deficitSD: BigNumber
    toOFT: boolean
    isTaxi: boolean
}

export interface IStargateFeeLibInterface extends utils.Interface {
    functions: {
        'applyFee((address,uint32,uint64,uint64,bool,bool))': FunctionFragment
        'applyFeeView((address,uint32,uint64,uint64,bool,bool))': FunctionFragment
    }

    getFunction(nameOrSignatureOrTopic: 'applyFee' | 'applyFeeView'): FunctionFragment

    encodeFunctionData(functionFragment: 'applyFee', values: [FeeParamsStruct]): string
    encodeFunctionData(functionFragment: 'applyFeeView', values: [FeeParamsStruct]): string

    decodeFunctionResult(functionFragment: 'applyFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'applyFeeView', data: BytesLike): Result

    events: {}
}

export interface IStargateFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IStargateFeeLibInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        applyFee(
            _params: FeeParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        applyFeeView(
            _params: FeeParamsStruct,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { amountOutSD: BigNumber }>
    }

    applyFee(
        _params: FeeParamsStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    applyFeeView(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<BigNumber>

    callStatic: {
        applyFee(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<BigNumber>

        applyFeeView(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<BigNumber>
    }

    filters: {}

    estimateGas: {
        applyFee(
            _params: FeeParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        applyFeeView(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        applyFee(
            _params: FeeParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        applyFeeView(_params: FeeParamsStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
