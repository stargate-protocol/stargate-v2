/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type SendParamStruct = {
    dstEid: PromiseOrValue<BigNumberish>
    to: PromiseOrValue<BytesLike>
    amountLD: PromiseOrValue<BigNumberish>
    minAmountLD: PromiseOrValue<BigNumberish>
    extraOptions: PromiseOrValue<BytesLike>
    composeMsg: PromiseOrValue<BytesLike>
    oftCmd: PromiseOrValue<BytesLike>
}

export type SendParamStructOutput = [number, string, BigNumber, BigNumber, string, string, string] & {
    dstEid: number
    to: string
    amountLD: BigNumber
    minAmountLD: BigNumber
    extraOptions: string
    composeMsg: string
    oftCmd: string
}

export type OFTLimitStruct = {
    minAmountLD: PromiseOrValue<BigNumberish>
    maxAmountLD: PromiseOrValue<BigNumberish>
}

export type OFTLimitStructOutput = [BigNumber, BigNumber] & {
    minAmountLD: BigNumber
    maxAmountLD: BigNumber
}

export type OFTFeeDetailStruct = {
    feeAmountLD: PromiseOrValue<BigNumberish>
    description: PromiseOrValue<string>
}

export type OFTFeeDetailStructOutput = [BigNumber, string] & {
    feeAmountLD: BigNumber
    description: string
}

export type OFTReceiptStruct = {
    amountSentLD: PromiseOrValue<BigNumberish>
    amountReceivedLD: PromiseOrValue<BigNumberish>
}

export type OFTReceiptStructOutput = [BigNumber, BigNumber] & {
    amountSentLD: BigNumber
    amountReceivedLD: BigNumber
}

export type MessagingFeeStruct = {
    nativeFee: PromiseOrValue<BigNumberish>
    lzTokenFee: PromiseOrValue<BigNumberish>
}

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
    nativeFee: BigNumber
    lzTokenFee: BigNumber
}

export type MessagingReceiptStruct = {
    guid: PromiseOrValue<BytesLike>
    nonce: PromiseOrValue<BigNumberish>
    fee: MessagingFeeStruct
}

export type MessagingReceiptStructOutput = [string, BigNumber, MessagingFeeStructOutput] & {
    guid: string
    nonce: BigNumber
    fee: MessagingFeeStructOutput
}

export type TicketStruct = {
    ticketId: PromiseOrValue<BigNumberish>
    passengerBytes: PromiseOrValue<BytesLike>
}

export type TicketStructOutput = [BigNumber, string] & {
    ticketId: BigNumber
    passengerBytes: string
}

export interface IStargateInterface extends utils.Interface {
    functions: {
        'approvalRequired()': FunctionFragment
        'oftVersion()': FunctionFragment
        'quoteOFT((uint32,bytes32,uint256,uint256,bytes,bytes,bytes))': FunctionFragment
        'quoteSend((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),bool)': FunctionFragment
        'send((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)': FunctionFragment
        'sendToken((uint32,bytes32,uint256,uint256,bytes,bytes,bytes),(uint256,uint256),address)': FunctionFragment
        'sharedDecimals()': FunctionFragment
        'stargateType()': FunctionFragment
        'token()': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'approvalRequired'
            | 'oftVersion'
            | 'quoteOFT'
            | 'quoteSend'
            | 'send'
            | 'sendToken'
            | 'sharedDecimals'
            | 'stargateType'
            | 'token'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'approvalRequired', values?: undefined): string
    encodeFunctionData(functionFragment: 'oftVersion', values?: undefined): string
    encodeFunctionData(functionFragment: 'quoteOFT', values: [SendParamStruct]): string
    encodeFunctionData(functionFragment: 'quoteSend', values: [SendParamStruct, PromiseOrValue<boolean>]): string
    encodeFunctionData(
        functionFragment: 'send',
        values: [SendParamStruct, MessagingFeeStruct, PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'sendToken',
        values: [SendParamStruct, MessagingFeeStruct, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'sharedDecimals', values?: undefined): string
    encodeFunctionData(functionFragment: 'stargateType', values?: undefined): string
    encodeFunctionData(functionFragment: 'token', values?: undefined): string

    decodeFunctionResult(functionFragment: 'approvalRequired', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'oftVersion', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quoteOFT', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quoteSend', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'sendToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'sharedDecimals', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'stargateType', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result

    events: {
        'OFTReceived(bytes32,uint32,address,uint256)': EventFragment
        'OFTSent(bytes32,uint32,address,uint256,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'OFTReceived'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OFTSent'): EventFragment
}

export interface OFTReceivedEventObject {
    guid: string
    srcEid: number
    toAddress: string
    amountReceivedLD: BigNumber
}
export type OFTReceivedEvent = TypedEvent<[string, number, string, BigNumber], OFTReceivedEventObject>

export type OFTReceivedEventFilter = TypedEventFilter<OFTReceivedEvent>

export interface OFTSentEventObject {
    guid: string
    dstEid: number
    fromAddress: string
    amountSentLD: BigNumber
    amountReceivedLD: BigNumber
}
export type OFTSentEvent = TypedEvent<[string, number, string, BigNumber, BigNumber], OFTSentEventObject>

export type OFTSentEventFilter = TypedEventFilter<OFTSentEvent>

export interface IStargate extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IStargateInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        approvalRequired(overrides?: CallOverrides): Promise<[boolean]>

        oftVersion(
            overrides?: CallOverrides
        ): Promise<[string, BigNumber] & { interfaceId: string; version: BigNumber }>

        quoteOFT(
            _sendParam: SendParamStruct,
            overrides?: CallOverrides
        ): Promise<
            [OFTLimitStructOutput, OFTFeeDetailStructOutput[], OFTReceiptStructOutput] & {
                oftFeeDetails: OFTFeeDetailStructOutput[]
            }
        >

        quoteSend(
            _sendParam: SendParamStruct,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput]>

        send(
            _sendParam: SendParamStruct,
            _fee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        sendToken(
            _sendParam: SendParamStruct,
            _fee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        sharedDecimals(overrides?: CallOverrides): Promise<[number]>

        stargateType(overrides?: CallOverrides): Promise<[number]>

        token(overrides?: CallOverrides): Promise<[string]>
    }

    approvalRequired(overrides?: CallOverrides): Promise<boolean>

    oftVersion(overrides?: CallOverrides): Promise<[string, BigNumber] & { interfaceId: string; version: BigNumber }>

    quoteOFT(
        _sendParam: SendParamStruct,
        overrides?: CallOverrides
    ): Promise<
        [OFTLimitStructOutput, OFTFeeDetailStructOutput[], OFTReceiptStructOutput] & {
            oftFeeDetails: OFTFeeDetailStructOutput[]
        }
    >

    quoteSend(
        _sendParam: SendParamStruct,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>

    send(
        _sendParam: SendParamStruct,
        _fee: MessagingFeeStruct,
        _refundAddress: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    sendToken(
        _sendParam: SendParamStruct,
        _fee: MessagingFeeStruct,
        _refundAddress: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    sharedDecimals(overrides?: CallOverrides): Promise<number>

    stargateType(overrides?: CallOverrides): Promise<number>

    token(overrides?: CallOverrides): Promise<string>

    callStatic: {
        approvalRequired(overrides?: CallOverrides): Promise<boolean>

        oftVersion(
            overrides?: CallOverrides
        ): Promise<[string, BigNumber] & { interfaceId: string; version: BigNumber }>

        quoteOFT(
            _sendParam: SendParamStruct,
            overrides?: CallOverrides
        ): Promise<
            [OFTLimitStructOutput, OFTFeeDetailStructOutput[], OFTReceiptStructOutput] & {
                oftFeeDetails: OFTFeeDetailStructOutput[]
            }
        >

        quoteSend(
            _sendParam: SendParamStruct,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<MessagingFeeStructOutput>

        send(
            _sendParam: SendParamStruct,
            _fee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[MessagingReceiptStructOutput, OFTReceiptStructOutput]>

        sendToken(
            _sendParam: SendParamStruct,
            _fee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<
            [MessagingReceiptStructOutput, OFTReceiptStructOutput, TicketStructOutput] & {
                msgReceipt: MessagingReceiptStructOutput
                oftReceipt: OFTReceiptStructOutput
                ticket: TicketStructOutput
            }
        >

        sharedDecimals(overrides?: CallOverrides): Promise<number>

        stargateType(overrides?: CallOverrides): Promise<number>

        token(overrides?: CallOverrides): Promise<string>
    }

    filters: {
        'OFTReceived(bytes32,uint32,address,uint256)'(
            guid?: PromiseOrValue<BytesLike> | null,
            srcEid?: null,
            toAddress?: PromiseOrValue<string> | null,
            amountReceivedLD?: null
        ): OFTReceivedEventFilter
        OFTReceived(
            guid?: PromiseOrValue<BytesLike> | null,
            srcEid?: null,
            toAddress?: PromiseOrValue<string> | null,
            amountReceivedLD?: null
        ): OFTReceivedEventFilter

        'OFTSent(bytes32,uint32,address,uint256,uint256)'(
            guid?: PromiseOrValue<BytesLike> | null,
            dstEid?: null,
            fromAddress?: PromiseOrValue<string> | null,
            amountSentLD?: null,
            amountReceivedLD?: null
        ): OFTSentEventFilter
        OFTSent(
            guid?: PromiseOrValue<BytesLike> | null,
            dstEid?: null,
            fromAddress?: PromiseOrValue<string> | null,
            amountSentLD?: null,
            amountReceivedLD?: null
        ): OFTSentEventFilter
    }

    estimateGas: {
        approvalRequired(overrides?: CallOverrides): Promise<BigNumber>

        oftVersion(overrides?: CallOverrides): Promise<BigNumber>

        quoteOFT(_sendParam: SendParamStruct, overrides?: CallOverrides): Promise<BigNumber>

        quoteSend(
            _sendParam: SendParamStruct,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        send(
            _sendParam: SendParamStruct,
            _fee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        sendToken(
            _sendParam: SendParamStruct,
            _fee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        sharedDecimals(overrides?: CallOverrides): Promise<BigNumber>

        stargateType(overrides?: CallOverrides): Promise<BigNumber>

        token(overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        approvalRequired(overrides?: CallOverrides): Promise<PopulatedTransaction>

        oftVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>

        quoteOFT(_sendParam: SendParamStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>

        quoteSend(
            _sendParam: SendParamStruct,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        send(
            _sendParam: SendParamStruct,
            _fee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        sendToken(
            _sendParam: SendParamStruct,
            _fee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        sharedDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

        stargateType(overrides?: CallOverrides): Promise<PopulatedTransaction>

        token(overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
