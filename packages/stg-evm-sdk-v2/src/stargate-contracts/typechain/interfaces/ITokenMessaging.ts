/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type MessagingFeeStruct = {
    nativeFee: PromiseOrValue<BigNumberish>
    lzTokenFee: PromiseOrValue<BigNumberish>
}

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
    nativeFee: BigNumber
    lzTokenFee: BigNumber
}

export type MessagingReceiptStruct = {
    guid: PromiseOrValue<BytesLike>
    nonce: PromiseOrValue<BigNumberish>
    fee: MessagingFeeStruct
}

export type MessagingReceiptStructOutput = [string, BigNumber, MessagingFeeStructOutput] & {
    guid: string
    nonce: BigNumber
    fee: MessagingFeeStructOutput
}

export type TaxiParamsStruct = {
    sender: PromiseOrValue<string>
    dstEid: PromiseOrValue<BigNumberish>
    receiver: PromiseOrValue<BytesLike>
    amountSD: PromiseOrValue<BigNumberish>
    composeMsg: PromiseOrValue<BytesLike>
    extraOptions: PromiseOrValue<BytesLike>
}

export type TaxiParamsStructOutput = [string, number, string, BigNumber, string, string] & {
    sender: string
    dstEid: number
    receiver: string
    amountSD: BigNumber
    composeMsg: string
    extraOptions: string
}

export type RideBusParamsStruct = {
    sender: PromiseOrValue<string>
    dstEid: PromiseOrValue<BigNumberish>
    receiver: PromiseOrValue<BytesLike>
    amountSD: PromiseOrValue<BigNumberish>
    nativeDrop: PromiseOrValue<boolean>
}

export type RideBusParamsStructOutput = [string, number, string, BigNumber, boolean] & {
    sender: string
    dstEid: number
    receiver: string
    amountSD: BigNumber
    nativeDrop: boolean
}

export type TicketStruct = {
    ticketId: PromiseOrValue<BigNumberish>
    passengerBytes: PromiseOrValue<BytesLike>
}

export type TicketStructOutput = [BigNumber, string] & {
    ticketId: BigNumber
    passengerBytes: string
}

export interface ITokenMessagingInterface extends utils.Interface {
    functions: {
        'driveBus(uint32,bytes)': FunctionFragment
        'quoteDriveBus(uint32,bytes)': FunctionFragment
        'quoteRideBus(uint32,bool)': FunctionFragment
        'quoteTaxi((address,uint32,bytes32,uint64,bytes,bytes),bool)': FunctionFragment
        'rideBus((address,uint32,bytes32,uint64,bool))': FunctionFragment
        'taxi((address,uint32,bytes32,uint64,bytes,bytes),(uint256,uint256),address)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic: 'driveBus' | 'quoteDriveBus' | 'quoteRideBus' | 'quoteTaxi' | 'rideBus' | 'taxi'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'driveBus',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'quoteDriveBus',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'quoteRideBus',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(functionFragment: 'quoteTaxi', values: [TaxiParamsStruct, PromiseOrValue<boolean>]): string
    encodeFunctionData(functionFragment: 'rideBus', values: [RideBusParamsStruct]): string
    encodeFunctionData(
        functionFragment: 'taxi',
        values: [TaxiParamsStruct, MessagingFeeStruct, PromiseOrValue<string>]
    ): string

    decodeFunctionResult(functionFragment: 'driveBus', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quoteDriveBus', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quoteRideBus', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quoteTaxi', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'rideBus', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'taxi', data: BytesLike): Result

    events: {}
}

export interface ITokenMessaging extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: ITokenMessagingInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        driveBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _passengers: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        quoteDriveBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _passengers: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput] & { fee: MessagingFeeStructOutput }>

        quoteRideBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _nativeDrop: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput] & { fee: MessagingFeeStructOutput }>

        quoteTaxi(
            _params: TaxiParamsStruct,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput] & { fee: MessagingFeeStructOutput }>

        rideBus(
            _params: RideBusParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        taxi(
            _params: TaxiParamsStruct,
            _messagingFee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    driveBus(
        _dstEid: PromiseOrValue<BigNumberish>,
        _passengers: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    quoteDriveBus(
        _dstEid: PromiseOrValue<BigNumberish>,
        _passengers: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>

    quoteRideBus(
        _dstEid: PromiseOrValue<BigNumberish>,
        _nativeDrop: PromiseOrValue<boolean>,
        overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>

    quoteTaxi(
        _params: TaxiParamsStruct,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>

    rideBus(
        _params: RideBusParamsStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    taxi(
        _params: TaxiParamsStruct,
        _messagingFee: MessagingFeeStruct,
        _refundAddress: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        driveBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _passengers: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<MessagingReceiptStructOutput>

        quoteDriveBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _passengers: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<MessagingFeeStructOutput>

        quoteRideBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _nativeDrop: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<MessagingFeeStructOutput>

        quoteTaxi(
            _params: TaxiParamsStruct,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<MessagingFeeStructOutput>

        rideBus(
            _params: RideBusParamsStruct,
            overrides?: CallOverrides
        ): Promise<
            [MessagingReceiptStructOutput, TicketStructOutput] & {
                receipt: MessagingReceiptStructOutput
                ticket: TicketStructOutput
            }
        >

        taxi(
            _params: TaxiParamsStruct,
            _messagingFee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<MessagingReceiptStructOutput>
    }

    filters: {}

    estimateGas: {
        driveBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _passengers: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        quoteDriveBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _passengers: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        quoteRideBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _nativeDrop: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        quoteTaxi(
            _params: TaxiParamsStruct,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        rideBus(
            _params: RideBusParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        taxi(
            _params: TaxiParamsStruct,
            _messagingFee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        driveBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _passengers: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        quoteDriveBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _passengers: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        quoteRideBus(
            _dstEid: PromiseOrValue<BigNumberish>,
            _nativeDrop: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        quoteTaxi(
            _params: TaxiParamsStruct,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        rideBus(
            _params: RideBusParamsStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        taxi(
            _params: TaxiParamsStruct,
            _messagingFee: MessagingFeeStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
