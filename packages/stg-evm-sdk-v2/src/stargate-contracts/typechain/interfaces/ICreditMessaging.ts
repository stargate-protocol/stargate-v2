/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type TargetCreditStruct = {
    srcEid: PromiseOrValue<BigNumberish>
    amount: PromiseOrValue<BigNumberish>
    minAmount: PromiseOrValue<BigNumberish>
}

export type TargetCreditStructOutput = [number, BigNumber, BigNumber] & {
    srcEid: number
    amount: BigNumber
    minAmount: BigNumber
}

export type TargetCreditBatchStruct = {
    assetId: PromiseOrValue<BigNumberish>
    credits: TargetCreditStruct[]
}

export type TargetCreditBatchStructOutput = [number, TargetCreditStructOutput[]] & {
    assetId: number
    credits: TargetCreditStructOutput[]
}

export type MessagingFeeStruct = {
    nativeFee: PromiseOrValue<BigNumberish>
    lzTokenFee: PromiseOrValue<BigNumberish>
}

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
    nativeFee: BigNumber
    lzTokenFee: BigNumber
}

export interface ICreditMessagingInterface extends utils.Interface {
    functions: {
        'quoteSendCredits(uint32,(uint16,(uint32,uint64,uint64)[])[])': FunctionFragment
        'sendCredits(uint32,(uint16,(uint32,uint64,uint64)[])[])': FunctionFragment
    }

    getFunction(nameOrSignatureOrTopic: 'quoteSendCredits' | 'sendCredits'): FunctionFragment

    encodeFunctionData(
        functionFragment: 'quoteSendCredits',
        values: [PromiseOrValue<BigNumberish>, TargetCreditBatchStruct[]]
    ): string
    encodeFunctionData(
        functionFragment: 'sendCredits',
        values: [PromiseOrValue<BigNumberish>, TargetCreditBatchStruct[]]
    ): string

    decodeFunctionResult(functionFragment: 'quoteSendCredits', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'sendCredits', data: BytesLike): Result

    events: {}
}

export interface ICreditMessaging extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: ICreditMessagingInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        quoteSendCredits(
            _dstEid: PromiseOrValue<BigNumberish>,
            _creditBatches: TargetCreditBatchStruct[],
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput] & { fee: MessagingFeeStructOutput }>

        sendCredits(
            _dstEid: PromiseOrValue<BigNumberish>,
            _creditBatches: TargetCreditBatchStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    quoteSendCredits(
        _dstEid: PromiseOrValue<BigNumberish>,
        _creditBatches: TargetCreditBatchStruct[],
        overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>

    sendCredits(
        _dstEid: PromiseOrValue<BigNumberish>,
        _creditBatches: TargetCreditBatchStruct[],
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        quoteSendCredits(
            _dstEid: PromiseOrValue<BigNumberish>,
            _creditBatches: TargetCreditBatchStruct[],
            overrides?: CallOverrides
        ): Promise<MessagingFeeStructOutput>

        sendCredits(
            _dstEid: PromiseOrValue<BigNumberish>,
            _creditBatches: TargetCreditBatchStruct[],
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {}

    estimateGas: {
        quoteSendCredits(
            _dstEid: PromiseOrValue<BigNumberish>,
            _creditBatches: TargetCreditBatchStruct[],
            overrides?: CallOverrides
        ): Promise<BigNumber>

        sendCredits(
            _dstEid: PromiseOrValue<BigNumberish>,
            _creditBatches: TargetCreditBatchStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        quoteSendCredits(
            _dstEid: PromiseOrValue<BigNumberish>,
            _creditBatches: TargetCreditBatchStruct[],
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        sendCredits(
            _dstEid: PromiseOrValue<BigNumberish>,
            _creditBatches: TargetCreditBatchStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
