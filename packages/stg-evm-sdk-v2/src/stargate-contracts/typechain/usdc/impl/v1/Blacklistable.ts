/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common'

export interface BlacklistableInterface extends utils.Interface {
    functions: {
        'blacklist(address)': FunctionFragment
        'blacklister()': FunctionFragment
        'isBlacklisted(address)': FunctionFragment
        'owner()': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'unBlacklist(address)': FunctionFragment
        'updateBlacklister(address)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'blacklist'
            | 'blacklister'
            | 'isBlacklisted'
            | 'owner'
            | 'transferOwnership'
            | 'unBlacklist'
            | 'updateBlacklister'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'blacklist', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'blacklister', values?: undefined): string
    encodeFunctionData(functionFragment: 'isBlacklisted', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'unBlacklist', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'updateBlacklister', values: [PromiseOrValue<string>]): string

    decodeFunctionResult(functionFragment: 'blacklist', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'blacklister', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isBlacklisted', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'unBlacklist', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updateBlacklister', data: BytesLike): Result

    events: {
        'Blacklisted(address)': EventFragment
        'BlacklisterChanged(address)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'UnBlacklisted(address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'Blacklisted'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'BlacklisterChanged'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UnBlacklisted'): EventFragment
}

export interface BlacklistedEventObject {
    _account: string
}
export type BlacklistedEvent = TypedEvent<[string], BlacklistedEventObject>

export type BlacklistedEventFilter = TypedEventFilter<BlacklistedEvent>

export interface BlacklisterChangedEventObject {
    newBlacklister: string
}
export type BlacklisterChangedEvent = TypedEvent<[string], BlacklisterChangedEventObject>

export type BlacklisterChangedEventFilter = TypedEventFilter<BlacklisterChangedEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface UnBlacklistedEventObject {
    _account: string
}
export type UnBlacklistedEvent = TypedEvent<[string], UnBlacklistedEventObject>

export type UnBlacklistedEventFilter = TypedEventFilter<UnBlacklistedEvent>

export interface Blacklistable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: BlacklistableInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        blacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        blacklister(overrides?: CallOverrides): Promise<[string]>

        isBlacklisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

        owner(overrides?: CallOverrides): Promise<[string]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        unBlacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        updateBlacklister(
            _newBlacklister: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    blacklist(
        _account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    blacklister(overrides?: CallOverrides): Promise<string>

    isBlacklisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    owner(overrides?: CallOverrides): Promise<string>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unBlacklist(
        _account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateBlacklister(
        _newBlacklister: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        blacklist(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        blacklister(overrides?: CallOverrides): Promise<string>

        isBlacklisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        owner(overrides?: CallOverrides): Promise<string>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        unBlacklist(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        updateBlacklister(_newBlacklister: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'Blacklisted(address)'(_account?: PromiseOrValue<string> | null): BlacklistedEventFilter
        Blacklisted(_account?: PromiseOrValue<string> | null): BlacklistedEventFilter

        'BlacklisterChanged(address)'(newBlacklister?: PromiseOrValue<string> | null): BlacklisterChangedEventFilter
        BlacklisterChanged(newBlacklister?: PromiseOrValue<string> | null): BlacklisterChangedEventFilter

        'OwnershipTransferred(address,address)'(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter
        OwnershipTransferred(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter

        'UnBlacklisted(address)'(_account?: PromiseOrValue<string> | null): UnBlacklistedEventFilter
        UnBlacklisted(_account?: PromiseOrValue<string> | null): UnBlacklistedEventFilter
    }

    estimateGas: {
        blacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        blacklister(overrides?: CallOverrides): Promise<BigNumber>

        isBlacklisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        unBlacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        updateBlacklister(
            _newBlacklister: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        blacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        blacklister(overrides?: CallOverrides): Promise<PopulatedTransaction>

        isBlacklisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        unBlacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        updateBlacklister(
            _newBlacklister: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
