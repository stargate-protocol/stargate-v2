/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common'

export interface FiatTokenV1Interface extends utils.Interface {
    functions: {
        'allowance(address,address)': FunctionFragment
        'approve(address,uint256)': FunctionFragment
        'balanceOf(address)': FunctionFragment
        'blacklist(address)': FunctionFragment
        'blacklister()': FunctionFragment
        'burn(uint256)': FunctionFragment
        'configureMinter(address,uint256)': FunctionFragment
        'currency()': FunctionFragment
        'decimals()': FunctionFragment
        'initialize(string,string,string,uint8,address,address,address,address)': FunctionFragment
        'isBlacklisted(address)': FunctionFragment
        'isMinter(address)': FunctionFragment
        'masterMinter()': FunctionFragment
        'mint(address,uint256)': FunctionFragment
        'minterAllowance(address)': FunctionFragment
        'name()': FunctionFragment
        'owner()': FunctionFragment
        'pause()': FunctionFragment
        'paused()': FunctionFragment
        'pauser()': FunctionFragment
        'removeMinter(address)': FunctionFragment
        'symbol()': FunctionFragment
        'totalSupply()': FunctionFragment
        'transfer(address,uint256)': FunctionFragment
        'transferFrom(address,address,uint256)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'unBlacklist(address)': FunctionFragment
        'unpause()': FunctionFragment
        'updateBlacklister(address)': FunctionFragment
        'updateMasterMinter(address)': FunctionFragment
        'updatePauser(address)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'allowance'
            | 'approve'
            | 'balanceOf'
            | 'blacklist'
            | 'blacklister'
            | 'burn'
            | 'configureMinter'
            | 'currency'
            | 'decimals'
            | 'initialize'
            | 'isBlacklisted'
            | 'isMinter'
            | 'masterMinter'
            | 'mint'
            | 'minterAllowance'
            | 'name'
            | 'owner'
            | 'pause'
            | 'paused'
            | 'pauser'
            | 'removeMinter'
            | 'symbol'
            | 'totalSupply'
            | 'transfer'
            | 'transferFrom'
            | 'transferOwnership'
            | 'unBlacklist'
            | 'unpause'
            | 'updateBlacklister'
            | 'updateMasterMinter'
            | 'updatePauser'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'approve',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'blacklist', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'blacklister', values?: undefined): string
    encodeFunctionData(functionFragment: 'burn', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(
        functionFragment: 'configureMinter',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'currency', values?: undefined): string
    encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'initialize',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<string>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'isBlacklisted', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'isMinter', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'masterMinter', values?: undefined): string
    encodeFunctionData(functionFragment: 'mint', values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'minterAllowance', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'name', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'pause', values?: undefined): string
    encodeFunctionData(functionFragment: 'paused', values?: undefined): string
    encodeFunctionData(functionFragment: 'pauser', values?: undefined): string
    encodeFunctionData(functionFragment: 'removeMinter', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'transfer',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'transferFrom',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'unBlacklist', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
    encodeFunctionData(functionFragment: 'updateBlacklister', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'updateMasterMinter', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'updatePauser', values: [PromiseOrValue<string>]): string

    decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'blacklist', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'blacklister', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'configureMinter', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'currency', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isBlacklisted', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isMinter', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'masterMinter', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'minterAllowance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'pauser', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'removeMinter', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'unBlacklist', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updateBlacklister', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updateMasterMinter', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updatePauser', data: BytesLike): Result

    events: {
        'Approval(address,address,uint256)': EventFragment
        'Blacklisted(address)': EventFragment
        'BlacklisterChanged(address)': EventFragment
        'Burn(address,uint256)': EventFragment
        'MasterMinterChanged(address)': EventFragment
        'Mint(address,address,uint256)': EventFragment
        'MinterConfigured(address,uint256)': EventFragment
        'MinterRemoved(address)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'Pause()': EventFragment
        'PauserChanged(address)': EventFragment
        'Transfer(address,address,uint256)': EventFragment
        'UnBlacklisted(address)': EventFragment
        'Unpause()': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Blacklisted'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'BlacklisterChanged'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'MasterMinterChanged'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'MinterConfigured'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'MinterRemoved'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Pause'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PauserChanged'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UnBlacklisted'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Unpause'): EventFragment
}

export interface ApprovalEventObject {
    owner: string
    spender: string
    value: BigNumber
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface BlacklistedEventObject {
    _account: string
}
export type BlacklistedEvent = TypedEvent<[string], BlacklistedEventObject>

export type BlacklistedEventFilter = TypedEventFilter<BlacklistedEvent>

export interface BlacklisterChangedEventObject {
    newBlacklister: string
}
export type BlacklisterChangedEvent = TypedEvent<[string], BlacklisterChangedEventObject>

export type BlacklisterChangedEventFilter = TypedEventFilter<BlacklisterChangedEvent>

export interface BurnEventObject {
    burner: string
    amount: BigNumber
}
export type BurnEvent = TypedEvent<[string, BigNumber], BurnEventObject>

export type BurnEventFilter = TypedEventFilter<BurnEvent>

export interface MasterMinterChangedEventObject {
    newMasterMinter: string
}
export type MasterMinterChangedEvent = TypedEvent<[string], MasterMinterChangedEventObject>

export type MasterMinterChangedEventFilter = TypedEventFilter<MasterMinterChangedEvent>

export interface MintEventObject {
    minter: string
    to: string
    amount: BigNumber
}
export type MintEvent = TypedEvent<[string, string, BigNumber], MintEventObject>

export type MintEventFilter = TypedEventFilter<MintEvent>

export interface MinterConfiguredEventObject {
    minter: string
    minterAllowedAmount: BigNumber
}
export type MinterConfiguredEvent = TypedEvent<[string, BigNumber], MinterConfiguredEventObject>

export type MinterConfiguredEventFilter = TypedEventFilter<MinterConfiguredEvent>

export interface MinterRemovedEventObject {
    oldMinter: string
}
export type MinterRemovedEvent = TypedEvent<[string], MinterRemovedEventObject>

export type MinterRemovedEventFilter = TypedEventFilter<MinterRemovedEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PauseEventObject {}
export type PauseEvent = TypedEvent<[], PauseEventObject>

export type PauseEventFilter = TypedEventFilter<PauseEvent>

export interface PauserChangedEventObject {
    newAddress: string
}
export type PauserChangedEvent = TypedEvent<[string], PauserChangedEventObject>

export type PauserChangedEventFilter = TypedEventFilter<PauserChangedEvent>

export interface TransferEventObject {
    from: string
    to: string
    value: BigNumber
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface UnBlacklistedEventObject {
    _account: string
}
export type UnBlacklistedEvent = TypedEvent<[string], UnBlacklistedEventObject>

export type UnBlacklistedEventFilter = TypedEventFilter<UnBlacklistedEvent>

export interface UnpauseEventObject {}
export type UnpauseEvent = TypedEvent<[], UnpauseEventObject>

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>

export interface FiatTokenV1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: FiatTokenV1Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        approve(
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

        blacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        blacklister(overrides?: CallOverrides): Promise<[string]>

        burn(
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        configureMinter(
            minter: PromiseOrValue<string>,
            minterAllowedAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        currency(overrides?: CallOverrides): Promise<[string]>

        decimals(overrides?: CallOverrides): Promise<[number]>

        initialize(
            tokenName: PromiseOrValue<string>,
            tokenSymbol: PromiseOrValue<string>,
            tokenCurrency: PromiseOrValue<string>,
            tokenDecimals: PromiseOrValue<BigNumberish>,
            newMasterMinter: PromiseOrValue<string>,
            newPauser: PromiseOrValue<string>,
            newBlacklister: PromiseOrValue<string>,
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        isBlacklisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

        isMinter(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

        masterMinter(overrides?: CallOverrides): Promise<[string]>

        mint(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        minterAllowance(minter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

        name(overrides?: CallOverrides): Promise<[string]>

        owner(overrides?: CallOverrides): Promise<[string]>

        pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        paused(overrides?: CallOverrides): Promise<[boolean]>

        pauser(overrides?: CallOverrides): Promise<[string]>

        removeMinter(
            minter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        symbol(overrides?: CallOverrides): Promise<[string]>

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

        transfer(
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        unBlacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        updateBlacklister(
            _newBlacklister: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        updateMasterMinter(
            _newMasterMinter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        updatePauser(
            _newPauser: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    allowance(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
        spender: PromiseOrValue<string>,
        value: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    blacklist(
        _account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    blacklister(overrides?: CallOverrides): Promise<string>

    burn(
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    configureMinter(
        minter: PromiseOrValue<string>,
        minterAllowedAmount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    currency(overrides?: CallOverrides): Promise<string>

    decimals(overrides?: CallOverrides): Promise<number>

    initialize(
        tokenName: PromiseOrValue<string>,
        tokenSymbol: PromiseOrValue<string>,
        tokenCurrency: PromiseOrValue<string>,
        tokenDecimals: PromiseOrValue<BigNumberish>,
        newMasterMinter: PromiseOrValue<string>,
        newPauser: PromiseOrValue<string>,
        newBlacklister: PromiseOrValue<string>,
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    isBlacklisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    isMinter(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    masterMinter(overrides?: CallOverrides): Promise<string>

    mint(
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    minterAllowance(minter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<boolean>

    pauser(overrides?: CallOverrides): Promise<string>

    removeMinter(
        minter: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    symbol(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
        to: PromiseOrValue<string>,
        value: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferFrom(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        value: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unBlacklist(
        _account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    updateBlacklister(
        _newBlacklister: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updateMasterMinter(
        _newMasterMinter: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    updatePauser(
        _newPauser: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        approve(
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        blacklist(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        blacklister(overrides?: CallOverrides): Promise<string>

        burn(_amount: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

        configureMinter(
            minter: PromiseOrValue<string>,
            minterAllowedAmount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        currency(overrides?: CallOverrides): Promise<string>

        decimals(overrides?: CallOverrides): Promise<number>

        initialize(
            tokenName: PromiseOrValue<string>,
            tokenSymbol: PromiseOrValue<string>,
            tokenCurrency: PromiseOrValue<string>,
            tokenDecimals: PromiseOrValue<BigNumberish>,
            newMasterMinter: PromiseOrValue<string>,
            newPauser: PromiseOrValue<string>,
            newBlacklister: PromiseOrValue<string>,
            newOwner: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        isBlacklisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        isMinter(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        masterMinter(overrides?: CallOverrides): Promise<string>

        mint(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        minterAllowance(minter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        name(overrides?: CallOverrides): Promise<string>

        owner(overrides?: CallOverrides): Promise<string>

        pause(overrides?: CallOverrides): Promise<void>

        paused(overrides?: CallOverrides): Promise<boolean>

        pauser(overrides?: CallOverrides): Promise<string>

        removeMinter(minter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        symbol(overrides?: CallOverrides): Promise<string>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        transfer(
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        unBlacklist(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        unpause(overrides?: CallOverrides): Promise<void>

        updateBlacklister(_newBlacklister: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        updateMasterMinter(_newMasterMinter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        updatePauser(_newPauser: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'Approval(address,address,uint256)'(
            owner?: PromiseOrValue<string> | null,
            spender?: PromiseOrValue<string> | null,
            value?: null
        ): ApprovalEventFilter
        Approval(
            owner?: PromiseOrValue<string> | null,
            spender?: PromiseOrValue<string> | null,
            value?: null
        ): ApprovalEventFilter

        'Blacklisted(address)'(_account?: PromiseOrValue<string> | null): BlacklistedEventFilter
        Blacklisted(_account?: PromiseOrValue<string> | null): BlacklistedEventFilter

        'BlacklisterChanged(address)'(newBlacklister?: PromiseOrValue<string> | null): BlacklisterChangedEventFilter
        BlacklisterChanged(newBlacklister?: PromiseOrValue<string> | null): BlacklisterChangedEventFilter

        'Burn(address,uint256)'(burner?: PromiseOrValue<string> | null, amount?: null): BurnEventFilter
        Burn(burner?: PromiseOrValue<string> | null, amount?: null): BurnEventFilter

        'MasterMinterChanged(address)'(newMasterMinter?: PromiseOrValue<string> | null): MasterMinterChangedEventFilter
        MasterMinterChanged(newMasterMinter?: PromiseOrValue<string> | null): MasterMinterChangedEventFilter

        'Mint(address,address,uint256)'(
            minter?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            amount?: null
        ): MintEventFilter
        Mint(minter?: PromiseOrValue<string> | null, to?: PromiseOrValue<string> | null, amount?: null): MintEventFilter

        'MinterConfigured(address,uint256)'(
            minter?: PromiseOrValue<string> | null,
            minterAllowedAmount?: null
        ): MinterConfiguredEventFilter
        MinterConfigured(
            minter?: PromiseOrValue<string> | null,
            minterAllowedAmount?: null
        ): MinterConfiguredEventFilter

        'MinterRemoved(address)'(oldMinter?: PromiseOrValue<string> | null): MinterRemovedEventFilter
        MinterRemoved(oldMinter?: PromiseOrValue<string> | null): MinterRemovedEventFilter

        'OwnershipTransferred(address,address)'(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter
        OwnershipTransferred(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter

        'Pause()'(): PauseEventFilter
        Pause(): PauseEventFilter

        'PauserChanged(address)'(newAddress?: PromiseOrValue<string> | null): PauserChangedEventFilter
        PauserChanged(newAddress?: PromiseOrValue<string> | null): PauserChangedEventFilter

        'Transfer(address,address,uint256)'(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            value?: null
        ): TransferEventFilter
        Transfer(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            value?: null
        ): TransferEventFilter

        'UnBlacklisted(address)'(_account?: PromiseOrValue<string> | null): UnBlacklistedEventFilter
        UnBlacklisted(_account?: PromiseOrValue<string> | null): UnBlacklistedEventFilter

        'Unpause()'(): UnpauseEventFilter
        Unpause(): UnpauseEventFilter
    }

    estimateGas: {
        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        approve(
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        blacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        blacklister(overrides?: CallOverrides): Promise<BigNumber>

        burn(
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        configureMinter(
            minter: PromiseOrValue<string>,
            minterAllowedAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        currency(overrides?: CallOverrides): Promise<BigNumber>

        decimals(overrides?: CallOverrides): Promise<BigNumber>

        initialize(
            tokenName: PromiseOrValue<string>,
            tokenSymbol: PromiseOrValue<string>,
            tokenCurrency: PromiseOrValue<string>,
            tokenDecimals: PromiseOrValue<BigNumberish>,
            newMasterMinter: PromiseOrValue<string>,
            newPauser: PromiseOrValue<string>,
            newBlacklister: PromiseOrValue<string>,
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        isBlacklisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        isMinter(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        masterMinter(overrides?: CallOverrides): Promise<BigNumber>

        mint(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        minterAllowance(minter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        name(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        paused(overrides?: CallOverrides): Promise<BigNumber>

        pauser(overrides?: CallOverrides): Promise<BigNumber>

        removeMinter(
            minter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        symbol(overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        transfer(
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        unBlacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        updateBlacklister(
            _newBlacklister: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        updateMasterMinter(
            _newMasterMinter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        updatePauser(
            _newPauser: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        approve(
            spender: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        blacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        blacklister(overrides?: CallOverrides): Promise<PopulatedTransaction>

        burn(
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        configureMinter(
            minter: PromiseOrValue<string>,
            minterAllowedAmount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        currency(overrides?: CallOverrides): Promise<PopulatedTransaction>

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

        initialize(
            tokenName: PromiseOrValue<string>,
            tokenSymbol: PromiseOrValue<string>,
            tokenCurrency: PromiseOrValue<string>,
            tokenDecimals: PromiseOrValue<BigNumberish>,
            newMasterMinter: PromiseOrValue<string>,
            newPauser: PromiseOrValue<string>,
            newBlacklister: PromiseOrValue<string>,
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        isBlacklisted(_account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        isMinter(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        masterMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>

        mint(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        minterAllowance(minter: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

        pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>

        removeMinter(
            minter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transfer(
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        unBlacklist(
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        updateBlacklister(
            _newBlacklister: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        updateMasterMinter(
            _newMasterMinter: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        updatePauser(
            _newPauser: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
