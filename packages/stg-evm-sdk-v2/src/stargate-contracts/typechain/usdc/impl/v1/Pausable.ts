/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common'

export interface PausableInterface extends utils.Interface {
    functions: {
        'owner()': FunctionFragment
        'pause()': FunctionFragment
        'paused()': FunctionFragment
        'pauser()': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'unpause()': FunctionFragment
        'updatePauser(address)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'owner'
            | 'pause'
            | 'paused'
            | 'pauser'
            | 'transferOwnership'
            | 'unpause'
            | 'updatePauser'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'pause', values?: undefined): string
    encodeFunctionData(functionFragment: 'paused', values?: undefined): string
    encodeFunctionData(functionFragment: 'pauser', values?: undefined): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
    encodeFunctionData(functionFragment: 'updatePauser', values: [PromiseOrValue<string>]): string

    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'pauser', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'updatePauser', data: BytesLike): Result

    events: {
        'OwnershipTransferred(address,address)': EventFragment
        'Pause()': EventFragment
        'PauserChanged(address)': EventFragment
        'Unpause()': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Pause'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PauserChanged'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Unpause'): EventFragment
}

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PauseEventObject {}
export type PauseEvent = TypedEvent<[], PauseEventObject>

export type PauseEventFilter = TypedEventFilter<PauseEvent>

export interface PauserChangedEventObject {
    newAddress: string
}
export type PauserChangedEvent = TypedEvent<[string], PauserChangedEventObject>

export type PauserChangedEventFilter = TypedEventFilter<PauserChangedEvent>

export interface UnpauseEventObject {}
export type UnpauseEvent = TypedEvent<[], UnpauseEventObject>

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>

export interface Pausable extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: PausableInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        owner(overrides?: CallOverrides): Promise<[string]>

        pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        paused(overrides?: CallOverrides): Promise<[boolean]>

        pauser(overrides?: CallOverrides): Promise<[string]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        updatePauser(
            _newPauser: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    owner(overrides?: CallOverrides): Promise<string>

    pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    paused(overrides?: CallOverrides): Promise<boolean>

    pauser(overrides?: CallOverrides): Promise<string>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    updatePauser(
        _newPauser: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        owner(overrides?: CallOverrides): Promise<string>

        pause(overrides?: CallOverrides): Promise<void>

        paused(overrides?: CallOverrides): Promise<boolean>

        pauser(overrides?: CallOverrides): Promise<string>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        unpause(overrides?: CallOverrides): Promise<void>

        updatePauser(_newPauser: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'OwnershipTransferred(address,address)'(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter
        OwnershipTransferred(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter

        'Pause()'(): PauseEventFilter
        Pause(): PauseEventFilter

        'PauserChanged(address)'(newAddress?: PromiseOrValue<string> | null): PauserChangedEventFilter
        PauserChanged(newAddress?: PromiseOrValue<string> | null): PauserChangedEventFilter

        'Unpause()'(): UnpauseEventFilter
        Unpause(): UnpauseEventFilter
    }

    estimateGas: {
        owner(overrides?: CallOverrides): Promise<BigNumber>

        pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        paused(overrides?: CallOverrides): Promise<BigNumber>

        pauser(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        updatePauser(
            _newPauser: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        pause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

        pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        updatePauser(
            _newPauser: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
