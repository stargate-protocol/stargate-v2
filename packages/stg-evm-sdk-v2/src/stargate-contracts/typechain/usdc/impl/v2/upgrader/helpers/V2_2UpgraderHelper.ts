/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../../common'

export interface V2_2UpgraderHelperInterface extends utils.Interface {
    functions: {
        'DOMAIN_SEPARATOR()': FunctionFragment
        'balanceOf(address)': FunctionFragment
        'blacklister()': FunctionFragment
        'currency()': FunctionFragment
        'decimals()': FunctionFragment
        'fiatTokenOwner()': FunctionFragment
        'masterMinter()': FunctionFragment
        'name()': FunctionFragment
        'owner()': FunctionFragment
        'paused()': FunctionFragment
        'pauser()': FunctionFragment
        'proxy()': FunctionFragment
        'rescuer()': FunctionFragment
        'symbol()': FunctionFragment
        'tearDown()': FunctionFragment
        'totalSupply()': FunctionFragment
        'transferFrom(address,address,uint256)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'version()': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'DOMAIN_SEPARATOR'
            | 'balanceOf'
            | 'blacklister'
            | 'currency'
            | 'decimals'
            | 'fiatTokenOwner'
            | 'masterMinter'
            | 'name'
            | 'owner'
            | 'paused'
            | 'pauser'
            | 'proxy'
            | 'rescuer'
            | 'symbol'
            | 'tearDown'
            | 'totalSupply'
            | 'transferFrom'
            | 'transferOwnership'
            | 'version'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string
    encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'blacklister', values?: undefined): string
    encodeFunctionData(functionFragment: 'currency', values?: undefined): string
    encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
    encodeFunctionData(functionFragment: 'fiatTokenOwner', values?: undefined): string
    encodeFunctionData(functionFragment: 'masterMinter', values?: undefined): string
    encodeFunctionData(functionFragment: 'name', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'paused', values?: undefined): string
    encodeFunctionData(functionFragment: 'pauser', values?: undefined): string
    encodeFunctionData(functionFragment: 'proxy', values?: undefined): string
    encodeFunctionData(functionFragment: 'rescuer', values?: undefined): string
    encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
    encodeFunctionData(functionFragment: 'tearDown', values?: undefined): string
    encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'transferFrom',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'version', values?: undefined): string

    decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'blacklister', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'currency', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'fiatTokenOwner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'masterMinter', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'pauser', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'proxy', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'rescuer', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'tearDown', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result

    events: {
        'OwnershipTransferred(address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface V2_2UpgraderHelper extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: V2_2UpgraderHelperInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

        blacklister(overrides?: CallOverrides): Promise<[string]>

        currency(overrides?: CallOverrides): Promise<[string]>

        decimals(overrides?: CallOverrides): Promise<[number]>

        fiatTokenOwner(overrides?: CallOverrides): Promise<[string]>

        masterMinter(overrides?: CallOverrides): Promise<[string]>

        name(overrides?: CallOverrides): Promise<[string]>

        owner(overrides?: CallOverrides): Promise<[string]>

        paused(overrides?: CallOverrides): Promise<[boolean]>

        pauser(overrides?: CallOverrides): Promise<[string]>

        proxy(overrides?: CallOverrides): Promise<[string]>

        rescuer(overrides?: CallOverrides): Promise<[string]>

        symbol(overrides?: CallOverrides): Promise<[string]>

        tearDown(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        version(overrides?: CallOverrides): Promise<[string]>
    }

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    blacklister(overrides?: CallOverrides): Promise<string>

    currency(overrides?: CallOverrides): Promise<string>

    decimals(overrides?: CallOverrides): Promise<number>

    fiatTokenOwner(overrides?: CallOverrides): Promise<string>

    masterMinter(overrides?: CallOverrides): Promise<string>

    name(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    paused(overrides?: CallOverrides): Promise<boolean>

    pauser(overrides?: CallOverrides): Promise<string>

    proxy(overrides?: CallOverrides): Promise<string>

    rescuer(overrides?: CallOverrides): Promise<string>

    symbol(overrides?: CallOverrides): Promise<string>

    tearDown(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        value: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    version(overrides?: CallOverrides): Promise<string>

    callStatic: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        blacklister(overrides?: CallOverrides): Promise<string>

        currency(overrides?: CallOverrides): Promise<string>

        decimals(overrides?: CallOverrides): Promise<number>

        fiatTokenOwner(overrides?: CallOverrides): Promise<string>

        masterMinter(overrides?: CallOverrides): Promise<string>

        name(overrides?: CallOverrides): Promise<string>

        owner(overrides?: CallOverrides): Promise<string>

        paused(overrides?: CallOverrides): Promise<boolean>

        pauser(overrides?: CallOverrides): Promise<string>

        proxy(overrides?: CallOverrides): Promise<string>

        rescuer(overrides?: CallOverrides): Promise<string>

        symbol(overrides?: CallOverrides): Promise<string>

        tearDown(overrides?: CallOverrides): Promise<void>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        version(overrides?: CallOverrides): Promise<string>
    }

    filters: {
        'OwnershipTransferred(address,address)'(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter
        OwnershipTransferred(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter
    }

    estimateGas: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        blacklister(overrides?: CallOverrides): Promise<BigNumber>

        currency(overrides?: CallOverrides): Promise<BigNumber>

        decimals(overrides?: CallOverrides): Promise<BigNumber>

        fiatTokenOwner(overrides?: CallOverrides): Promise<BigNumber>

        masterMinter(overrides?: CallOverrides): Promise<BigNumber>

        name(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        paused(overrides?: CallOverrides): Promise<BigNumber>

        pauser(overrides?: CallOverrides): Promise<BigNumber>

        proxy(overrides?: CallOverrides): Promise<BigNumber>

        rescuer(overrides?: CallOverrides): Promise<BigNumber>

        symbol(overrides?: CallOverrides): Promise<BigNumber>

        tearDown(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        version(overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        blacklister(overrides?: CallOverrides): Promise<PopulatedTransaction>

        currency(overrides?: CallOverrides): Promise<PopulatedTransaction>

        decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

        fiatTokenOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        masterMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>

        name(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

        pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>

        proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>

        rescuer(overrides?: CallOverrides): Promise<PopulatedTransaction>

        symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

        tearDown(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            value: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
