/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common'

export interface EIP3009Interface extends utils.Interface {
    functions: {
        'CANCEL_AUTHORIZATION_TYPEHASH()': FunctionFragment
        'DOMAIN_SEPARATOR()': FunctionFragment
        'RECEIVE_WITH_AUTHORIZATION_TYPEHASH()': FunctionFragment
        'TRANSFER_WITH_AUTHORIZATION_TYPEHASH()': FunctionFragment
        'allowance(address,address)': FunctionFragment
        'approve(address,uint256)': FunctionFragment
        'authorizationState(address,bytes32)': FunctionFragment
        'balanceOf(address)': FunctionFragment
        'totalSupply()': FunctionFragment
        'transfer(address,uint256)': FunctionFragment
        'transferFrom(address,address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'CANCEL_AUTHORIZATION_TYPEHASH'
            | 'DOMAIN_SEPARATOR'
            | 'RECEIVE_WITH_AUTHORIZATION_TYPEHASH'
            | 'TRANSFER_WITH_AUTHORIZATION_TYPEHASH'
            | 'allowance'
            | 'approve'
            | 'authorizationState'
            | 'balanceOf'
            | 'totalSupply'
            | 'transfer'
            | 'transferFrom'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'CANCEL_AUTHORIZATION_TYPEHASH', values?: undefined): string
    encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string
    encodeFunctionData(functionFragment: 'RECEIVE_WITH_AUTHORIZATION_TYPEHASH', values?: undefined): string
    encodeFunctionData(functionFragment: 'TRANSFER_WITH_AUTHORIZATION_TYPEHASH', values?: undefined): string
    encodeFunctionData(functionFragment: 'allowance', values: [PromiseOrValue<string>, PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'approve',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'authorizationState',
        values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'transfer',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'transferFrom',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'CANCEL_AUTHORIZATION_TYPEHASH', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'RECEIVE_WITH_AUTHORIZATION_TYPEHASH', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'TRANSFER_WITH_AUTHORIZATION_TYPEHASH', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'authorizationState', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result

    events: {
        'Approval(address,address,uint256)': EventFragment
        'AuthorizationCanceled(address,bytes32)': EventFragment
        'AuthorizationUsed(address,bytes32)': EventFragment
        'Transfer(address,address,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'AuthorizationCanceled'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'AuthorizationUsed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export interface ApprovalEventObject {
    owner: string
    spender: string
    value: BigNumber
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface AuthorizationCanceledEventObject {
    authorizer: string
    nonce: string
}
export type AuthorizationCanceledEvent = TypedEvent<[string, string], AuthorizationCanceledEventObject>

export type AuthorizationCanceledEventFilter = TypedEventFilter<AuthorizationCanceledEvent>

export interface AuthorizationUsedEventObject {
    authorizer: string
    nonce: string
}
export type AuthorizationUsedEvent = TypedEvent<[string, string], AuthorizationUsedEventObject>

export type AuthorizationUsedEventFilter = TypedEventFilter<AuthorizationUsedEvent>

export interface TransferEventObject {
    from: string
    to: string
    value: BigNumber
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface EIP3009 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: EIP3009Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>

        RECEIVE_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

        TRANSFER_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        authorizationState(
            authorizer: PromiseOrValue<string>,
            nonce: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

        totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

    RECEIVE_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>

    allowance(
        owner: PromiseOrValue<string>,
        spender: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    approve(
        spender: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    authorizationState(
        authorizer: PromiseOrValue<string>,
        nonce: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<boolean>

    balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferFrom(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

        RECEIVE_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>

        TRANSFER_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>

        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        authorizationState(
            authorizer: PromiseOrValue<string>,
            nonce: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<boolean>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>
    }

    filters: {
        'Approval(address,address,uint256)'(
            owner?: PromiseOrValue<string> | null,
            spender?: PromiseOrValue<string> | null,
            value?: null
        ): ApprovalEventFilter
        Approval(
            owner?: PromiseOrValue<string> | null,
            spender?: PromiseOrValue<string> | null,
            value?: null
        ): ApprovalEventFilter

        'AuthorizationCanceled(address,bytes32)'(
            authorizer?: PromiseOrValue<string> | null,
            nonce?: PromiseOrValue<BytesLike> | null
        ): AuthorizationCanceledEventFilter
        AuthorizationCanceled(
            authorizer?: PromiseOrValue<string> | null,
            nonce?: PromiseOrValue<BytesLike> | null
        ): AuthorizationCanceledEventFilter

        'AuthorizationUsed(address,bytes32)'(
            authorizer?: PromiseOrValue<string> | null,
            nonce?: PromiseOrValue<BytesLike> | null
        ): AuthorizationUsedEventFilter
        AuthorizationUsed(
            authorizer?: PromiseOrValue<string> | null,
            nonce?: PromiseOrValue<BytesLike> | null
        ): AuthorizationUsedEventFilter

        'Transfer(address,address,uint256)'(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            value?: null
        ): TransferEventFilter
        Transfer(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            value?: null
        ): TransferEventFilter
    }

    estimateGas: {
        CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>

        RECEIVE_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

        TRANSFER_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        authorizationState(
            authorizer: PromiseOrValue<string>,
            nonce: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        totalSupply(overrides?: CallOverrides): Promise<BigNumber>

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

        DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

        RECEIVE_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

        TRANSFER_WITH_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

        allowance(
            owner: PromiseOrValue<string>,
            spender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        approve(
            spender: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        authorizationState(
            authorizer: PromiseOrValue<string>,
            nonce: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        balanceOf(account: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transfer(
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferFrom(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
