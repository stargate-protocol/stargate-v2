/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../common'

export interface V2UpgraderInterface extends utils.Interface {
    functions: {
        'abortUpgrade()': FunctionFragment
        'helper()': FunctionFragment
        'implementation()': FunctionFragment
        'newName()': FunctionFragment
        'newProxyAdmin()': FunctionFragment
        'owner()': FunctionFragment
        'proxy()': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'upgrade()': FunctionFragment
        'withdrawFiatToken()': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'abortUpgrade'
            | 'helper'
            | 'implementation'
            | 'newName'
            | 'newProxyAdmin'
            | 'owner'
            | 'proxy'
            | 'transferOwnership'
            | 'upgrade'
            | 'withdrawFiatToken'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'abortUpgrade', values?: undefined): string
    encodeFunctionData(functionFragment: 'helper', values?: undefined): string
    encodeFunctionData(functionFragment: 'implementation', values?: undefined): string
    encodeFunctionData(functionFragment: 'newName', values?: undefined): string
    encodeFunctionData(functionFragment: 'newProxyAdmin', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'proxy', values?: undefined): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'upgrade', values?: undefined): string
    encodeFunctionData(functionFragment: 'withdrawFiatToken', values?: undefined): string

    decodeFunctionResult(functionFragment: 'abortUpgrade', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'helper', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'implementation', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'newName', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'newProxyAdmin', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'proxy', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'upgrade', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawFiatToken', data: BytesLike): Result

    events: {
        'OwnershipTransferred(address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface V2Upgrader extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: V2UpgraderInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        abortUpgrade(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        helper(overrides?: CallOverrides): Promise<[string]>

        implementation(overrides?: CallOverrides): Promise<[string]>

        newName(overrides?: CallOverrides): Promise<[string]>

        newProxyAdmin(overrides?: CallOverrides): Promise<[string]>

        owner(overrides?: CallOverrides): Promise<[string]>

        proxy(overrides?: CallOverrides): Promise<[string]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        upgrade(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        withdrawFiatToken(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>
    }

    abortUpgrade(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    helper(overrides?: CallOverrides): Promise<string>

    implementation(overrides?: CallOverrides): Promise<string>

    newName(overrides?: CallOverrides): Promise<string>

    newProxyAdmin(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    proxy(overrides?: CallOverrides): Promise<string>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    upgrade(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    withdrawFiatToken(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    callStatic: {
        abortUpgrade(overrides?: CallOverrides): Promise<void>

        helper(overrides?: CallOverrides): Promise<string>

        implementation(overrides?: CallOverrides): Promise<string>

        newName(overrides?: CallOverrides): Promise<string>

        newProxyAdmin(overrides?: CallOverrides): Promise<string>

        owner(overrides?: CallOverrides): Promise<string>

        proxy(overrides?: CallOverrides): Promise<string>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        upgrade(overrides?: CallOverrides): Promise<void>

        withdrawFiatToken(overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'OwnershipTransferred(address,address)'(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter
        OwnershipTransferred(previousOwner?: null, newOwner?: null): OwnershipTransferredEventFilter
    }

    estimateGas: {
        abortUpgrade(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        helper(overrides?: CallOverrides): Promise<BigNumber>

        implementation(overrides?: CallOverrides): Promise<BigNumber>

        newName(overrides?: CallOverrides): Promise<BigNumber>

        newProxyAdmin(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        proxy(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        upgrade(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        withdrawFiatToken(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>
    }

    populateTransaction: {
        abortUpgrade(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        helper(overrides?: CallOverrides): Promise<PopulatedTransaction>

        implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>

        newName(overrides?: CallOverrides): Promise<PopulatedTransaction>

        newProxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        proxy(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        upgrade(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        withdrawFiatToken(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>
    }
}
