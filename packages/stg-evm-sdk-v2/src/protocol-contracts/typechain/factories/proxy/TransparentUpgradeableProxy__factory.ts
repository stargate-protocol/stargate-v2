/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, PayableOverrides, BytesLike } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../common'
import type {
    TransparentUpgradeableProxy,
    TransparentUpgradeableProxyInterface,
} from '../../proxy/TransparentUpgradeableProxy'

const _abi = [
    {
        inputs: [
            {
                internalType: 'address',
                name: '_logic',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'admin_',
                type: 'address',
            },
            {
                internalType: 'bytes',
                name: '_data',
                type: 'bytes',
            },
        ],
        stateMutability: 'payable',
        type: 'constructor',
    },
    {
        inputs: [],
        name: 'AdminAccessDenied',
        type: 'error',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'address',
                name: 'previousAdmin',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'address',
                name: 'newAdmin',
                type: 'address',
            },
        ],
        name: 'AdminChanged',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'beacon',
                type: 'address',
            },
        ],
        name: 'BeaconUpgraded',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'implementation',
                type: 'address',
            },
        ],
        name: 'Upgraded',
        type: 'event',
    },
    {
        stateMutability: 'payable',
        type: 'fallback',
    },
    {
        inputs: [],
        name: 'admin',
        outputs: [
            {
                internalType: 'address',
                name: 'admin_',
                type: 'address',
            },
        ],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'newAdmin',
                type: 'address',
            },
        ],
        name: 'changeAdmin',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [],
        name: 'implementation',
        outputs: [
            {
                internalType: 'address',
                name: 'implementation_',
                type: 'address',
            },
        ],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'newImplementation',
                type: 'address',
            },
        ],
        name: 'upgradeTo',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'newImplementation',
                type: 'address',
            },
            {
                internalType: 'bytes',
                name: 'data',
                type: 'bytes',
            },
        ],
        name: 'upgradeToAndCall',
        outputs: [],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        stateMutability: 'payable',
        type: 'receive',
    },
] as const

const _bytecode =
    ''

type TransparentUpgradeableProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
    xs: TransparentUpgradeableProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class TransparentUpgradeableProxy__factory extends ContractFactory {
    constructor(...args: TransparentUpgradeableProxyConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args)
        } else {
            super(_abi, _bytecode, args[0])
        }
    }

    override deploy(
        _logic: PromiseOrValue<string>,
        admin_: PromiseOrValue<string>,
        _data: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<TransparentUpgradeableProxy> {
        return super.deploy(_logic, admin_, _data, overrides || {}) as Promise<TransparentUpgradeableProxy>
    }
    override getDeployTransaction(
        _logic: PromiseOrValue<string>,
        admin_: PromiseOrValue<string>,
        _data: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): TransactionRequest {
        return super.getDeployTransaction(_logic, admin_, _data, overrides || {})
    }
    override attach(address: string): TransparentUpgradeableProxy {
        return super.attach(address) as TransparentUpgradeableProxy
    }
    override connect(signer: Signer): TransparentUpgradeableProxy__factory {
        return super.connect(signer) as TransparentUpgradeableProxy__factory
    }

    static readonly bytecode = _bytecode
    static readonly abi = _abi
    static createInterface(): TransparentUpgradeableProxyInterface {
        return new utils.Interface(_abi) as TransparentUpgradeableProxyInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): TransparentUpgradeableProxy {
        return new Contract(address, _abi, signerOrProvider) as TransparentUpgradeableProxy
    }
}
