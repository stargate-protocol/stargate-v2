/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import type { Provider } from '@ethersproject/providers'
import type { MultiSig, MultiSigInterface } from '../../../uln/dvn/MultiSig'

const _abi = [
    {
        inputs: [],
        name: 'MultiSig_InvalidSigner',
        type: 'error',
    },
    {
        inputs: [],
        name: 'MultiSig_OnlySigner',
        type: 'error',
    },
    {
        inputs: [],
        name: 'MultiSig_QuorumIsZero',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'uint64',
                name: 'signersSize',
                type: 'uint64',
            },
            {
                internalType: 'uint64',
                name: 'quorum',
                type: 'uint64',
            },
        ],
        name: 'MultiSig_SignersSizeIsLessThanQuorum',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'signer',
                type: 'address',
            },
            {
                internalType: 'bool',
                name: 'active',
                type: 'bool',
            },
        ],
        name: 'MultiSig_StateAlreadySet',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'signer',
                type: 'address',
            },
            {
                internalType: 'bool',
                name: 'active',
                type: 'bool',
            },
        ],
        name: 'MultiSig_StateNotSet',
        type: 'error',
    },
    {
        inputs: [],
        name: 'MultiSig_UnorderedSigners',
        type: 'error',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'uint64',
                name: '_quorum',
                type: 'uint64',
            },
        ],
        name: 'UpdateQuorum',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'address',
                name: '_signer',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'bool',
                name: '_active',
                type: 'bool',
            },
        ],
        name: 'UpdateSigner',
        type: 'event',
    },
    {
        inputs: [],
        name: 'getSigners',
        outputs: [
            {
                internalType: 'address[]',
                name: '',
                type: 'address[]',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_signer',
                type: 'address',
            },
        ],
        name: 'isSigner',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'quorum',
        outputs: [
            {
                internalType: 'uint64',
                name: '',
                type: 'uint64',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'signerSize',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_signer',
                type: 'address',
            },
        ],
        name: 'signers',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: '_hash',
                type: 'bytes32',
            },
            {
                internalType: 'bytes',
                name: '_signatures',
                type: 'bytes',
            },
        ],
        name: 'verifySignatures',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool',
            },
            {
                internalType: 'enum MultiSig.Errors',
                name: '',
                type: 'uint8',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
] as const

export class MultiSig__factory {
    static readonly abi = _abi
    static createInterface(): MultiSigInterface {
        return new utils.Interface(_abi) as MultiSigInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): MultiSig {
        return new Contract(address, _abi, signerOrProvider) as MultiSig
    }
}
