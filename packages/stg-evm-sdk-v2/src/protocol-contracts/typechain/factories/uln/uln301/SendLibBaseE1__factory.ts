/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import type { Provider } from '@ethersproject/providers'
import type { SendLibBaseE1, SendLibBaseE1Interface } from '../../../uln/uln301/SendLibBaseE1'

const _abi = [
    {
        inputs: [],
        name: 'AddressCast_InvalidAddress',
        type: 'error',
    },
    {
        inputs: [],
        name: 'AddressSizeConfig_AddressSizeAlreadySet',
        type: 'error',
    },
    {
        inputs: [],
        name: 'AddressSizeConfig_InvalidAddressSize',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_MessageLib_InsufficientMsgValue',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: 'requested',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'available',
                type: 'uint256',
            },
        ],
        name: 'LZ_MessageLib_InvalidAmount',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_MessageLib_InvalidExecutor',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: 'actual',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'max',
                type: 'uint256',
            },
        ],
        name: 'LZ_MessageLib_InvalidMessageSize',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_MessageLib_InvalidPath',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_MessageLib_InvalidSender',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_MessageLib_LzTokenPaymentAddressMustBeSender',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_MessageLib_OnlyEndpoint',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_MessageLib_TransferFailed',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_MessageLib_ZeroMessageSize',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_to',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: '_value',
                type: 'uint256',
            },
        ],
        name: 'Transfer_NativeFailed',
        type: 'error',
    },
    {
        inputs: [],
        name: 'Transfer_ToAddressIsZero',
        type: 'error',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'uint16',
                name: 'eid',
                type: 'uint16',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'size',
                type: 'uint256',
            },
        ],
        name: 'AddressSizeSet',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                components: [
                    {
                        internalType: 'uint32',
                        name: 'eid',
                        type: 'uint32',
                    },
                    {
                        components: [
                            {
                                internalType: 'uint32',
                                name: 'maxMessageSize',
                                type: 'uint32',
                            },
                            {
                                internalType: 'address',
                                name: 'executor',
                                type: 'address',
                            },
                        ],
                        internalType: 'struct ExecutorConfig',
                        name: 'config',
                        type: 'tuple',
                    },
                ],
                indexed: false,
                internalType: 'struct SetDefaultExecutorConfigParam[]',
                name: 'params',
                type: 'tuple[]',
            },
        ],
        name: 'DefaultExecutorConfigsSet',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'address',
                name: 'oapp',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'uint32',
                name: 'eid',
                type: 'uint32',
            },
            {
                components: [
                    {
                        internalType: 'uint32',
                        name: 'maxMessageSize',
                        type: 'uint32',
                    },
                    {
                        internalType: 'address',
                        name: 'executor',
                        type: 'address',
                    },
                ],
                indexed: false,
                internalType: 'struct ExecutorConfig',
                name: 'config',
                type: 'tuple',
            },
        ],
        name: 'ExecutorConfigSet',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'address',
                name: 'executor',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'fee',
                type: 'uint256',
            },
        ],
        name: 'ExecutorFeePaid',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'address',
                name: 'token',
                type: 'address',
            },
        ],
        name: 'LzTokenSet',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'address',
                name: 'user',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'address',
                name: 'receiver',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'amount',
                type: 'uint256',
            },
        ],
        name: 'NativeFeeWithdrawn',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'previousOwner',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'newOwner',
                type: 'address',
            },
        ],
        name: 'OwnershipTransferred',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'bytes',
                name: 'encodedPayload',
                type: 'bytes',
            },
            {
                indexed: false,
                internalType: 'bytes',
                name: 'options',
                type: 'bytes',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'nativeFee',
                type: 'uint256',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'lzTokenFee',
                type: 'uint256',
            },
        ],
        name: 'PacketSent',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'uint256',
                name: 'newTreasuryNativeFeeCap',
                type: 'uint256',
            },
        ],
        name: 'TreasuryNativeFeeCapSet',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'address',
                name: 'treasury',
                type: 'address',
            },
        ],
        name: 'TreasurySet',
        type: 'event',
    },
    {
        inputs: [
            {
                internalType: 'uint32',
                name: 'dstEid',
                type: 'uint32',
            },
        ],
        name: 'addressSizes',
        outputs: [
            {
                internalType: 'uint256',
                name: 'size',
                type: 'uint256',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint16',
                name: '_dstEid',
                type: 'uint16',
            },
            {
                internalType: 'address',
                name: '_sender',
                type: 'address',
            },
            {
                internalType: 'bytes',
                name: '_message',
                type: 'bytes',
            },
            {
                internalType: 'bool',
                name: '_payInLzToken',
                type: 'bool',
            },
            {
                internalType: 'bytes',
                name: '_options',
                type: 'bytes',
            },
        ],
        name: 'estimateFees',
        outputs: [
            {
                internalType: 'uint256',
                name: 'nativeFee',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'lzTokenFee',
                type: 'uint256',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'oapp',
                type: 'address',
            },
            {
                internalType: 'uint32',
                name: 'eid',
                type: 'uint32',
            },
        ],
        name: 'executorConfigs',
        outputs: [
            {
                internalType: 'uint32',
                name: 'maxMessageSize',
                type: 'uint32',
            },
            {
                internalType: 'address',
                name: 'executor',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'worker',
                type: 'address',
            },
        ],
        name: 'fees',
        outputs: [
            {
                internalType: 'uint256',
                name: '',
                type: 'uint256',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint16',
                name: '_chainId',
                type: 'uint16',
            },
            {
                internalType: 'address',
                name: '_userApplication',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: '_configType',
                type: 'uint256',
            },
        ],
        name: 'getConfig',
        outputs: [
            {
                internalType: 'bytes',
                name: '',
                type: 'bytes',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_oapp',
                type: 'address',
            },
            {
                internalType: 'uint32',
                name: '_remoteEid',
                type: 'uint32',
            },
        ],
        name: 'getExecutorConfig',
        outputs: [
            {
                components: [
                    {
                        internalType: 'uint32',
                        name: 'maxMessageSize',
                        type: 'uint32',
                    },
                    {
                        internalType: 'address',
                        name: 'executor',
                        type: 'address',
                    },
                ],
                internalType: 'struct ExecutorConfig',
                name: 'rtnConfig',
                type: 'tuple',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'nonceContract',
        outputs: [
            {
                internalType: 'contract INonceContract',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'owner',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'renounceOwnership',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_sender',
                type: 'address',
            },
            {
                internalType: 'uint64',
                name: '',
                type: 'uint64',
            },
            {
                internalType: 'uint16',
                name: '_dstEid',
                type: 'uint16',
            },
            {
                internalType: 'bytes',
                name: '_path',
                type: 'bytes',
            },
            {
                internalType: 'bytes',
                name: '_message',
                type: 'bytes',
            },
            {
                internalType: 'address payable',
                name: '_refundAddress',
                type: 'address',
            },
            {
                internalType: 'address',
                name: '_lzTokenPaymentAddress',
                type: 'address',
            },
            {
                internalType: 'bytes',
                name: '_options',
                type: 'bytes',
            },
        ],
        name: 'send',
        outputs: [],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint16',
                name: '_eid',
                type: 'uint16',
            },
            {
                internalType: 'uint256',
                name: '_size',
                type: 'uint256',
            },
        ],
        name: 'setAddressSize',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint16',
                name: '_chainId',
                type: 'uint16',
            },
            {
                internalType: 'address',
                name: '_userApplication',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: '_configType',
                type: 'uint256',
            },
            {
                internalType: 'bytes',
                name: '_config',
                type: 'bytes',
            },
        ],
        name: 'setConfig',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: 'uint32',
                        name: 'eid',
                        type: 'uint32',
                    },
                    {
                        components: [
                            {
                                internalType: 'uint32',
                                name: 'maxMessageSize',
                                type: 'uint32',
                            },
                            {
                                internalType: 'address',
                                name: 'executor',
                                type: 'address',
                            },
                        ],
                        internalType: 'struct ExecutorConfig',
                        name: 'config',
                        type: 'tuple',
                    },
                ],
                internalType: 'struct SetDefaultExecutorConfigParam[]',
                name: '_params',
                type: 'tuple[]',
            },
        ],
        name: 'setDefaultExecutorConfigs',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_lzToken',
                type: 'address',
            },
        ],
        name: 'setLzToken',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_treasury',
                type: 'address',
            },
        ],
        name: 'setTreasury',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: '_newTreasuryNativeFeeCap',
                type: 'uint256',
            },
        ],
        name: 'setTreasuryNativeFeeCap',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'newOwner',
                type: 'address',
            },
        ],
        name: 'transferOwnership',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [],
        name: 'treasury',
        outputs: [
            {
                internalType: 'address',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'treasuryFeeHandler',
        outputs: [
            {
                internalType: 'contract ITreasuryFeeHandler',
                name: '',
                type: 'address',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'version',
        outputs: [
            {
                internalType: 'uint64',
                name: 'major',
                type: 'uint64',
            },
            {
                internalType: 'uint8',
                name: 'minor',
                type: 'uint8',
            },
            {
                internalType: 'uint8',
                name: 'endpointVersion',
                type: 'uint8',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_to',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: '_amount',
                type: 'uint256',
            },
        ],
        name: 'withdrawFee',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
] as const

export class SendLibBaseE1__factory {
    static readonly abi = _abi
    static createInterface(): SendLibBaseE1Interface {
        return new utils.Interface(_abi) as SendLibBaseE1Interface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): SendLibBaseE1 {
        return new Contract(address, _abi, signerOrProvider) as SendLibBaseE1
    }
}
