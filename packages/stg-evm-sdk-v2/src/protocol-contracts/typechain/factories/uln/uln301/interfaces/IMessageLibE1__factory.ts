/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import type { Provider } from '@ethersproject/providers'
import type { IMessageLibE1, IMessageLibE1Interface } from '../../../../uln/uln301/interfaces/IMessageLibE1'

const _abi = [
    {
        inputs: [],
        name: 'LZ_MessageLib_InsufficientMsgValue',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_MessageLib_InvalidPath',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_MessageLib_InvalidSender',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_MessageLib_LzTokenPaymentAddressMustBeSender',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'uint16',
                name: '_chainId',
                type: 'uint16',
            },
            {
                internalType: 'address',
                name: '_userApplication',
                type: 'address',
            },
            {
                internalType: 'bytes',
                name: '_payload',
                type: 'bytes',
            },
            {
                internalType: 'bool',
                name: '_payInZRO',
                type: 'bool',
            },
            {
                internalType: 'bytes',
                name: '_adapterParam',
                type: 'bytes',
            },
        ],
        name: 'estimateFees',
        outputs: [
            {
                internalType: 'uint256',
                name: 'nativeFee',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'zroFee',
                type: 'uint256',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint16',
                name: '_chainId',
                type: 'uint16',
            },
            {
                internalType: 'address',
                name: '_userApplication',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: '_configType',
                type: 'uint256',
            },
        ],
        name: 'getConfig',
        outputs: [
            {
                internalType: 'bytes',
                name: '',
                type: 'bytes',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_userApplication',
                type: 'address',
            },
            {
                internalType: 'uint64',
                name: '_lastNonce',
                type: 'uint64',
            },
            {
                internalType: 'uint16',
                name: '_chainId',
                type: 'uint16',
            },
            {
                internalType: 'bytes',
                name: '_destination',
                type: 'bytes',
            },
            {
                internalType: 'bytes',
                name: '_payload',
                type: 'bytes',
            },
            {
                internalType: 'address payable',
                name: 'refundAddress',
                type: 'address',
            },
            {
                internalType: 'address',
                name: '_zroPaymentAddress',
                type: 'address',
            },
            {
                internalType: 'bytes',
                name: '_adapterParams',
                type: 'bytes',
            },
        ],
        name: 'send',
        outputs: [],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint16',
                name: '_chainId',
                type: 'uint16',
            },
            {
                internalType: 'address',
                name: '_userApplication',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: '_configType',
                type: 'uint256',
            },
            {
                internalType: 'bytes',
                name: '_config',
                type: 'bytes',
            },
        ],
        name: 'setConfig',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_lzToken',
                type: 'address',
            },
        ],
        name: 'setLzToken',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_treasury',
                type: 'address',
            },
        ],
        name: 'setTreasury',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [],
        name: 'version',
        outputs: [
            {
                internalType: 'uint64',
                name: 'major',
                type: 'uint64',
            },
            {
                internalType: 'uint8',
                name: 'minor',
                type: 'uint8',
            },
            {
                internalType: 'uint8',
                name: 'endpointVersion',
                type: 'uint8',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_to',
                type: 'address',
            },
            {
                internalType: 'uint256',
                name: '_amount',
                type: 'uint256',
            },
        ],
        name: 'withdrawFee',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
] as const

export class IMessageLibE1__factory {
    static readonly abi = _abi
    static createInterface(): IMessageLibE1Interface {
        return new utils.Interface(_abi) as IMessageLibE1Interface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): IMessageLibE1 {
        return new Contract(address, _abi, signerOrProvider) as IMessageLibE1
    }
}
