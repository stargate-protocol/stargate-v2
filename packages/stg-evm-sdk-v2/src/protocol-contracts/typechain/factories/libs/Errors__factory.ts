/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../common'
import type { Errors, ErrorsInterface } from '../../libs/Errors'

const _abi = [
    {
        inputs: [],
        name: 'LZ_AlreadyRegistered',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_ComposeExists',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'expected',
                type: 'bytes32',
            },
            {
                internalType: 'bytes32',
                name: 'actual',
                type: 'bytes32',
            },
        ],
        name: 'LZ_ComposeNotFound',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_DefaultReceiveLibUnavailable',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_DefaultSendLibUnavailable',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: 'requiredNative',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'suppliedNative',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'requiredLzToken',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'suppliedLzToken',
                type: 'uint256',
            },
        ],
        name: 'LZ_InsufficientFee',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'uint256',
                name: 'required',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: 'supplied',
                type: 'uint256',
            },
        ],
        name: 'LZ_InvalidAmount',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_InvalidArgument',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_InvalidExpiry',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'uint64',
                name: 'nonce',
                type: 'uint64',
            },
        ],
        name: 'LZ_InvalidNonce',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_InvalidPayloadHash',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_InvalidReceiveLibrary',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_LzTokenUnavailable',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_NotImplemented',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_OnlyNonDefaultLib',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_OnlyReceiveLib',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_OnlyRegisteredLib',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_OnlyRegisteredOrDefaultLib',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_OnlySendLib',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_PathNotInitializable',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_PathNotVerifiable',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'expected',
                type: 'bytes32',
            },
            {
                internalType: 'bytes32',
                name: 'actual',
                type: 'bytes32',
            },
        ],
        name: 'LZ_PayloadHashNotFound',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_SameValue',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_SendReentrancy',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_Unauthorized',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_UnsupportedEid',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_UnsupportedInterface',
        type: 'error',
    },
    {
        inputs: [],
        name: 'LZ_ZeroLzTokenFee',
        type: 'error',
    },
] as const

const _bytecode =
    '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ee4e5ff80e72cf65c8cc5fa273578092c1f724159d71f20ab473329e530bea6b64736f6c63430008160033'

type ErrorsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: ErrorsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Errors__factory extends ContractFactory {
    constructor(...args: ErrorsConstructorParams) {
        if (isSuperArgs(args)) {
            super(...args)
        } else {
            super(_abi, _bytecode, args[0])
        }
    }

    override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Errors> {
        return super.deploy(overrides || {}) as Promise<Errors>
    }
    override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
        return super.getDeployTransaction(overrides || {})
    }
    override attach(address: string): Errors {
        return super.attach(address) as Errors
    }
    override connect(signer: Signer): Errors__factory {
        return super.connect(signer) as Errors__factory
    }

    static readonly bytecode = _bytecode
    static readonly abi = _abi
    static createInterface(): ErrorsInterface {
        return new utils.Interface(_abi) as ErrorsInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): Errors {
        return new Contract(address, _abi, signerOrProvider) as Errors
    }
}
