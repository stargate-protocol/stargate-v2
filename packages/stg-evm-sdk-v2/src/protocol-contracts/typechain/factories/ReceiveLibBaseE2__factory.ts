/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import type { Provider } from '@ethersproject/providers'
import type { ReceiveLibBaseE2, ReceiveLibBaseE2Interface } from '../ReceiveLibBaseE2'

const _abi = [
    {
        inputs: [],
        name: 'LZ_MessageLib_OnlyEndpoint',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'uint32',
                name: '_eid',
                type: 'uint32',
            },
            {
                internalType: 'address',
                name: '_oapp',
                type: 'address',
            },
            {
                internalType: 'uint32',
                name: '_configType',
                type: 'uint32',
            },
        ],
        name: 'getConfig',
        outputs: [
            {
                internalType: 'bytes',
                name: 'config',
                type: 'bytes',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'uint32',
                name: '_eid',
                type: 'uint32',
            },
        ],
        name: 'isSupportedEid',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'messageLibType',
        outputs: [
            {
                internalType: 'enum MessageLibType',
                name: '',
                type: 'uint8',
            },
        ],
        stateMutability: 'pure',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_oapp',
                type: 'address',
            },
            {
                components: [
                    {
                        internalType: 'uint32',
                        name: 'eid',
                        type: 'uint32',
                    },
                    {
                        internalType: 'uint32',
                        name: 'configType',
                        type: 'uint32',
                    },
                    {
                        internalType: 'bytes',
                        name: 'config',
                        type: 'bytes',
                    },
                ],
                internalType: 'struct SetConfigParam[]',
                name: '_config',
                type: 'tuple[]',
            },
        ],
        name: 'setConfig',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'bytes4',
                name: '_interfaceId',
                type: 'bytes4',
            },
        ],
        name: 'supportsInterface',
        outputs: [
            {
                internalType: 'bool',
                name: '',
                type: 'bool',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [],
        name: 'version',
        outputs: [
            {
                internalType: 'uint64',
                name: 'major',
                type: 'uint64',
            },
            {
                internalType: 'uint8',
                name: 'minor',
                type: 'uint8',
            },
            {
                internalType: 'uint8',
                name: 'endpointVersion',
                type: 'uint8',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
] as const

export class ReceiveLibBaseE2__factory {
    static readonly abi = _abi
    static createInterface(): ReceiveLibBaseE2Interface {
        return new utils.Interface(_abi) as ReceiveLibBaseE2Interface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): ReceiveLibBaseE2 {
        return new Contract(address, _abi, signerOrProvider) as ReceiveLibBaseE2
    }
}
