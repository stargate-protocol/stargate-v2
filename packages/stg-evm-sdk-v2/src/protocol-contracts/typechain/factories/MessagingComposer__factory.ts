/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers'
import type { Provider } from '@ethersproject/providers'
import type { MessagingComposer, MessagingComposerInterface } from '../MessagingComposer'

const _abi = [
    {
        inputs: [],
        name: 'LZ_ComposeExists',
        type: 'error',
    },
    {
        inputs: [
            {
                internalType: 'bytes32',
                name: 'expected',
                type: 'bytes32',
            },
            {
                internalType: 'bytes32',
                name: 'actual',
                type: 'bytes32',
            },
        ],
        name: 'LZ_ComposeNotFound',
        type: 'error',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'address',
                name: 'from',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'address',
                name: 'to',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'bytes32',
                name: 'guid',
                type: 'bytes32',
            },
            {
                indexed: false,
                internalType: 'uint16',
                name: 'index',
                type: 'uint16',
            },
        ],
        name: 'ComposeDelivered',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: false,
                internalType: 'address',
                name: 'from',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'address',
                name: 'to',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'bytes32',
                name: 'guid',
                type: 'bytes32',
            },
            {
                indexed: false,
                internalType: 'uint16',
                name: 'index',
                type: 'uint16',
            },
            {
                indexed: false,
                internalType: 'bytes',
                name: 'message',
                type: 'bytes',
            },
        ],
        name: 'ComposeSent',
        type: 'event',
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: 'address',
                name: 'from',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'to',
                type: 'address',
            },
            {
                indexed: true,
                internalType: 'address',
                name: 'executor',
                type: 'address',
            },
            {
                indexed: false,
                internalType: 'bytes32',
                name: 'guid',
                type: 'bytes32',
            },
            {
                indexed: false,
                internalType: 'uint16',
                name: 'index',
                type: 'uint16',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'gas',
                type: 'uint256',
            },
            {
                indexed: false,
                internalType: 'uint256',
                name: 'value',
                type: 'uint256',
            },
            {
                indexed: false,
                internalType: 'bytes',
                name: 'message',
                type: 'bytes',
            },
            {
                indexed: false,
                internalType: 'bytes',
                name: 'extraData',
                type: 'bytes',
            },
            {
                indexed: false,
                internalType: 'bytes',
                name: 'reason',
                type: 'bytes',
            },
        ],
        name: 'LzComposeAlert',
        type: 'event',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: 'from',
                type: 'address',
            },
            {
                internalType: 'address',
                name: 'to',
                type: 'address',
            },
            {
                internalType: 'bytes32',
                name: 'guid',
                type: 'bytes32',
            },
            {
                internalType: 'uint16',
                name: 'index',
                type: 'uint16',
            },
        ],
        name: 'composeQueue',
        outputs: [
            {
                internalType: 'bytes32',
                name: 'messageHash',
                type: 'bytes32',
            },
        ],
        stateMutability: 'view',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_from',
                type: 'address',
            },
            {
                internalType: 'address',
                name: '_to',
                type: 'address',
            },
            {
                internalType: 'bytes32',
                name: '_guid',
                type: 'bytes32',
            },
            {
                internalType: 'uint16',
                name: '_index',
                type: 'uint16',
            },
            {
                internalType: 'bytes',
                name: '_message',
                type: 'bytes',
            },
            {
                internalType: 'bytes',
                name: '_extraData',
                type: 'bytes',
            },
        ],
        name: 'lzCompose',
        outputs: [],
        stateMutability: 'payable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_from',
                type: 'address',
            },
            {
                internalType: 'address',
                name: '_to',
                type: 'address',
            },
            {
                internalType: 'bytes32',
                name: '_guid',
                type: 'bytes32',
            },
            {
                internalType: 'uint16',
                name: '_index',
                type: 'uint16',
            },
            {
                internalType: 'uint256',
                name: '_gas',
                type: 'uint256',
            },
            {
                internalType: 'uint256',
                name: '_value',
                type: 'uint256',
            },
            {
                internalType: 'bytes',
                name: '_message',
                type: 'bytes',
            },
            {
                internalType: 'bytes',
                name: '_extraData',
                type: 'bytes',
            },
            {
                internalType: 'bytes',
                name: '_reason',
                type: 'bytes',
            },
        ],
        name: 'lzComposeAlert',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
    {
        inputs: [
            {
                internalType: 'address',
                name: '_to',
                type: 'address',
            },
            {
                internalType: 'bytes32',
                name: '_guid',
                type: 'bytes32',
            },
            {
                internalType: 'uint16',
                name: '_index',
                type: 'uint16',
            },
            {
                internalType: 'bytes',
                name: '_message',
                type: 'bytes',
            },
        ],
        name: 'sendCompose',
        outputs: [],
        stateMutability: 'nonpayable',
        type: 'function',
    },
] as const

export class MessagingComposer__factory {
    static readonly abi = _abi
    static createInterface(): MessagingComposerInterface {
        return new utils.Interface(_abi) as MessagingComposerInterface
    }
    static connect(address: string, signerOrProvider: Signer | Provider): MessagingComposer {
        return new Contract(address, _abi, signerOrProvider) as MessagingComposer
    }
}
