/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export interface TreasuryInterface extends utils.Interface {
    functions: {
        'getFee(address,uint32,uint256,bool)': FunctionFragment
        'lzTokenEnabled()': FunctionFragment
        'lzTokenFee()': FunctionFragment
        'nativeBP()': FunctionFragment
        'owner()': FunctionFragment
        'payFee(address,uint32,uint256,bool)': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'setLzTokenEnabled(bool)': FunctionFragment
        'setLzTokenFee(uint256)': FunctionFragment
        'setNativeFeeBP(uint256)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'withdrawLzToken(address,address,address,uint256)': FunctionFragment
        'withdrawNativeFee(address,address,uint256)': FunctionFragment
        'withdrawToken(address,address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'getFee'
            | 'lzTokenEnabled'
            | 'lzTokenFee'
            | 'nativeBP'
            | 'owner'
            | 'payFee'
            | 'renounceOwnership'
            | 'setLzTokenEnabled'
            | 'setLzTokenFee'
            | 'setNativeFeeBP'
            | 'transferOwnership'
            | 'withdrawLzToken'
            | 'withdrawNativeFee'
            | 'withdrawToken'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'getFee',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<boolean>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'lzTokenEnabled', values?: undefined): string
    encodeFunctionData(functionFragment: 'lzTokenFee', values?: undefined): string
    encodeFunctionData(functionFragment: 'nativeBP', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'payFee',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<boolean>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'setLzTokenEnabled', values: [PromiseOrValue<boolean>]): string
    encodeFunctionData(functionFragment: 'setLzTokenFee', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'setNativeFeeBP', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'withdrawLzToken',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawNativeFee',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawToken',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'getFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lzTokenEnabled', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lzTokenFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nativeBP', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'payFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setLzTokenEnabled', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setLzTokenFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setNativeFeeBP', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawLzToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawNativeFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawToken', data: BytesLike): Result

    events: {
        'OwnershipTransferred(address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface Treasury extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: TreasuryInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        getFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _totalFee: PromiseOrValue<BigNumberish>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        lzTokenEnabled(overrides?: CallOverrides): Promise<[boolean]>

        lzTokenFee(overrides?: CallOverrides): Promise<[BigNumber]>

        nativeBP(overrides?: CallOverrides): Promise<[BigNumber]>

        owner(overrides?: CallOverrides): Promise<[string]>

        payFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _totalFee: PromiseOrValue<BigNumberish>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        setLzTokenEnabled(
            _lzTokenEnabled: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setLzTokenFee(
            _lzTokenFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setNativeFeeBP(
            _nativeBP: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawLzToken(
            _messageLib: PromiseOrValue<string>,
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawNativeFee(
            _messageLib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    getFee(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        _totalFee: PromiseOrValue<BigNumberish>,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    lzTokenEnabled(overrides?: CallOverrides): Promise<boolean>

    lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>

    nativeBP(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    payFee(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        _totalFee: PromiseOrValue<BigNumberish>,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    setLzTokenEnabled(
        _lzTokenEnabled: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setLzTokenFee(
        _lzTokenFee: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setNativeFeeBP(
        _nativeBP: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawLzToken(
        _messageLib: PromiseOrValue<string>,
        _lzToken: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawNativeFee(
        _messageLib: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawToken(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        getFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _totalFee: PromiseOrValue<BigNumberish>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        lzTokenEnabled(overrides?: CallOverrides): Promise<boolean>

        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>

        nativeBP(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<string>

        payFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _totalFee: PromiseOrValue<BigNumberish>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        setLzTokenEnabled(_lzTokenEnabled: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>

        setLzTokenFee(_lzTokenFee: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

        setNativeFeeBP(_nativeBP: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        withdrawLzToken(
            _messageLib: PromiseOrValue<string>,
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        withdrawNativeFee(
            _messageLib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
    }

    estimateGas: {
        getFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _totalFee: PromiseOrValue<BigNumberish>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        lzTokenEnabled(overrides?: CallOverrides): Promise<BigNumber>

        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>

        nativeBP(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        payFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _totalFee: PromiseOrValue<BigNumberish>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        setLzTokenEnabled(
            _lzTokenEnabled: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setLzTokenFee(
            _lzTokenFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setNativeFeeBP(
            _nativeBP: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawLzToken(
            _messageLib: PromiseOrValue<string>,
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawNativeFee(
            _messageLib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        getFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _totalFee: PromiseOrValue<BigNumberish>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        lzTokenEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>

        lzTokenFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

        nativeBP(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        payFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _totalFee: PromiseOrValue<BigNumberish>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        setLzTokenEnabled(
            _lzTokenEnabled: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setLzTokenFee(
            _lzTokenFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setNativeFeeBP(
            _nativeBP: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawLzToken(
            _messageLib: PromiseOrValue<string>,
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawNativeFee(
            _messageLib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
