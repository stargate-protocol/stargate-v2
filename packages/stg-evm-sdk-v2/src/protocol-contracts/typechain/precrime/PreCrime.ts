/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type PreCrimePeerStruct = {
    eid: PromiseOrValue<BigNumberish>
    preCrime: PromiseOrValue<BytesLike>
    oApp: PromiseOrValue<BytesLike>
}

export type PreCrimePeerStructOutput = [number, string, string] & {
    eid: number
    preCrime: string
    oApp: string
}

export interface PreCrimeInterface extends utils.Interface {
    functions: {
        'buildSimulationResult()': FunctionFragment
        'getConfig(bytes[],uint256[])': FunctionFragment
        'getPreCrimePeers()': FunctionFragment
        'maxBatchSize()': FunctionFragment
        'oApp()': FunctionFragment
        'owner()': FunctionFragment
        'preCrime(bytes[],uint256[],bytes[])': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'setMaxBatchSize(uint64)': FunctionFragment
        'setPreCrimePeers((uint32,bytes32,bytes32)[])': FunctionFragment
        'simulate(bytes[],uint256[])': FunctionFragment
        'simulator()': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'version()': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'buildSimulationResult'
            | 'getConfig'
            | 'getPreCrimePeers'
            | 'maxBatchSize'
            | 'oApp'
            | 'owner'
            | 'preCrime'
            | 'renounceOwnership'
            | 'setMaxBatchSize'
            | 'setPreCrimePeers'
            | 'simulate'
            | 'simulator'
            | 'transferOwnership'
            | 'version'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'buildSimulationResult', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'getConfig',
        values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]
    ): string
    encodeFunctionData(functionFragment: 'getPreCrimePeers', values?: undefined): string
    encodeFunctionData(functionFragment: 'maxBatchSize', values?: undefined): string
    encodeFunctionData(functionFragment: 'oApp', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'preCrime',
        values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]]
    ): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'setMaxBatchSize', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'setPreCrimePeers', values: [PreCrimePeerStruct[]]): string
    encodeFunctionData(
        functionFragment: 'simulate',
        values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]
    ): string
    encodeFunctionData(functionFragment: 'simulator', values?: undefined): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'version', values?: undefined): string

    decodeFunctionResult(functionFragment: 'buildSimulationResult', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getPreCrimePeers', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'maxBatchSize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'oApp', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'preCrime', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setMaxBatchSize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setPreCrimePeers', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'simulate', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'simulator', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result

    events: {
        'OwnershipTransferred(address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PreCrime extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: PreCrimeInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        buildSimulationResult(overrides?: CallOverrides): Promise<[string]>

        getConfig(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        getPreCrimePeers(overrides?: CallOverrides): Promise<[PreCrimePeerStructOutput[]]>

        maxBatchSize(overrides?: CallOverrides): Promise<[BigNumber]>

        oApp(overrides?: CallOverrides): Promise<[string]>

        owner(overrides?: CallOverrides): Promise<[string]>

        preCrime(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            _simulations: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        setMaxBatchSize(
            _maxBatchSize: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setPreCrimePeers(
            _preCrimePeers: PreCrimePeerStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        simulate(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        simulator(overrides?: CallOverrides): Promise<[string]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        version(overrides?: CallOverrides): Promise<[BigNumber, number] & { major: BigNumber; minor: number }>
    }

    buildSimulationResult(overrides?: CallOverrides): Promise<string>

    getConfig(
        _packets: PromiseOrValue<BytesLike>[],
        _packetMsgValues: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getPreCrimePeers(overrides?: CallOverrides): Promise<PreCrimePeerStructOutput[]>

    maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>

    oApp(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    preCrime(
        _packets: PromiseOrValue<BytesLike>[],
        _packetMsgValues: PromiseOrValue<BigNumberish>[],
        _simulations: PromiseOrValue<BytesLike>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    setMaxBatchSize(
        _maxBatchSize: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPreCrimePeers(
        _preCrimePeers: PreCrimePeerStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    simulate(
        _packets: PromiseOrValue<BytesLike>[],
        _packetMsgValues: PromiseOrValue<BigNumberish>[],
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    simulator(overrides?: CallOverrides): Promise<string>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    version(overrides?: CallOverrides): Promise<[BigNumber, number] & { major: BigNumber; minor: number }>

    callStatic: {
        buildSimulationResult(overrides?: CallOverrides): Promise<string>

        getConfig(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<string>

        getPreCrimePeers(overrides?: CallOverrides): Promise<PreCrimePeerStructOutput[]>

        maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>

        oApp(overrides?: CallOverrides): Promise<string>

        owner(overrides?: CallOverrides): Promise<string>

        preCrime(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            _simulations: PromiseOrValue<BytesLike>[],
            overrides?: CallOverrides
        ): Promise<void>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        setMaxBatchSize(_maxBatchSize: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

        setPreCrimePeers(_preCrimePeers: PreCrimePeerStruct[], overrides?: CallOverrides): Promise<void>

        simulate(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<string>

        simulator(overrides?: CallOverrides): Promise<string>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        version(overrides?: CallOverrides): Promise<[BigNumber, number] & { major: BigNumber; minor: number }>
    }

    filters: {
        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
    }

    estimateGas: {
        buildSimulationResult(overrides?: CallOverrides): Promise<BigNumber>

        getConfig(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        getPreCrimePeers(overrides?: CallOverrides): Promise<BigNumber>

        maxBatchSize(overrides?: CallOverrides): Promise<BigNumber>

        oApp(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        preCrime(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            _simulations: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        setMaxBatchSize(
            _maxBatchSize: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setPreCrimePeers(
            _preCrimePeers: PreCrimePeerStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        simulate(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        simulator(overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        version(overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        buildSimulationResult(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getConfig(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        getPreCrimePeers(overrides?: CallOverrides): Promise<PopulatedTransaction>

        maxBatchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>

        oApp(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        preCrime(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            _simulations: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        setMaxBatchSize(
            _maxBatchSize: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setPreCrimePeers(
            _preCrimePeers: PreCrimePeerStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        simulate(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        simulator(overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
