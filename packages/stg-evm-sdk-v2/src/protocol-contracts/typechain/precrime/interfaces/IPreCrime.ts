/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export interface IPreCrimeInterface extends utils.Interface {
    functions: {
        'buildSimulationResult()': FunctionFragment
        'getConfig(bytes[],uint256[])': FunctionFragment
        'preCrime(bytes[],uint256[],bytes[])': FunctionFragment
        'simulate(bytes[],uint256[])': FunctionFragment
        'version()': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic: 'buildSimulationResult' | 'getConfig' | 'preCrime' | 'simulate' | 'version'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'buildSimulationResult', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'getConfig',
        values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]
    ): string
    encodeFunctionData(
        functionFragment: 'preCrime',
        values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[], PromiseOrValue<BytesLike>[]]
    ): string
    encodeFunctionData(
        functionFragment: 'simulate',
        values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]
    ): string
    encodeFunctionData(functionFragment: 'version', values?: undefined): string

    decodeFunctionResult(functionFragment: 'buildSimulationResult', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'preCrime', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'simulate', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result

    events: {}
}

export interface IPreCrime extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IPreCrimeInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        buildSimulationResult(overrides?: CallOverrides): Promise<[string]>

        getConfig(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        preCrime(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            _simulations: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        simulate(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        version(overrides?: CallOverrides): Promise<[BigNumber, number] & { major: BigNumber; minor: number }>
    }

    buildSimulationResult(overrides?: CallOverrides): Promise<string>

    getConfig(
        _packets: PromiseOrValue<BytesLike>[],
        _packetMsgValues: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    preCrime(
        _packets: PromiseOrValue<BytesLike>[],
        _packetMsgValues: PromiseOrValue<BigNumberish>[],
        _simulations: PromiseOrValue<BytesLike>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    simulate(
        _packets: PromiseOrValue<BytesLike>[],
        _packetMsgValues: PromiseOrValue<BigNumberish>[],
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    version(overrides?: CallOverrides): Promise<[BigNumber, number] & { major: BigNumber; minor: number }>

    callStatic: {
        buildSimulationResult(overrides?: CallOverrides): Promise<string>

        getConfig(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<string>

        preCrime(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            _simulations: PromiseOrValue<BytesLike>[],
            overrides?: CallOverrides
        ): Promise<void>

        simulate(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<string>

        version(overrides?: CallOverrides): Promise<[BigNumber, number] & { major: BigNumber; minor: number }>
    }

    filters: {}

    estimateGas: {
        buildSimulationResult(overrides?: CallOverrides): Promise<BigNumber>

        getConfig(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        preCrime(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            _simulations: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        simulate(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        version(overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        buildSimulationResult(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getConfig(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        preCrime(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            _simulations: PromiseOrValue<BytesLike>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        simulate(
            _packets: PromiseOrValue<BytesLike>[],
            _packetMsgValues: PromiseOrValue<BigNumberish>[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
