/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export type ExecutorConfigStruct = {
    maxMessageSize: PromiseOrValue<BigNumberish>
    executor: PromiseOrValue<string>
}

export type ExecutorConfigStructOutput = [number, string] & {
    maxMessageSize: number
    executor: string
}

export type SetDefaultExecutorConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>
    config: ExecutorConfigStruct
}

export type SetDefaultExecutorConfigParamStructOutput = [number, ExecutorConfigStructOutput] & {
    eid: number
    config: ExecutorConfigStructOutput
}

export type UlnConfigStruct = {
    confirmations: PromiseOrValue<BigNumberish>
    requiredDVNCount: PromiseOrValue<BigNumberish>
    optionalDVNCount: PromiseOrValue<BigNumberish>
    optionalDVNThreshold: PromiseOrValue<BigNumberish>
    requiredDVNs: PromiseOrValue<string>[]
    optionalDVNs: PromiseOrValue<string>[]
}

export type UlnConfigStructOutput = [BigNumber, number, number, number, string[], string[]] & {
    confirmations: BigNumber
    requiredDVNCount: number
    optionalDVNCount: number
    optionalDVNThreshold: number
    requiredDVNs: string[]
    optionalDVNs: string[]
}

export type SetDefaultUlnConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>
    config: UlnConfigStruct
}

export type SetDefaultUlnConfigParamStructOutput = [number, UlnConfigStructOutput] & {
    eid: number
    config: UlnConfigStructOutput
}

export type PacketStruct = {
    nonce: PromiseOrValue<BigNumberish>
    srcEid: PromiseOrValue<BigNumberish>
    sender: PromiseOrValue<string>
    dstEid: PromiseOrValue<BigNumberish>
    receiver: PromiseOrValue<BytesLike>
    guid: PromiseOrValue<BytesLike>
    message: PromiseOrValue<BytesLike>
}

export type PacketStructOutput = [BigNumber, number, string, number, string, string, string] & {
    nonce: BigNumber
    srcEid: number
    sender: string
    dstEid: number
    receiver: string
    guid: string
    message: string
}

export type MessagingFeeStruct = {
    nativeFee: PromiseOrValue<BigNumberish>
    lzTokenFee: PromiseOrValue<BigNumberish>
}

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
    nativeFee: BigNumber
    lzTokenFee: BigNumber
}

export type SetConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>
    configType: PromiseOrValue<BigNumberish>
    config: PromiseOrValue<BytesLike>
}

export type SetConfigParamStructOutput = [number, number, string] & {
    eid: number
    configType: number
    config: string
}

export interface SendUln302Interface extends utils.Interface {
    functions: {
        'executorConfigs(address,uint32)': FunctionFragment
        'fees(address)': FunctionFragment
        'getAppUlnConfig(address,uint32)': FunctionFragment
        'getConfig(uint32,address,uint32)': FunctionFragment
        'getExecutorConfig(address,uint32)': FunctionFragment
        'getUlnConfig(address,uint32)': FunctionFragment
        'isSupportedEid(uint32)': FunctionFragment
        'messageLibType()': FunctionFragment
        'owner()': FunctionFragment
        'quote((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)': FunctionFragment
        'setConfig(address,(uint32,uint32,bytes)[])': FunctionFragment
        'setDefaultExecutorConfigs((uint32,(uint32,address))[])': FunctionFragment
        'setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])': FunctionFragment
        'setTreasury(address)': FunctionFragment
        'setTreasuryNativeFeeCap(uint256)': FunctionFragment
        'supportsInterface(bytes4)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'treasury()': FunctionFragment
        'version()': FunctionFragment
        'withdrawFee(address,uint256)': FunctionFragment
        'withdrawLzTokenFee(address,address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'executorConfigs'
            | 'fees'
            | 'getAppUlnConfig'
            | 'getConfig'
            | 'getExecutorConfig'
            | 'getUlnConfig'
            | 'isSupportedEid'
            | 'messageLibType'
            | 'owner'
            | 'quote'
            | 'renounceOwnership'
            | 'send'
            | 'setConfig'
            | 'setDefaultExecutorConfigs'
            | 'setDefaultUlnConfigs'
            | 'setTreasury'
            | 'setTreasuryNativeFeeCap'
            | 'supportsInterface'
            | 'transferOwnership'
            | 'treasury'
            | 'version'
            | 'withdrawFee'
            | 'withdrawLzTokenFee'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'executorConfigs',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'fees', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'getAppUlnConfig',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getConfig',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getExecutorConfig',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getUlnConfig',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'isSupportedEid', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'messageLibType', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'quote',
        values: [PacketStruct, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'send',
        values: [PacketStruct, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(functionFragment: 'setConfig', values: [PromiseOrValue<string>, SetConfigParamStruct[]]): string
    encodeFunctionData(
        functionFragment: 'setDefaultExecutorConfigs',
        values: [SetDefaultExecutorConfigParamStruct[]]
    ): string
    encodeFunctionData(functionFragment: 'setDefaultUlnConfigs', values: [SetDefaultUlnConfigParamStruct[]]): string
    encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'setTreasuryNativeFeeCap', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'treasury', values?: undefined): string
    encodeFunctionData(functionFragment: 'version', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'withdrawFee',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawLzTokenFee',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'executorConfigs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'fees', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getAppUlnConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getExecutorConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getUlnConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isSupportedEid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'messageLibType', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultExecutorConfigs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultUlnConfigs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setTreasuryNativeFeeCap', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawLzTokenFee', data: BytesLike): Result

    events: {
        'DVNFeePaid(address[],address[],uint256[])': EventFragment
        'DefaultExecutorConfigsSet(tuple[])': EventFragment
        'DefaultUlnConfigsSet(tuple[])': EventFragment
        'ExecutorConfigSet(address,uint32,tuple)': EventFragment
        'ExecutorFeePaid(address,uint256)': EventFragment
        'LzTokenFeeWithdrawn(address,address,uint256)': EventFragment
        'NativeFeeWithdrawn(address,address,uint256)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'TreasuryNativeFeeCapSet(uint256)': EventFragment
        'TreasurySet(address)': EventFragment
        'UlnConfigSet(address,uint32,tuple)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'DVNFeePaid'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DefaultExecutorConfigsSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DefaultUlnConfigsSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ExecutorConfigSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ExecutorFeePaid'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LzTokenFeeWithdrawn'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NativeFeeWithdrawn'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TreasuryNativeFeeCapSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TreasurySet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UlnConfigSet'): EventFragment
}

export interface DVNFeePaidEventObject {
    requiredDVNs: string[]
    optionalDVNs: string[]
    fees: BigNumber[]
}
export type DVNFeePaidEvent = TypedEvent<[string[], string[], BigNumber[]], DVNFeePaidEventObject>

export type DVNFeePaidEventFilter = TypedEventFilter<DVNFeePaidEvent>

export interface DefaultExecutorConfigsSetEventObject {
    params: SetDefaultExecutorConfigParamStructOutput[]
}
export type DefaultExecutorConfigsSetEvent = TypedEvent<
    [SetDefaultExecutorConfigParamStructOutput[]],
    DefaultExecutorConfigsSetEventObject
>

export type DefaultExecutorConfigsSetEventFilter = TypedEventFilter<DefaultExecutorConfigsSetEvent>

export interface DefaultUlnConfigsSetEventObject {
    params: SetDefaultUlnConfigParamStructOutput[]
}
export type DefaultUlnConfigsSetEvent = TypedEvent<
    [SetDefaultUlnConfigParamStructOutput[]],
    DefaultUlnConfigsSetEventObject
>

export type DefaultUlnConfigsSetEventFilter = TypedEventFilter<DefaultUlnConfigsSetEvent>

export interface ExecutorConfigSetEventObject {
    oapp: string
    eid: number
    config: ExecutorConfigStructOutput
}
export type ExecutorConfigSetEvent = TypedEvent<
    [string, number, ExecutorConfigStructOutput],
    ExecutorConfigSetEventObject
>

export type ExecutorConfigSetEventFilter = TypedEventFilter<ExecutorConfigSetEvent>

export interface ExecutorFeePaidEventObject {
    executor: string
    fee: BigNumber
}
export type ExecutorFeePaidEvent = TypedEvent<[string, BigNumber], ExecutorFeePaidEventObject>

export type ExecutorFeePaidEventFilter = TypedEventFilter<ExecutorFeePaidEvent>

export interface LzTokenFeeWithdrawnEventObject {
    lzToken: string
    receiver: string
    amount: BigNumber
}
export type LzTokenFeeWithdrawnEvent = TypedEvent<[string, string, BigNumber], LzTokenFeeWithdrawnEventObject>

export type LzTokenFeeWithdrawnEventFilter = TypedEventFilter<LzTokenFeeWithdrawnEvent>

export interface NativeFeeWithdrawnEventObject {
    worker: string
    receiver: string
    amount: BigNumber
}
export type NativeFeeWithdrawnEvent = TypedEvent<[string, string, BigNumber], NativeFeeWithdrawnEventObject>

export type NativeFeeWithdrawnEventFilter = TypedEventFilter<NativeFeeWithdrawnEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface TreasuryNativeFeeCapSetEventObject {
    newTreasuryNativeFeeCap: BigNumber
}
export type TreasuryNativeFeeCapSetEvent = TypedEvent<[BigNumber], TreasuryNativeFeeCapSetEventObject>

export type TreasuryNativeFeeCapSetEventFilter = TypedEventFilter<TreasuryNativeFeeCapSetEvent>

export interface TreasurySetEventObject {
    treasury: string
}
export type TreasurySetEvent = TypedEvent<[string], TreasurySetEventObject>

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>

export interface UlnConfigSetEventObject {
    oapp: string
    eid: number
    config: UlnConfigStructOutput
}
export type UlnConfigSetEvent = TypedEvent<[string, number, UlnConfigStructOutput], UlnConfigSetEventObject>

export type UlnConfigSetEventFilter = TypedEventFilter<UlnConfigSetEvent>

export interface SendUln302 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: SendUln302Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        executorConfigs(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[number, string] & { maxMessageSize: number; executor: string }>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

        getAppUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[UlnConfigStructOutput]>

        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>

        getExecutorConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[ExecutorConfigStructOutput] & { rtnConfig: ExecutorConfigStructOutput }>

        getUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[UlnConfigStructOutput] & { rtnConfig: UlnConfigStructOutput }>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>

        messageLibType(overrides?: CallOverrides): Promise<[number]>

        owner(overrides?: CallOverrides): Promise<[string]>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput]>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDefaultExecutorConfigs(
            _params: SetDefaultExecutorConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDefaultUlnConfigs(
            _params: SetDefaultUlnConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        treasury(overrides?: CallOverrides): Promise<[string]>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    executorConfigs(
        oapp: PromiseOrValue<string>,
        eid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<[number, string] & { maxMessageSize: number; executor: string }>

    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    getAppUlnConfig(
        _oapp: PromiseOrValue<string>,
        _remoteEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<UlnConfigStructOutput>

    getConfig(
        _eid: PromiseOrValue<BigNumberish>,
        _oapp: PromiseOrValue<string>,
        _configType: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>

    getExecutorConfig(
        _oapp: PromiseOrValue<string>,
        _remoteEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<ExecutorConfigStructOutput>

    getUlnConfig(
        _oapp: PromiseOrValue<string>,
        _remoteEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<UlnConfigStructOutput>

    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

    messageLibType(overrides?: CallOverrides): Promise<number>

    owner(overrides?: CallOverrides): Promise<string>

    quote(
        _packet: PacketStruct,
        _options: PromiseOrValue<BytesLike>,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    send(
        _packet: PacketStruct,
        _options: PromiseOrValue<BytesLike>,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setConfig(
        _oapp: PromiseOrValue<string>,
        _params: SetConfigParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDefaultExecutorConfigs(
        _params: SetDefaultExecutorConfigParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDefaultUlnConfigs(
        _params: SetDefaultUlnConfigParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTreasury(
        _treasury: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTreasuryNativeFeeCap(
        _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    treasury(overrides?: CallOverrides): Promise<string>

    version(overrides?: CallOverrides): Promise<
        [BigNumber, number, number] & {
            major: BigNumber
            minor: number
            endpointVersion: number
        }
    >

    withdrawFee(
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawLzTokenFee(
        _lzToken: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        executorConfigs(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[number, string] & { maxMessageSize: number; executor: string }>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        getAppUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<UlnConfigStructOutput>

        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>

        getExecutorConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<ExecutorConfigStructOutput>

        getUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<UlnConfigStructOutput>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

        messageLibType(overrides?: CallOverrides): Promise<number>

        owner(overrides?: CallOverrides): Promise<string>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<MessagingFeeStructOutput>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput, string]>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: CallOverrides
        ): Promise<void>

        setDefaultExecutorConfigs(
            _params: SetDefaultExecutorConfigParamStruct[],
            overrides?: CallOverrides
        ): Promise<void>

        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct[], overrides?: CallOverrides): Promise<void>

        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        treasury(overrides?: CallOverrides): Promise<string>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'DVNFeePaid(address[],address[],uint256[])'(
            requiredDVNs?: null,
            optionalDVNs?: null,
            fees?: null
        ): DVNFeePaidEventFilter
        DVNFeePaid(requiredDVNs?: null, optionalDVNs?: null, fees?: null): DVNFeePaidEventFilter

        'DefaultExecutorConfigsSet(tuple[])'(params?: null): DefaultExecutorConfigsSetEventFilter
        DefaultExecutorConfigsSet(params?: null): DefaultExecutorConfigsSetEventFilter

        'DefaultUlnConfigsSet(tuple[])'(params?: null): DefaultUlnConfigsSetEventFilter
        DefaultUlnConfigsSet(params?: null): DefaultUlnConfigsSetEventFilter

        'ExecutorConfigSet(address,uint32,tuple)'(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter
        ExecutorConfigSet(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter

        'ExecutorFeePaid(address,uint256)'(executor?: null, fee?: null): ExecutorFeePaidEventFilter
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter

        'LzTokenFeeWithdrawn(address,address,uint256)'(
            lzToken?: null,
            receiver?: null,
            amount?: null
        ): LzTokenFeeWithdrawnEventFilter
        LzTokenFeeWithdrawn(lzToken?: null, receiver?: null, amount?: null): LzTokenFeeWithdrawnEventFilter

        'NativeFeeWithdrawn(address,address,uint256)'(
            worker?: null,
            receiver?: null,
            amount?: null
        ): NativeFeeWithdrawnEventFilter
        NativeFeeWithdrawn(worker?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'TreasuryNativeFeeCapSet(uint256)'(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter
        TreasuryNativeFeeCapSet(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter

        'TreasurySet(address)'(treasury?: null): TreasurySetEventFilter
        TreasurySet(treasury?: null): TreasurySetEventFilter

        'UlnConfigSet(address,uint32,tuple)'(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter
        UlnConfigSet(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter
    }

    estimateGas: {
        executorConfigs(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        getAppUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getExecutorConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        messageLibType(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDefaultExecutorConfigs(
            _params: SetDefaultExecutorConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDefaultUlnConfigs(
            _params: SetDefaultUlnConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        treasury(overrides?: CallOverrides): Promise<BigNumber>

        version(overrides?: CallOverrides): Promise<BigNumber>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        executorConfigs(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        getAppUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getExecutorConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDefaultExecutorConfigs(
            _params: SetDefaultExecutorConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDefaultUlnConfigs(
            _params: SetDefaultUlnConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        supportsInterface(
            _interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
