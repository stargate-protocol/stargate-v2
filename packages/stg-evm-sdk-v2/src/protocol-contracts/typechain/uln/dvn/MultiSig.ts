/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export interface MultiSigInterface extends utils.Interface {
    functions: {
        'getSigners()': FunctionFragment
        'isSigner(address)': FunctionFragment
        'quorum()': FunctionFragment
        'signerSize()': FunctionFragment
        'signers(address)': FunctionFragment
        'verifySignatures(bytes32,bytes)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic: 'getSigners' | 'isSigner' | 'quorum' | 'signerSize' | 'signers' | 'verifySignatures'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'getSigners', values?: undefined): string
    encodeFunctionData(functionFragment: 'isSigner', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'quorum', values?: undefined): string
    encodeFunctionData(functionFragment: 'signerSize', values?: undefined): string
    encodeFunctionData(functionFragment: 'signers', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'verifySignatures',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ): string

    decodeFunctionResult(functionFragment: 'getSigners', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isSigner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quorum', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'signerSize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'signers', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'verifySignatures', data: BytesLike): Result

    events: {
        'UpdateQuorum(uint64)': EventFragment
        'UpdateSigner(address,bool)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'UpdateQuorum'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UpdateSigner'): EventFragment
}

export interface UpdateQuorumEventObject {
    _quorum: BigNumber
}
export type UpdateQuorumEvent = TypedEvent<[BigNumber], UpdateQuorumEventObject>

export type UpdateQuorumEventFilter = TypedEventFilter<UpdateQuorumEvent>

export interface UpdateSignerEventObject {
    _signer: string
    _active: boolean
}
export type UpdateSignerEvent = TypedEvent<[string, boolean], UpdateSignerEventObject>

export type UpdateSignerEventFilter = TypedEventFilter<UpdateSignerEvent>

export interface MultiSig extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: MultiSigInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        getSigners(overrides?: CallOverrides): Promise<[string[]]>

        isSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

        quorum(overrides?: CallOverrides): Promise<[BigNumber]>

        signerSize(overrides?: CallOverrides): Promise<[BigNumber]>

        signers(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

        verifySignatures(
            _hash: PromiseOrValue<BytesLike>,
            _signatures: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[boolean, number]>
    }

    getSigners(overrides?: CallOverrides): Promise<string[]>

    isSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    quorum(overrides?: CallOverrides): Promise<BigNumber>

    signerSize(overrides?: CallOverrides): Promise<BigNumber>

    signers(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    verifySignatures(
        _hash: PromiseOrValue<BytesLike>,
        _signatures: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<[boolean, number]>

    callStatic: {
        getSigners(overrides?: CallOverrides): Promise<string[]>

        isSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        quorum(overrides?: CallOverrides): Promise<BigNumber>

        signerSize(overrides?: CallOverrides): Promise<BigNumber>

        signers(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        verifySignatures(
            _hash: PromiseOrValue<BytesLike>,
            _signatures: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[boolean, number]>
    }

    filters: {
        'UpdateQuorum(uint64)'(_quorum?: null): UpdateQuorumEventFilter
        UpdateQuorum(_quorum?: null): UpdateQuorumEventFilter

        'UpdateSigner(address,bool)'(_signer?: null, _active?: null): UpdateSignerEventFilter
        UpdateSigner(_signer?: null, _active?: null): UpdateSignerEventFilter
    }

    estimateGas: {
        getSigners(overrides?: CallOverrides): Promise<BigNumber>

        isSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        quorum(overrides?: CallOverrides): Promise<BigNumber>

        signerSize(overrides?: CallOverrides): Promise<BigNumber>

        signers(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        verifySignatures(
            _hash: PromiseOrValue<BytesLike>,
            _signatures: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>
    }

    populateTransaction: {
        getSigners(overrides?: CallOverrides): Promise<PopulatedTransaction>

        isSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>

        signerSize(overrides?: CallOverrides): Promise<PopulatedTransaction>

        signers(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        verifySignatures(
            _hash: PromiseOrValue<BytesLike>,
            _signatures: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>
    }
}
