/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export declare namespace IDVNFeeLib {
    export type FeeParamsStruct = {
        priceFeed: PromiseOrValue<string>
        dstEid: PromiseOrValue<BigNumberish>
        confirmations: PromiseOrValue<BigNumberish>
        sender: PromiseOrValue<string>
        quorum: PromiseOrValue<BigNumberish>
        defaultMultiplierBps: PromiseOrValue<BigNumberish>
    }

    export type FeeParamsStructOutput = [string, number, BigNumber, string, BigNumber, number] & {
        priceFeed: string
        dstEid: number
        confirmations: BigNumber
        sender: string
        quorum: BigNumber
        defaultMultiplierBps: number
    }

    export type FeeParamsForReadStruct = {
        priceFeed: PromiseOrValue<string>
        sender: PromiseOrValue<string>
        quorum: PromiseOrValue<BigNumberish>
        defaultMultiplierBps: PromiseOrValue<BigNumberish>
    }

    export type FeeParamsForReadStructOutput = [string, string, BigNumber, number] & {
        priceFeed: string
        sender: string
        quorum: BigNumber
        defaultMultiplierBps: number
    }
}

export declare namespace IDVN {
    export type DstConfigStruct = {
        gas: PromiseOrValue<BigNumberish>
        multiplierBps: PromiseOrValue<BigNumberish>
        floorMarginUSD: PromiseOrValue<BigNumberish>
    }

    export type DstConfigStructOutput = [BigNumber, number, BigNumber] & {
        gas: BigNumber
        multiplierBps: number
        floorMarginUSD: BigNumber
    }
}

export declare namespace DVNFeeLib {
    export type BlockTimeConfigStruct = {
        avgBlockTime: PromiseOrValue<BigNumberish>
        blockNum: PromiseOrValue<BigNumberish>
        timestamp: PromiseOrValue<BigNumberish>
        maxPastRetention: PromiseOrValue<BigNumberish>
        maxFutureRetention: PromiseOrValue<BigNumberish>
    }

    export type BlockTimeConfigStructOutput = [number, BigNumber, BigNumber, number, number] & {
        avgBlockTime: number
        blockNum: BigNumber
        timestamp: BigNumber
        maxPastRetention: number
        maxFutureRetention: number
    }

    export type SetSupportedCmdTypesParamStruct = {
        targetEid: PromiseOrValue<BigNumberish>
        types: PromiseOrValue<BigNumberish>
    }

    export type SetSupportedCmdTypesParamStructOutput = [number, BigNumber] & {
        targetEid: number
        types: BigNumber
    }
}

export interface DVNFeeLibInterface extends utils.Interface {
    functions: {
        'dstBlockTimeConfigs(uint32)': FunctionFragment
        'getCmdFees()': FunctionFragment
        'getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)': FunctionFragment
        'getFee((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)': FunctionFragment
        'getFeeOnSend((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)': FunctionFragment
        'getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)': FunctionFragment
        'getSupportedCmdTypes(uint32)': FunctionFragment
        'owner()': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'setCmdFees(uint120,uint120,uint16)': FunctionFragment
        'setDstBlockTimeConfigs(uint32[],(uint32,uint64,uint64,uint32,uint32)[])': FunctionFragment
        'setSupportedCmdTypes((uint32,uint256)[])': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'version()': FunctionFragment
        'withdrawToken(address,address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'dstBlockTimeConfigs'
            | 'getCmdFees'
            | 'getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'
            | 'getFee((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'
            | 'getFeeOnSend((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'
            | 'getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'
            | 'getSupportedCmdTypes'
            | 'owner'
            | 'renounceOwnership'
            | 'setCmdFees'
            | 'setDstBlockTimeConfigs'
            | 'setSupportedCmdTypes'
            | 'transferOwnership'
            | 'version'
            | 'withdrawToken'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'dstBlockTimeConfigs', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'getCmdFees', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)',
        values: [IDVNFeeLib.FeeParamsStruct, IDVN.DstConfigStruct, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'getFee((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)',
        values: [
            IDVNFeeLib.FeeParamsForReadStruct,
            IDVN.DstConfigStruct,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getFeeOnSend((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)',
        values: [
            IDVNFeeLib.FeeParamsForReadStruct,
            IDVN.DstConfigStruct,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)',
        values: [IDVNFeeLib.FeeParamsStruct, IDVN.DstConfigStruct, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(functionFragment: 'getSupportedCmdTypes', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'setCmdFees',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'setDstBlockTimeConfigs',
        values: [PromiseOrValue<BigNumberish>[], DVNFeeLib.BlockTimeConfigStruct[]]
    ): string
    encodeFunctionData(
        functionFragment: 'setSupportedCmdTypes',
        values: [DVNFeeLib.SetSupportedCmdTypesParamStruct[]]
    ): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'version', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'withdrawToken',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'dstBlockTimeConfigs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getCmdFees', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getFee((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getFeeOnSend((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)',
        data: BytesLike
    ): Result
    decodeFunctionResult(
        functionFragment: 'getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'getSupportedCmdTypes', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setCmdFees', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDstBlockTimeConfigs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setSupportedCmdTypes', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawToken', data: BytesLike): Result

    events: {
        'OwnershipTransferred(address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface DVNFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: DVNFeeLibInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        dstBlockTimeConfigs(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [number, BigNumber, BigNumber, number, number] & {
                avgBlockTime: number
                blockNum: BigNumber
                timestamp: BigNumber
                maxPastRetention: number
                maxFutureRetention: number
            }
        >

        getCmdFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, number]>

        'getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'(
            _params: IDVNFeeLib.FeeParamsStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        'getFee((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'(
            _params: IDVNFeeLib.FeeParamsForReadStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        'getFeeOnSend((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'(
            _params: IDVNFeeLib.FeeParamsForReadStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        'getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'(
            _params: IDVNFeeLib.FeeParamsStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        getSupportedCmdTypes(_targetEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[BigNumber]>

        owner(overrides?: CallOverrides): Promise<[string]>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        setCmdFees(
            _evmCallRequestV1FeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1ReduceFeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1MapBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDstBlockTimeConfigs(
            dstEids: PromiseOrValue<BigNumberish>[],
            _blockConfigs: DVNFeeLib.BlockTimeConfigStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setSupportedCmdTypes(
            _params: DVNFeeLib.SetSupportedCmdTypesParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        version(overrides?: CallOverrides): Promise<[BigNumber, number] & { major: BigNumber; minor: number }>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    dstBlockTimeConfigs(
        dstEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<
        [number, BigNumber, BigNumber, number, number] & {
            avgBlockTime: number
            blockNum: BigNumber
            timestamp: BigNumber
            maxPastRetention: number
            maxFutureRetention: number
        }
    >

    getCmdFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, number]>

    'getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'(
        _params: IDVNFeeLib.FeeParamsStruct,
        _dstConfig: IDVN.DstConfigStruct,
        _options: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    'getFee((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'(
        _params: IDVNFeeLib.FeeParamsForReadStruct,
        _dstConfig: IDVN.DstConfigStruct,
        _cmd: PromiseOrValue<BytesLike>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    'getFeeOnSend((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'(
        _params: IDVNFeeLib.FeeParamsForReadStruct,
        _dstConfig: IDVN.DstConfigStruct,
        _cmd: PromiseOrValue<BytesLike>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'(
        _params: IDVNFeeLib.FeeParamsStruct,
        _dstConfig: IDVN.DstConfigStruct,
        _options: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getSupportedCmdTypes(_targetEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    setCmdFees(
        _evmCallRequestV1FeeUSD: PromiseOrValue<BigNumberish>,
        _evmCallComputeV1ReduceFeeUSD: PromiseOrValue<BigNumberish>,
        _evmCallComputeV1MapBps: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDstBlockTimeConfigs(
        dstEids: PromiseOrValue<BigNumberish>[],
        _blockConfigs: DVNFeeLib.BlockTimeConfigStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setSupportedCmdTypes(
        _params: DVNFeeLib.SetSupportedCmdTypesParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    version(overrides?: CallOverrides): Promise<[BigNumber, number] & { major: BigNumber; minor: number }>

    withdrawToken(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        dstBlockTimeConfigs(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [number, BigNumber, BigNumber, number, number] & {
                avgBlockTime: number
                blockNum: BigNumber
                timestamp: BigNumber
                maxPastRetention: number
                maxFutureRetention: number
            }
        >

        getCmdFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, number]>

        'getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'(
            _params: IDVNFeeLib.FeeParamsStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'(
            _params: IDVNFeeLib.FeeParamsForReadStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFeeOnSend((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'(
            _params: IDVNFeeLib.FeeParamsForReadStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'(
            _params: IDVNFeeLib.FeeParamsStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getSupportedCmdTypes(_targetEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<string>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        setCmdFees(
            _evmCallRequestV1FeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1ReduceFeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1MapBps: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        setDstBlockTimeConfigs(
            dstEids: PromiseOrValue<BigNumberish>[],
            _blockConfigs: DVNFeeLib.BlockTimeConfigStruct[],
            overrides?: CallOverrides
        ): Promise<void>

        setSupportedCmdTypes(
            _params: DVNFeeLib.SetSupportedCmdTypesParamStruct[],
            overrides?: CallOverrides
        ): Promise<void>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        version(overrides?: CallOverrides): Promise<[BigNumber, number] & { major: BigNumber; minor: number }>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
    }

    estimateGas: {
        dstBlockTimeConfigs(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        getCmdFees(overrides?: CallOverrides): Promise<BigNumber>

        'getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'(
            _params: IDVNFeeLib.FeeParamsStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'(
            _params: IDVNFeeLib.FeeParamsForReadStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFeeOnSend((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'(
            _params: IDVNFeeLib.FeeParamsForReadStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        'getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'(
            _params: IDVNFeeLib.FeeParamsStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        getSupportedCmdTypes(_targetEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        setCmdFees(
            _evmCallRequestV1FeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1ReduceFeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1MapBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDstBlockTimeConfigs(
            dstEids: PromiseOrValue<BigNumberish>[],
            _blockConfigs: DVNFeeLib.BlockTimeConfigStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setSupportedCmdTypes(
            _params: DVNFeeLib.SetSupportedCmdTypesParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        version(overrides?: CallOverrides): Promise<BigNumber>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        dstBlockTimeConfigs(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getCmdFees(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'getFee((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'(
            _params: IDVNFeeLib.FeeParamsStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getFee((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'(
            _params: IDVNFeeLib.FeeParamsForReadStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getFeeOnSend((address,address,uint64,uint16),(uint64,uint16,uint128),bytes,bytes)'(
            _params: IDVNFeeLib.FeeParamsForReadStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        'getFeeOnSend((address,uint32,uint64,address,uint64,uint16),(uint64,uint16,uint128),bytes)'(
            _params: IDVNFeeLib.FeeParamsStruct,
            _dstConfig: IDVN.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        getSupportedCmdTypes(
            _targetEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        setCmdFees(
            _evmCallRequestV1FeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1ReduceFeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1MapBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDstBlockTimeConfigs(
            dstEids: PromiseOrValue<BigNumberish>[],
            _blockConfigs: DVNFeeLib.BlockTimeConfigStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setSupportedCmdTypes(
            _params: DVNFeeLib.SetSupportedCmdTypesParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
