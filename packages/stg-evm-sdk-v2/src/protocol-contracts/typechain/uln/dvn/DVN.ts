/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export type ExecuteParamStruct = {
    vid: PromiseOrValue<BigNumberish>
    target: PromiseOrValue<string>
    callData: PromiseOrValue<BytesLike>
    expiration: PromiseOrValue<BigNumberish>
    signatures: PromiseOrValue<BytesLike>
}

export type ExecuteParamStructOutput = [number, string, string, BigNumber, string] & {
    vid: number
    target: string
    callData: string
    expiration: BigNumber
    signatures: string
}

export declare namespace IDVN {
    export type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        gas: PromiseOrValue<BigNumberish>
        multiplierBps: PromiseOrValue<BigNumberish>
        floorMarginUSD: PromiseOrValue<BigNumberish>
    }

    export type DstConfigParamStructOutput = [number, BigNumber, number, BigNumber] & {
        dstEid: number
        gas: BigNumber
        multiplierBps: number
        floorMarginUSD: BigNumber
    }
}

export declare namespace ILayerZeroDVN {
    export type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        packetHeader: PromiseOrValue<BytesLike>
        payloadHash: PromiseOrValue<BytesLike>
        confirmations: PromiseOrValue<BigNumberish>
        sender: PromiseOrValue<string>
    }

    export type AssignJobParamStructOutput = [number, string, string, BigNumber, string] & {
        dstEid: number
        packetHeader: string
        payloadHash: string
        confirmations: BigNumber
        sender: string
    }
}

export interface DVNInterface extends utils.Interface {
    functions: {
        'DEFAULT_ADMIN_ROLE()': FunctionFragment
        'allowlistSize()': FunctionFragment
        'assignJob((uint32,bytes,bytes32,uint64,address),bytes)': FunctionFragment
        'assignJob(uint16,uint16,uint64,address)': FunctionFragment
        'assignJob(address,bytes,bytes,bytes)': FunctionFragment
        'defaultMultiplierBps()': FunctionFragment
        'dstConfig(uint32)': FunctionFragment
        'execute((uint32,address,bytes,uint256,bytes)[])': FunctionFragment
        'getFee(uint32,uint64,address,bytes)': FunctionFragment
        'getFee(uint16,uint16,uint64,address)': FunctionFragment
        'getFee(address,bytes,bytes,bytes)': FunctionFragment
        'getRoleAdmin(bytes32)': FunctionFragment
        'getSigners()': FunctionFragment
        'getSupportedOptionTypes(uint32)': FunctionFragment
        'grantRole(bytes32,address)': FunctionFragment
        'hasAcl(address)': FunctionFragment
        'hasRole(bytes32,address)': FunctionFragment
        'hashCallData(uint32,address,bytes,uint256)': FunctionFragment
        'isSigner(address)': FunctionFragment
        'localEidV2()': FunctionFragment
        'paused()': FunctionFragment
        'priceFeed()': FunctionFragment
        'quorum()': FunctionFragment
        'quorumChangeAdmin((uint32,address,bytes,uint256,bytes))': FunctionFragment
        'renounceRole(bytes32,address)': FunctionFragment
        'revokeRole(bytes32,address)': FunctionFragment
        'setDefaultMultiplierBps(uint16)': FunctionFragment
        'setDstConfig((uint32,uint64,uint16,uint128)[])': FunctionFragment
        'setPaused(bool)': FunctionFragment
        'setPriceFeed(address)': FunctionFragment
        'setQuorum(uint64)': FunctionFragment
        'setSigner(address,bool)': FunctionFragment
        'setSupportedOptionTypes(uint32,uint8[])': FunctionFragment
        'setWorkerFeeLib(address)': FunctionFragment
        'signerSize()': FunctionFragment
        'signers(address)': FunctionFragment
        'supportsInterface(bytes4)': FunctionFragment
        'usedHashes(bytes32)': FunctionFragment
        'verifySignatures(bytes32,bytes)': FunctionFragment
        'vid()': FunctionFragment
        'withdrawFee(address,address,uint256)': FunctionFragment
        'withdrawFeeFromUlnV2(address,address,uint256)': FunctionFragment
        'withdrawToken(address,address,uint256)': FunctionFragment
        'workerFeeLib()': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'DEFAULT_ADMIN_ROLE'
            | 'allowlistSize'
            | 'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'
            | 'assignJob(uint16,uint16,uint64,address)'
            | 'assignJob(address,bytes,bytes,bytes)'
            | 'defaultMultiplierBps'
            | 'dstConfig'
            | 'execute'
            | 'getFee(uint32,uint64,address,bytes)'
            | 'getFee(uint16,uint16,uint64,address)'
            | 'getFee(address,bytes,bytes,bytes)'
            | 'getRoleAdmin'
            | 'getSigners'
            | 'getSupportedOptionTypes'
            | 'grantRole'
            | 'hasAcl'
            | 'hasRole'
            | 'hashCallData'
            | 'isSigner'
            | 'localEidV2'
            | 'paused'
            | 'priceFeed'
            | 'quorum'
            | 'quorumChangeAdmin'
            | 'renounceRole'
            | 'revokeRole'
            | 'setDefaultMultiplierBps'
            | 'setDstConfig'
            | 'setPaused'
            | 'setPriceFeed'
            | 'setQuorum'
            | 'setSigner'
            | 'setSupportedOptionTypes'
            | 'setWorkerFeeLib'
            | 'signerSize'
            | 'signers'
            | 'supportsInterface'
            | 'usedHashes'
            | 'verifySignatures'
            | 'vid'
            | 'withdrawFee'
            | 'withdrawFeeFromUlnV2'
            | 'withdrawToken'
            | 'workerFeeLib'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string
    encodeFunctionData(functionFragment: 'allowlistSize', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'assignJob((uint32,bytes,bytes32,uint64,address),bytes)',
        values: [ILayerZeroDVN.AssignJobParamStruct, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'assignJob(uint16,uint16,uint64,address)',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'assignJob(address,bytes,bytes,bytes)',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'defaultMultiplierBps', values?: undefined): string
    encodeFunctionData(functionFragment: 'dstConfig', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'execute', values: [ExecuteParamStruct[]]): string
    encodeFunctionData(
        functionFragment: 'getFee(uint32,uint64,address,bytes)',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getFee(uint16,uint16,uint64,address)',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getFee(address,bytes,bytes,bytes)',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(functionFragment: 'getSigners', values?: undefined): string
    encodeFunctionData(functionFragment: 'getSupportedOptionTypes', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(
        functionFragment: 'grantRole',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'hasAcl', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'hashCallData',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'isSigner', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'localEidV2', values?: undefined): string
    encodeFunctionData(functionFragment: 'paused', values?: undefined): string
    encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string
    encodeFunctionData(functionFragment: 'quorum', values?: undefined): string
    encodeFunctionData(functionFragment: 'quorumChangeAdmin', values: [ExecuteParamStruct]): string
    encodeFunctionData(
        functionFragment: 'renounceRole',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'revokeRole',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'setDefaultMultiplierBps', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'setDstConfig', values: [IDVN.DstConfigParamStruct[]]): string
    encodeFunctionData(functionFragment: 'setPaused', values: [PromiseOrValue<boolean>]): string
    encodeFunctionData(functionFragment: 'setPriceFeed', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'setQuorum', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'setSigner', values: [PromiseOrValue<string>, PromiseOrValue<boolean>]): string
    encodeFunctionData(
        functionFragment: 'setSupportedOptionTypes',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
    ): string
    encodeFunctionData(functionFragment: 'setWorkerFeeLib', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'signerSize', values?: undefined): string
    encodeFunctionData(functionFragment: 'signers', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(functionFragment: 'usedHashes', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(
        functionFragment: 'verifySignatures',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(functionFragment: 'vid', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'withdrawFee',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawFeeFromUlnV2',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawToken',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'workerFeeLib', values?: undefined): string

    decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'allowlistSize', data: BytesLike): Result
    decodeFunctionResult(
        functionFragment: 'assignJob((uint32,bytes,bytes32,uint64,address),bytes)',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'assignJob(uint16,uint16,uint64,address)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'assignJob(address,bytes,bytes,bytes)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'defaultMultiplierBps', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'dstConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFee(uint32,uint64,address,bytes)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFee(uint16,uint16,uint64,address)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFee(address,bytes,bytes,bytes)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getSigners', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getSupportedOptionTypes', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'hasAcl', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'hashCallData', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isSigner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'localEidV2', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quorum', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quorumChangeAdmin', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultMultiplierBps', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDstConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setPriceFeed', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setQuorum', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setSigner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setSupportedOptionTypes', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setWorkerFeeLib', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'signerSize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'signers', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'usedHashes', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'verifySignatures', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'vid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawFeeFromUlnV2', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'workerFeeLib', data: BytesLike): Result

    events: {
        'ExecuteFailed(uint256,bytes)': EventFragment
        'HashAlreadyUsed(tuple,bytes32)': EventFragment
        'Paused(address)': EventFragment
        'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
        'RoleGranted(bytes32,address,address)': EventFragment
        'RoleRevoked(bytes32,address,address)': EventFragment
        'SetDefaultMultiplierBps(uint16)': EventFragment
        'SetDstConfig(tuple[])': EventFragment
        'SetPriceFeed(address)': EventFragment
        'SetSupportedOptionTypes(uint32,uint8[])': EventFragment
        'SetWorkerLib(address)': EventFragment
        'Unpaused(address)': EventFragment
        'UpdateQuorum(uint64)': EventFragment
        'UpdateSigner(address,bool)': EventFragment
        'VerifierFeePaid(uint256)': EventFragment
        'VerifySignaturesFailed(uint256)': EventFragment
        'Withdraw(address,address,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'ExecuteFailed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'HashAlreadyUsed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetDefaultMultiplierBps'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetDstConfig'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetPriceFeed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetSupportedOptionTypes'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetWorkerLib'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UpdateQuorum'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UpdateSigner'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'VerifierFeePaid'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'VerifySignaturesFailed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
}

export interface ExecuteFailedEventObject {
    _index: BigNumber
    _data: string
}
export type ExecuteFailedEvent = TypedEvent<[BigNumber, string], ExecuteFailedEventObject>

export type ExecuteFailedEventFilter = TypedEventFilter<ExecuteFailedEvent>

export interface HashAlreadyUsedEventObject {
    param: ExecuteParamStructOutput
    _hash: string
}
export type HashAlreadyUsedEvent = TypedEvent<[ExecuteParamStructOutput, string], HashAlreadyUsedEventObject>

export type HashAlreadyUsedEventFilter = TypedEventFilter<HashAlreadyUsedEvent>

export interface PausedEventObject {
    account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface RoleAdminChangedEventObject {
    role: string
    previousAdminRole: string
    newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
    role: string
    account: string
    sender: string
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
    role: string
    account: string
    sender: string
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface SetDefaultMultiplierBpsEventObject {
    multiplierBps: number
}
export type SetDefaultMultiplierBpsEvent = TypedEvent<[number], SetDefaultMultiplierBpsEventObject>

export type SetDefaultMultiplierBpsEventFilter = TypedEventFilter<SetDefaultMultiplierBpsEvent>

export interface SetDstConfigEventObject {
    params: IDVN.DstConfigParamStructOutput[]
}
export type SetDstConfigEvent = TypedEvent<[IDVN.DstConfigParamStructOutput[]], SetDstConfigEventObject>

export type SetDstConfigEventFilter = TypedEventFilter<SetDstConfigEvent>

export interface SetPriceFeedEventObject {
    priceFeed: string
}
export type SetPriceFeedEvent = TypedEvent<[string], SetPriceFeedEventObject>

export type SetPriceFeedEventFilter = TypedEventFilter<SetPriceFeedEvent>

export interface SetSupportedOptionTypesEventObject {
    dstEid: number
    optionTypes: number[]
}
export type SetSupportedOptionTypesEvent = TypedEvent<[number, number[]], SetSupportedOptionTypesEventObject>

export type SetSupportedOptionTypesEventFilter = TypedEventFilter<SetSupportedOptionTypesEvent>

export interface SetWorkerLibEventObject {
    workerLib: string
}
export type SetWorkerLibEvent = TypedEvent<[string], SetWorkerLibEventObject>

export type SetWorkerLibEventFilter = TypedEventFilter<SetWorkerLibEvent>

export interface UnpausedEventObject {
    account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface UpdateQuorumEventObject {
    _quorum: BigNumber
}
export type UpdateQuorumEvent = TypedEvent<[BigNumber], UpdateQuorumEventObject>

export type UpdateQuorumEventFilter = TypedEventFilter<UpdateQuorumEvent>

export interface UpdateSignerEventObject {
    _signer: string
    _active: boolean
}
export type UpdateSignerEvent = TypedEvent<[string, boolean], UpdateSignerEventObject>

export type UpdateSignerEventFilter = TypedEventFilter<UpdateSignerEvent>

export interface VerifierFeePaidEventObject {
    fee: BigNumber
}
export type VerifierFeePaidEvent = TypedEvent<[BigNumber], VerifierFeePaidEventObject>

export type VerifierFeePaidEventFilter = TypedEventFilter<VerifierFeePaidEvent>

export interface VerifySignaturesFailedEventObject {
    idx: BigNumber
}
export type VerifySignaturesFailedEvent = TypedEvent<[BigNumber], VerifySignaturesFailedEventObject>

export type VerifySignaturesFailedEventFilter = TypedEventFilter<VerifySignaturesFailedEvent>

export interface WithdrawEventObject {
    lib: string
    to: string
    amount: BigNumber
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber], WithdrawEventObject>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface DVN extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: DVNInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>

        'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'(
            _param: ILayerZeroDVN.AssignJobParamStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        'assignJob(uint16,uint16,uint64,address)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        'assignJob(address,bytes,bytes,bytes)'(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>

        dstConfig(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, number, BigNumber] & {
                gas: BigNumber
                multiplierBps: number
                floorMarginUSD: BigNumber
            }
        >

        execute(
            _params: ExecuteParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        'getFee(uint32,uint64,address,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { fee: BigNumber }>

        'getFee(uint16,uint16,uint64,address)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { fee: BigNumber }>

        'getFee(address,bytes,bytes,bytes)'(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { fee: BigNumber }>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>

        getSigners(overrides?: CallOverrides): Promise<[string[]]>

        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        hashCallData(
            _vid: PromiseOrValue<BigNumberish>,
            _target: PromiseOrValue<string>,
            _callData: PromiseOrValue<BytesLike>,
            _expiration: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>

        isSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

        localEidV2(overrides?: CallOverrides): Promise<[number]>

        paused(overrides?: CallOverrides): Promise<[boolean]>

        priceFeed(overrides?: CallOverrides): Promise<[string]>

        quorum(overrides?: CallOverrides): Promise<[BigNumber]>

        quorumChangeAdmin(
            _param: ExecuteParamStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[void]>

        revokeRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDefaultMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDstConfig(
            _params: IDVN.DstConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setPaused(
            _paused: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setQuorum(
            _quorum: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setSigner(
            _signer: PromiseOrValue<string>,
            _active: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setWorkerFeeLib(
            _workerFeeLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        signerSize(overrides?: CallOverrides): Promise<[BigNumber]>

        signers(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>

        usedHashes(
            executableHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[boolean] & { used: boolean }>

        verifySignatures(
            _hash: PromiseOrValue<BytesLike>,
            _signatures: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[boolean, number]>

        vid(overrides?: CallOverrides): Promise<[number]>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawFeeFromUlnV2(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        workerFeeLib(overrides?: CallOverrides): Promise<[string]>
    }

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>

    'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'(
        _param: ILayerZeroDVN.AssignJobParamStruct,
        _options: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'assignJob(uint16,uint16,uint64,address)'(
        _dstEid: PromiseOrValue<BigNumberish>,
        arg1: PromiseOrValue<BigNumberish>,
        _confirmations: PromiseOrValue<BigNumberish>,
        _sender: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'assignJob(address,bytes,bytes,bytes)'(
        _sender: PromiseOrValue<string>,
        arg1: PromiseOrValue<BytesLike>,
        _cmd: PromiseOrValue<BytesLike>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>

    dstConfig(
        dstEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, number, BigNumber] & {
            gas: BigNumber
            multiplierBps: number
            floorMarginUSD: BigNumber
        }
    >

    execute(
        _params: ExecuteParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'getFee(uint32,uint64,address,bytes)'(
        _dstEid: PromiseOrValue<BigNumberish>,
        _confirmations: PromiseOrValue<BigNumberish>,
        _sender: PromiseOrValue<string>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    'getFee(uint16,uint16,uint64,address)'(
        _dstEid: PromiseOrValue<BigNumberish>,
        arg1: PromiseOrValue<BigNumberish>,
        _confirmations: PromiseOrValue<BigNumberish>,
        _sender: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    'getFee(address,bytes,bytes,bytes)'(
        _sender: PromiseOrValue<string>,
        arg1: PromiseOrValue<BytesLike>,
        _cmd: PromiseOrValue<BytesLike>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

    getSigners(overrides?: CallOverrides): Promise<string[]>

    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>

    grantRole(
        _role: PromiseOrValue<BytesLike>,
        _account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    hasRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<boolean>

    hashCallData(
        _vid: PromiseOrValue<BigNumberish>,
        _target: PromiseOrValue<string>,
        _callData: PromiseOrValue<BytesLike>,
        _expiration: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>

    isSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    localEidV2(overrides?: CallOverrides): Promise<number>

    paused(overrides?: CallOverrides): Promise<boolean>

    priceFeed(overrides?: CallOverrides): Promise<string>

    quorum(overrides?: CallOverrides): Promise<BigNumber>

    quorumChangeAdmin(
        _param: ExecuteParamStruct,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceRole(
        arg0: PromiseOrValue<BytesLike>,
        arg1: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<void>

    revokeRole(
        _role: PromiseOrValue<BytesLike>,
        _account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDefaultMultiplierBps(
        _multiplierBps: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDstConfig(
        _params: IDVN.DstConfigParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPaused(
        _paused: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPriceFeed(
        _priceFeed: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setQuorum(
        _quorum: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setSigner(
        _signer: PromiseOrValue<string>,
        _active: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setSupportedOptionTypes(
        _eid: PromiseOrValue<BigNumberish>,
        _optionTypes: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setWorkerFeeLib(
        _workerFeeLib: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    signerSize(overrides?: CallOverrides): Promise<BigNumber>

    signers(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    verifySignatures(
        _hash: PromiseOrValue<BytesLike>,
        _signatures: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<[boolean, number]>

    vid(overrides?: CallOverrides): Promise<number>

    withdrawFee(
        _lib: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawFeeFromUlnV2(
        _lib: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawToken(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    workerFeeLib(overrides?: CallOverrides): Promise<string>

    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>

        'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'(
            _param: ILayerZeroDVN.AssignJobParamStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'assignJob(uint16,uint16,uint64,address)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'assignJob(address,bytes,bytes,bytes)'(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>

        dstConfig(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, number, BigNumber] & {
                gas: BigNumber
                multiplierBps: number
                floorMarginUSD: BigNumber
            }
        >

        execute(_params: ExecuteParamStruct[], overrides?: CallOverrides): Promise<void>

        'getFee(uint32,uint64,address,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee(uint16,uint16,uint64,address)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee(address,bytes,bytes,bytes)'(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

        getSigners(overrides?: CallOverrides): Promise<string[]>

        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        hashCallData(
            _vid: PromiseOrValue<BigNumberish>,
            _target: PromiseOrValue<string>,
            _callData: PromiseOrValue<BytesLike>,
            _expiration: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>

        isSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        localEidV2(overrides?: CallOverrides): Promise<number>

        paused(overrides?: CallOverrides): Promise<boolean>

        priceFeed(overrides?: CallOverrides): Promise<string>

        quorum(overrides?: CallOverrides): Promise<BigNumber>

        quorumChangeAdmin(_param: ExecuteParamStruct, overrides?: CallOverrides): Promise<void>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        revokeRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

        setDstConfig(_params: IDVN.DstConfigParamStruct[], overrides?: CallOverrides): Promise<void>

        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>

        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setQuorum(_quorum: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

        setSigner(
            _signer: PromiseOrValue<string>,
            _active: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<void>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<void>

        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        signerSize(overrides?: CallOverrides): Promise<BigNumber>

        signers(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

        usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

        verifySignatures(
            _hash: PromiseOrValue<BytesLike>,
            _signatures: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[boolean, number]>

        vid(overrides?: CallOverrides): Promise<number>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        withdrawFeeFromUlnV2(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        workerFeeLib(overrides?: CallOverrides): Promise<string>
    }

    filters: {
        'ExecuteFailed(uint256,bytes)'(_index?: null, _data?: null): ExecuteFailedEventFilter
        ExecuteFailed(_index?: null, _data?: null): ExecuteFailedEventFilter

        'HashAlreadyUsed(tuple,bytes32)'(param?: null, _hash?: null): HashAlreadyUsedEventFilter
        HashAlreadyUsed(param?: null, _hash?: null): HashAlreadyUsedEventFilter

        'Paused(address)'(account?: null): PausedEventFilter
        Paused(account?: null): PausedEventFilter

        'RoleAdminChanged(bytes32,bytes32,bytes32)'(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null
        ): RoleAdminChangedEventFilter
        RoleAdminChanged(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null
        ): RoleAdminChangedEventFilter

        'RoleGranted(bytes32,address,address)'(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleGrantedEventFilter
        RoleGranted(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleGrantedEventFilter

        'RoleRevoked(bytes32,address,address)'(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleRevokedEventFilter
        RoleRevoked(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleRevokedEventFilter

        'SetDefaultMultiplierBps(uint16)'(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter

        'SetDstConfig(tuple[])'(params?: null): SetDstConfigEventFilter
        SetDstConfig(params?: null): SetDstConfigEventFilter

        'SetPriceFeed(address)'(priceFeed?: null): SetPriceFeedEventFilter
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter

        'SetSupportedOptionTypes(uint32,uint8[])'(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter

        'SetWorkerLib(address)'(workerLib?: null): SetWorkerLibEventFilter
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter

        'Unpaused(address)'(account?: null): UnpausedEventFilter
        Unpaused(account?: null): UnpausedEventFilter

        'UpdateQuorum(uint64)'(_quorum?: null): UpdateQuorumEventFilter
        UpdateQuorum(_quorum?: null): UpdateQuorumEventFilter

        'UpdateSigner(address,bool)'(_signer?: null, _active?: null): UpdateSignerEventFilter
        UpdateSigner(_signer?: null, _active?: null): UpdateSignerEventFilter

        'VerifierFeePaid(uint256)'(fee?: null): VerifierFeePaidEventFilter
        VerifierFeePaid(fee?: null): VerifierFeePaidEventFilter

        'VerifySignaturesFailed(uint256)'(idx?: null): VerifySignaturesFailedEventFilter
        VerifySignaturesFailed(idx?: null): VerifySignaturesFailedEventFilter

        'Withdraw(address,address,uint256)'(lib?: null, to?: null, amount?: null): WithdrawEventFilter
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter
    }

    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>

        'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'(
            _param: ILayerZeroDVN.AssignJobParamStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        'assignJob(uint16,uint16,uint64,address)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        'assignJob(address,bytes,bytes,bytes)'(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>

        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        execute(
            _params: ExecuteParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        'getFee(uint32,uint64,address,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee(uint16,uint16,uint64,address)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee(address,bytes,bytes,bytes)'(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

        getSigners(overrides?: CallOverrides): Promise<BigNumber>

        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashCallData(
            _vid: PromiseOrValue<BigNumberish>,
            _target: PromiseOrValue<string>,
            _callData: PromiseOrValue<BytesLike>,
            _expiration: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        isSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        localEidV2(overrides?: CallOverrides): Promise<BigNumber>

        paused(overrides?: CallOverrides): Promise<BigNumber>

        priceFeed(overrides?: CallOverrides): Promise<BigNumber>

        quorum(overrides?: CallOverrides): Promise<BigNumber>

        quorumChangeAdmin(
            _param: ExecuteParamStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        revokeRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDefaultMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDstConfig(
            _params: IDVN.DstConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setPaused(
            _paused: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setQuorum(
            _quorum: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setSigner(
            _signer: PromiseOrValue<string>,
            _active: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setWorkerFeeLib(
            _workerFeeLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        signerSize(overrides?: CallOverrides): Promise<BigNumber>

        signers(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

        usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

        verifySignatures(
            _hash: PromiseOrValue<BytesLike>,
            _signatures: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        vid(overrides?: CallOverrides): Promise<BigNumber>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawFeeFromUlnV2(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>

        'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'(
            _param: ILayerZeroDVN.AssignJobParamStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        'assignJob(uint16,uint16,uint64,address)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        'assignJob(address,bytes,bytes,bytes)'(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>

        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        execute(
            _params: ExecuteParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        'getFee(uint32,uint64,address,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getFee(uint16,uint16,uint64,address)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            _confirmations: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getFee(address,bytes,bytes,bytes)'(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        getSigners(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashCallData(
            _vid: PromiseOrValue<BigNumberish>,
            _target: PromiseOrValue<string>,
            _callData: PromiseOrValue<BytesLike>,
            _expiration: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        isSigner(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        localEidV2(overrides?: CallOverrides): Promise<PopulatedTransaction>

        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>

        quorum(overrides?: CallOverrides): Promise<PopulatedTransaction>

        quorumChangeAdmin(
            _param: ExecuteParamStruct,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        revokeRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDefaultMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDstConfig(
            _params: IDVN.DstConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setPaused(
            _paused: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setQuorum(
            _quorum: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setSigner(
            _signer: PromiseOrValue<string>,
            _active: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setWorkerFeeLib(
            _workerFeeLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        signerSize(overrides?: CallOverrides): Promise<PopulatedTransaction>

        signers(_signer: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        usedHashes(executableHash: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        verifySignatures(
            _hash: PromiseOrValue<BytesLike>,
            _signatures: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        vid(overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawFeeFromUlnV2(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
