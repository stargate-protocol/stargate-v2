/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../../common'

export declare namespace IAxelarDVNAdapterFeeLib {
    export type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        gas: PromiseOrValue<BigNumberish>
        floorMarginUSD: PromiseOrValue<BigNumberish>
    }

    export type DstConfigParamStructOutput = [number, BigNumber, BigNumber] & {
        dstEid: number
        gas: BigNumber
        floorMarginUSD: BigNumber
    }

    export type ParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        confirmations: PromiseOrValue<BigNumberish>
        sender: PromiseOrValue<string>
        defaultMultiplierBps: PromiseOrValue<BigNumberish>
    }

    export type ParamStructOutput = [number, BigNumber, string, number] & {
        dstEid: number
        confirmations: BigNumber
        sender: string
        defaultMultiplierBps: number
    }
}

export declare namespace IAxelarDVNAdapter {
    export type DstConfigStruct = {
        chainName: PromiseOrValue<string>
        peer: PromiseOrValue<string>
        multiplierBps: PromiseOrValue<BigNumberish>
        nativeGasFee: PromiseOrValue<BigNumberish>
    }

    export type DstConfigStructOutput = [string, string, number, BigNumber] & {
        chainName: string
        peer: string
        multiplierBps: number
        nativeGasFee: BigNumber
    }
}

export interface AxelarDVNAdapterFeeLibInterface extends utils.Interface {
    functions: {
        'dstConfig(uint32)': FunctionFragment
        'dvn()': FunctionFragment
        'gasService()': FunctionFragment
        'getFee((uint32,uint64,address,uint16),(string,string,uint16,uint256),bytes)': FunctionFragment
        'getFeeOnSend((uint32,uint64,address,uint16),(string,string,uint16,uint256),bytes,bytes,address)': FunctionFragment
        'initialize(address,address,uint16)': FunctionFragment
        'nativeGasFeeMultiplierBps()': FunctionFragment
        'owner()': FunctionFragment
        'priceFeed()': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'setDstConfig((uint32,uint64,uint128)[])': FunctionFragment
        'setGasService(address)': FunctionFragment
        'setNativeGasFeeMultiplierBps(uint16)': FunctionFragment
        'setPriceFeed(address)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'withdrawToken(address,address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'dstConfig'
            | 'dvn'
            | 'gasService'
            | 'getFee'
            | 'getFeeOnSend'
            | 'initialize'
            | 'nativeGasFeeMultiplierBps'
            | 'owner'
            | 'priceFeed'
            | 'renounceOwnership'
            | 'setDstConfig'
            | 'setGasService'
            | 'setNativeGasFeeMultiplierBps'
            | 'setPriceFeed'
            | 'transferOwnership'
            | 'withdrawToken'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'dstConfig', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'dvn', values?: undefined): string
    encodeFunctionData(functionFragment: 'gasService', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'getFee',
        values: [IAxelarDVNAdapterFeeLib.ParamStruct, IAxelarDVNAdapter.DstConfigStruct, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'getFeeOnSend',
        values: [
            IAxelarDVNAdapterFeeLib.ParamStruct,
            IAxelarDVNAdapter.DstConfigStruct,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<string>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'initialize',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'nativeGasFeeMultiplierBps', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'setDstConfig',
        values: [IAxelarDVNAdapterFeeLib.DstConfigParamStruct[]]
    ): string
    encodeFunctionData(functionFragment: 'setGasService', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'setNativeGasFeeMultiplierBps', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'setPriceFeed', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'withdrawToken',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'dstConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'dvn', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'gasService', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFeeOnSend', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nativeGasFeeMultiplierBps', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDstConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setGasService', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setNativeGasFeeMultiplierBps', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setPriceFeed', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawToken', data: BytesLike): Result

    events: {
        'DstConfigSet(tuple[])': EventFragment
        'GasServiceSet(address)': EventFragment
        'Initialized(uint8)': EventFragment
        'NativeGasFeeMultiplierBpsSet(uint16)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'PriceFeedSet(address)': EventFragment
        'TokenWithdrawn(address,address,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'DstConfigSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'GasServiceSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NativeGasFeeMultiplierBpsSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PriceFeedSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TokenWithdrawn'): EventFragment
}

export interface DstConfigSetEventObject {
    params: IAxelarDVNAdapterFeeLib.DstConfigParamStructOutput[]
}
export type DstConfigSetEvent = TypedEvent<
    [IAxelarDVNAdapterFeeLib.DstConfigParamStructOutput[]],
    DstConfigSetEventObject
>

export type DstConfigSetEventFilter = TypedEventFilter<DstConfigSetEvent>

export interface GasServiceSetEventObject {
    gasService: string
}
export type GasServiceSetEvent = TypedEvent<[string], GasServiceSetEventObject>

export type GasServiceSetEventFilter = TypedEventFilter<GasServiceSetEvent>

export interface InitializedEventObject {
    version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface NativeGasFeeMultiplierBpsSetEventObject {
    multiplierBps: number
}
export type NativeGasFeeMultiplierBpsSetEvent = TypedEvent<[number], NativeGasFeeMultiplierBpsSetEventObject>

export type NativeGasFeeMultiplierBpsSetEventFilter = TypedEventFilter<NativeGasFeeMultiplierBpsSetEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PriceFeedSetEventObject {
    priceFeed: string
}
export type PriceFeedSetEvent = TypedEvent<[string], PriceFeedSetEventObject>

export type PriceFeedSetEventFilter = TypedEventFilter<PriceFeedSetEvent>

export interface TokenWithdrawnEventObject {
    token: string
    to: string
    amount: BigNumber
}
export type TokenWithdrawnEvent = TypedEvent<[string, string, BigNumber], TokenWithdrawnEventObject>

export type TokenWithdrawnEventFilter = TypedEventFilter<TokenWithdrawnEvent>

export interface AxelarDVNAdapterFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: AxelarDVNAdapterFeeLibInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        dstConfig(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { gas: BigNumber; floorMarginUSD: BigNumber }>

        dvn(overrides?: CallOverrides): Promise<[string]>

        gasService(overrides?: CallOverrides): Promise<[string]>

        getFee(
            _param: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { totalFee: BigNumber }>

        getFeeOnSend(
            _param: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _payload: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            _sendLib: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        initialize(
            _gasService: PromiseOrValue<string>,
            _dvn: PromiseOrValue<string>,
            _nativeGasFeeMultiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        nativeGasFeeMultiplierBps(overrides?: CallOverrides): Promise<[number]>

        owner(overrides?: CallOverrides): Promise<[string]>

        priceFeed(overrides?: CallOverrides): Promise<[string]>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        setDstConfig(
            _param: IAxelarDVNAdapterFeeLib.DstConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setGasService(
            _gasService: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setNativeGasFeeMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    dstConfig(
        dstEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { gas: BigNumber; floorMarginUSD: BigNumber }>

    dvn(overrides?: CallOverrides): Promise<string>

    gasService(overrides?: CallOverrides): Promise<string>

    getFee(
        _param: IAxelarDVNAdapterFeeLib.ParamStruct,
        _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
        _options: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getFeeOnSend(
        _param: IAxelarDVNAdapterFeeLib.ParamStruct,
        _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
        _payload: PromiseOrValue<BytesLike>,
        _options: PromiseOrValue<BytesLike>,
        _sendLib: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    initialize(
        _gasService: PromiseOrValue<string>,
        _dvn: PromiseOrValue<string>,
        _nativeGasFeeMultiplierBps: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    nativeGasFeeMultiplierBps(overrides?: CallOverrides): Promise<number>

    owner(overrides?: CallOverrides): Promise<string>

    priceFeed(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    setDstConfig(
        _param: IAxelarDVNAdapterFeeLib.DstConfigParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setGasService(
        _gasService: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setNativeGasFeeMultiplierBps(
        _multiplierBps: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPriceFeed(
        _priceFeed: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawToken(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        dstConfig(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { gas: BigNumber; floorMarginUSD: BigNumber }>

        dvn(overrides?: CallOverrides): Promise<string>

        gasService(overrides?: CallOverrides): Promise<string>

        getFee(
            _param: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getFeeOnSend(
            _param: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _payload: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            _sendLib: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        initialize(
            _gasService: PromiseOrValue<string>,
            _dvn: PromiseOrValue<string>,
            _nativeGasFeeMultiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        nativeGasFeeMultiplierBps(overrides?: CallOverrides): Promise<number>

        owner(overrides?: CallOverrides): Promise<string>

        priceFeed(overrides?: CallOverrides): Promise<string>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        setDstConfig(_param: IAxelarDVNAdapterFeeLib.DstConfigParamStruct[], overrides?: CallOverrides): Promise<void>

        setGasService(_gasService: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setNativeGasFeeMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'DstConfigSet(tuple[])'(params?: null): DstConfigSetEventFilter
        DstConfigSet(params?: null): DstConfigSetEventFilter

        'GasServiceSet(address)'(gasService?: null): GasServiceSetEventFilter
        GasServiceSet(gasService?: null): GasServiceSetEventFilter

        'Initialized(uint8)'(version?: null): InitializedEventFilter
        Initialized(version?: null): InitializedEventFilter

        'NativeGasFeeMultiplierBpsSet(uint16)'(multiplierBps?: null): NativeGasFeeMultiplierBpsSetEventFilter
        NativeGasFeeMultiplierBpsSet(multiplierBps?: null): NativeGasFeeMultiplierBpsSetEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'PriceFeedSet(address)'(priceFeed?: null): PriceFeedSetEventFilter
        PriceFeedSet(priceFeed?: null): PriceFeedSetEventFilter

        'TokenWithdrawn(address,address,uint256)'(token?: null, to?: null, amount?: null): TokenWithdrawnEventFilter
        TokenWithdrawn(token?: null, to?: null, amount?: null): TokenWithdrawnEventFilter
    }

    estimateGas: {
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        dvn(overrides?: CallOverrides): Promise<BigNumber>

        gasService(overrides?: CallOverrides): Promise<BigNumber>

        getFee(
            _param: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getFeeOnSend(
            _param: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _payload: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            _sendLib: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        initialize(
            _gasService: PromiseOrValue<string>,
            _dvn: PromiseOrValue<string>,
            _nativeGasFeeMultiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        nativeGasFeeMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        priceFeed(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        setDstConfig(
            _param: IAxelarDVNAdapterFeeLib.DstConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setGasService(
            _gasService: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setNativeGasFeeMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        dstConfig(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        dvn(overrides?: CallOverrides): Promise<PopulatedTransaction>

        gasService(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getFee(
            _param: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getFeeOnSend(
            _param: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _payload: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            _sendLib: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        initialize(
            _gasService: PromiseOrValue<string>,
            _dvn: PromiseOrValue<string>,
            _nativeGasFeeMultiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        nativeGasFeeMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        setDstConfig(
            _param: IAxelarDVNAdapterFeeLib.DstConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setGasService(
            _gasService: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setNativeGasFeeMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
