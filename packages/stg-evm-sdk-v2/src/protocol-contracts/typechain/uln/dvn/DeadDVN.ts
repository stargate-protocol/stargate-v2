/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export declare namespace ILayerZeroDVN {
    export type AssignJobParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        packetHeader: PromiseOrValue<BytesLike>
        payloadHash: PromiseOrValue<BytesLike>
        confirmations: PromiseOrValue<BigNumberish>
        sender: PromiseOrValue<string>
    }

    export type AssignJobParamStructOutput = [number, string, string, BigNumber, string] & {
        dstEid: number
        packetHeader: string
        payloadHash: string
        confirmations: BigNumber
        sender: string
    }
}

export interface DeadDVNInterface extends utils.Interface {
    functions: {
        'assignJob((uint32,bytes,bytes32,uint64,address),bytes)': FunctionFragment
        'assignJob(uint16,uint16,uint64,address)': FunctionFragment
        'getFee(uint32,uint64,address,bytes)': FunctionFragment
        'getFee(uint16,uint16,uint64,address)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'
            | 'assignJob(uint16,uint16,uint64,address)'
            | 'getFee(uint32,uint64,address,bytes)'
            | 'getFee(uint16,uint16,uint64,address)'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'assignJob((uint32,bytes,bytes32,uint64,address),bytes)',
        values: [ILayerZeroDVN.AssignJobParamStruct, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'assignJob(uint16,uint16,uint64,address)',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getFee(uint32,uint64,address,bytes)',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getFee(uint16,uint16,uint64,address)',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
        ]
    ): string

    decodeFunctionResult(
        functionFragment: 'assignJob((uint32,bytes,bytes32,uint64,address),bytes)',
        data: BytesLike
    ): Result
    decodeFunctionResult(functionFragment: 'assignJob(uint16,uint16,uint64,address)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFee(uint32,uint64,address,bytes)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFee(uint16,uint16,uint64,address)', data: BytesLike): Result

    events: {}
}

export interface DeadDVN extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: DeadDVNInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'(
            arg0: ILayerZeroDVN.AssignJobParamStruct,
            arg1: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        'assignJob(uint16,uint16,uint64,address)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        'getFee(uint32,uint64,address,bytes)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<string>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        'getFee(uint16,uint16,uint64,address)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>
    }

    'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'(
        arg0: ILayerZeroDVN.AssignJobParamStruct,
        arg1: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'assignJob(uint16,uint16,uint64,address)'(
        arg0: PromiseOrValue<BigNumberish>,
        arg1: PromiseOrValue<BigNumberish>,
        arg2: PromiseOrValue<BigNumberish>,
        arg3: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    'getFee(uint32,uint64,address,bytes)'(
        arg0: PromiseOrValue<BigNumberish>,
        arg1: PromiseOrValue<BigNumberish>,
        arg2: PromiseOrValue<string>,
        arg3: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    'getFee(uint16,uint16,uint64,address)'(
        arg0: PromiseOrValue<BigNumberish>,
        arg1: PromiseOrValue<BigNumberish>,
        arg2: PromiseOrValue<BigNumberish>,
        arg3: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    callStatic: {
        'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'(
            arg0: ILayerZeroDVN.AssignJobParamStruct,
            arg1: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'assignJob(uint16,uint16,uint64,address)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee(uint32,uint64,address,bytes)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<string>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee(uint16,uint16,uint64,address)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>
    }

    filters: {}

    estimateGas: {
        'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'(
            arg0: ILayerZeroDVN.AssignJobParamStruct,
            arg1: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        'assignJob(uint16,uint16,uint64,address)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee(uint32,uint64,address,bytes)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<string>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee(uint16,uint16,uint64,address)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>
    }

    populateTransaction: {
        'assignJob((uint32,bytes,bytes32,uint64,address),bytes)'(
            arg0: ILayerZeroDVN.AssignJobParamStruct,
            arg1: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        'assignJob(uint16,uint16,uint64,address)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getFee(uint32,uint64,address,bytes)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<string>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getFee(uint16,uint16,uint64,address)'(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BigNumberish>,
            arg2: PromiseOrValue<BigNumberish>,
            arg3: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>
    }
}
