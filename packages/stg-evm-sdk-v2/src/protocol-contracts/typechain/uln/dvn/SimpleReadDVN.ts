/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export declare namespace SimpleReadDVN {
    export type SetSupportedCmdTypesParamStruct = {
        targetEid: PromiseOrValue<BigNumberish>
        types: PromiseOrValue<BigNumberish>
    }

    export type SetSupportedCmdTypesParamStructOutput = [number, BigNumber] & {
        targetEid: number
        types: BigNumber
    }
}

export interface SimpleReadDVNInterface extends utils.Interface {
    functions: {
        'assignJob(address,bytes,bytes,bytes)': FunctionFragment
        'getCmdFees()': FunctionFragment
        'getFee(address,bytes,bytes,bytes)': FunctionFragment
        'readLib()': FunctionFragment
        'setCmdFees(uint128,uint128,uint128,uint128)': FunctionFragment
        'setSupportedCmdTypes((uint32,uint256)[])': FunctionFragment
        'verify(bytes,bytes32,bytes32)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'assignJob'
            | 'getCmdFees'
            | 'getFee'
            | 'readLib'
            | 'setCmdFees'
            | 'setSupportedCmdTypes'
            | 'verify'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'assignJob',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'getCmdFees', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'getFee',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'readLib', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'setCmdFees',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setSupportedCmdTypes',
        values: [SimpleReadDVN.SetSupportedCmdTypesParamStruct[]]
    ): string
    encodeFunctionData(
        functionFragment: 'verify',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ): string

    decodeFunctionResult(functionFragment: 'assignJob', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getCmdFees', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'readLib', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setCmdFees', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setSupportedCmdTypes', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result

    events: {}
}

export interface SimpleReadDVN extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: SimpleReadDVNInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        assignJob(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        getCmdFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>

        getFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        readLib(overrides?: CallOverrides): Promise<[string]>

        setCmdFees(
            _evmCallReqV1FeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1MapFeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1ReduceFeeUSD: PromiseOrValue<BigNumberish>,
            _nativePriceUSD: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setSupportedCmdTypes(
            _params: SimpleReadDVN.SetSupportedCmdTypesParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        verify(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    assignJob(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BytesLike>,
        _cmd: PromiseOrValue<BytesLike>,
        arg3: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getCmdFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>

    getFee(
        arg0: PromiseOrValue<string>,
        arg1: PromiseOrValue<BytesLike>,
        _cmd: PromiseOrValue<BytesLike>,
        arg3: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    readLib(overrides?: CallOverrides): Promise<string>

    setCmdFees(
        _evmCallReqV1FeeUSD: PromiseOrValue<BigNumberish>,
        _evmCallComputeV1MapFeeUSD: PromiseOrValue<BigNumberish>,
        _evmCallComputeV1ReduceFeeUSD: PromiseOrValue<BigNumberish>,
        _nativePriceUSD: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setSupportedCmdTypes(
        _params: SimpleReadDVN.SetSupportedCmdTypesParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    verify(
        _packetHeader: PromiseOrValue<BytesLike>,
        _cmdHash: PromiseOrValue<BytesLike>,
        _payloadHash: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        assignJob(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getCmdFees(overrides?: CallOverrides): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>

        getFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        readLib(overrides?: CallOverrides): Promise<string>

        setCmdFees(
            _evmCallReqV1FeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1MapFeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1ReduceFeeUSD: PromiseOrValue<BigNumberish>,
            _nativePriceUSD: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        setSupportedCmdTypes(
            _params: SimpleReadDVN.SetSupportedCmdTypesParamStruct[],
            overrides?: CallOverrides
        ): Promise<void>

        verify(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {}

    estimateGas: {
        assignJob(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        getCmdFees(overrides?: CallOverrides): Promise<BigNumber>

        getFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        readLib(overrides?: CallOverrides): Promise<BigNumber>

        setCmdFees(
            _evmCallReqV1FeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1MapFeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1ReduceFeeUSD: PromiseOrValue<BigNumberish>,
            _nativePriceUSD: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setSupportedCmdTypes(
            _params: SimpleReadDVN.SetSupportedCmdTypesParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        verify(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        assignJob(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        getCmdFees(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getFee(
            arg0: PromiseOrValue<string>,
            arg1: PromiseOrValue<BytesLike>,
            _cmd: PromiseOrValue<BytesLike>,
            arg3: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        readLib(overrides?: CallOverrides): Promise<PopulatedTransaction>

        setCmdFees(
            _evmCallReqV1FeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1MapFeeUSD: PromiseOrValue<BigNumberish>,
            _evmCallComputeV1ReduceFeeUSD: PromiseOrValue<BigNumberish>,
            _nativePriceUSD: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setSupportedCmdTypes(
            _params: SimpleReadDVN.SetSupportedCmdTypesParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        verify(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
