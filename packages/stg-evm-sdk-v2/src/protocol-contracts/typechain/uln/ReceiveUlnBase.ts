/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type UlnConfigStruct = {
    confirmations: PromiseOrValue<BigNumberish>
    requiredDVNCount: PromiseOrValue<BigNumberish>
    optionalDVNCount: PromiseOrValue<BigNumberish>
    optionalDVNThreshold: PromiseOrValue<BigNumberish>
    requiredDVNs: PromiseOrValue<string>[]
    optionalDVNs: PromiseOrValue<string>[]
}

export type UlnConfigStructOutput = [BigNumber, number, number, number, string[], string[]] & {
    confirmations: BigNumber
    requiredDVNCount: number
    optionalDVNCount: number
    optionalDVNThreshold: number
    requiredDVNs: string[]
    optionalDVNs: string[]
}

export type SetDefaultUlnConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>
    config: UlnConfigStruct
}

export type SetDefaultUlnConfigParamStructOutput = [number, UlnConfigStructOutput] & {
    eid: number
    config: UlnConfigStructOutput
}

export interface ReceiveUlnBaseInterface extends utils.Interface {
    functions: {
        'assertHeader(bytes,uint32)': FunctionFragment
        'getAppUlnConfig(address,uint32)': FunctionFragment
        'getUlnConfig(address,uint32)': FunctionFragment
        'hashLookup(bytes32,bytes32,address)': FunctionFragment
        'owner()': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'setDefaultUlnConfigs((uint32,(uint64,uint8,uint8,uint8,address[],address[]))[])': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'verifiable((uint64,uint8,uint8,uint8,address[],address[]),bytes32,bytes32)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'assertHeader'
            | 'getAppUlnConfig'
            | 'getUlnConfig'
            | 'hashLookup'
            | 'owner'
            | 'renounceOwnership'
            | 'setDefaultUlnConfigs'
            | 'transferOwnership'
            | 'verifiable'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'assertHeader',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getAppUlnConfig',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getUlnConfig',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'hashLookup',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'setDefaultUlnConfigs', values: [SetDefaultUlnConfigParamStruct[]]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'verifiable',
        values: [UlnConfigStruct, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ): string

    decodeFunctionResult(functionFragment: 'assertHeader', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getAppUlnConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getUlnConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'hashLookup', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultUlnConfigs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'verifiable', data: BytesLike): Result

    events: {
        'DefaultUlnConfigsSet(tuple[])': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'PayloadVerified(address,bytes,uint256,bytes32)': EventFragment
        'UlnConfigSet(address,uint32,tuple)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'DefaultUlnConfigsSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PayloadVerified'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'UlnConfigSet'): EventFragment
}

export interface DefaultUlnConfigsSetEventObject {
    params: SetDefaultUlnConfigParamStructOutput[]
}
export type DefaultUlnConfigsSetEvent = TypedEvent<
    [SetDefaultUlnConfigParamStructOutput[]],
    DefaultUlnConfigsSetEventObject
>

export type DefaultUlnConfigsSetEventFilter = TypedEventFilter<DefaultUlnConfigsSetEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PayloadVerifiedEventObject {
    dvn: string
    header: string
    confirmations: BigNumber
    proofHash: string
}
export type PayloadVerifiedEvent = TypedEvent<[string, string, BigNumber, string], PayloadVerifiedEventObject>

export type PayloadVerifiedEventFilter = TypedEventFilter<PayloadVerifiedEvent>

export interface UlnConfigSetEventObject {
    oapp: string
    eid: number
    config: UlnConfigStructOutput
}
export type UlnConfigSetEvent = TypedEvent<[string, number, UlnConfigStructOutput], UlnConfigSetEventObject>

export type UlnConfigSetEventFilter = TypedEventFilter<UlnConfigSetEvent>

export interface ReceiveUlnBase extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: ReceiveUlnBaseInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        assertHeader(
            _packetHeader: PromiseOrValue<BytesLike>,
            _localEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[void]>

        getAppUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[UlnConfigStructOutput]>

        getUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[UlnConfigStructOutput] & { rtnConfig: UlnConfigStructOutput }>

        hashLookup(
            headerHash: PromiseOrValue<BytesLike>,
            payloadHash: PromiseOrValue<BytesLike>,
            dvn: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean, BigNumber] & { submitted: boolean; confirmations: BigNumber }>

        owner(overrides?: CallOverrides): Promise<[string]>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        setDefaultUlnConfigs(
            _params: SetDefaultUlnConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        verifiable(
            _config: UlnConfigStruct,
            _headerHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[boolean]>
    }

    assertHeader(
        _packetHeader: PromiseOrValue<BytesLike>,
        _localEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<void>

    getAppUlnConfig(
        _oapp: PromiseOrValue<string>,
        _remoteEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<UlnConfigStructOutput>

    getUlnConfig(
        _oapp: PromiseOrValue<string>,
        _remoteEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<UlnConfigStructOutput>

    hashLookup(
        headerHash: PromiseOrValue<BytesLike>,
        payloadHash: PromiseOrValue<BytesLike>,
        dvn: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { submitted: boolean; confirmations: BigNumber }>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    setDefaultUlnConfigs(
        _params: SetDefaultUlnConfigParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    verifiable(
        _config: UlnConfigStruct,
        _headerHash: PromiseOrValue<BytesLike>,
        _payloadHash: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<boolean>

    callStatic: {
        assertHeader(
            _packetHeader: PromiseOrValue<BytesLike>,
            _localEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        getAppUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<UlnConfigStructOutput>

        getUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<UlnConfigStructOutput>

        hashLookup(
            headerHash: PromiseOrValue<BytesLike>,
            payloadHash: PromiseOrValue<BytesLike>,
            dvn: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean, BigNumber] & { submitted: boolean; confirmations: BigNumber }>

        owner(overrides?: CallOverrides): Promise<string>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        setDefaultUlnConfigs(_params: SetDefaultUlnConfigParamStruct[], overrides?: CallOverrides): Promise<void>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        verifiable(
            _config: UlnConfigStruct,
            _headerHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<boolean>
    }

    filters: {
        'DefaultUlnConfigsSet(tuple[])'(params?: null): DefaultUlnConfigsSetEventFilter
        DefaultUlnConfigsSet(params?: null): DefaultUlnConfigsSetEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'PayloadVerified(address,bytes,uint256,bytes32)'(
            dvn?: null,
            header?: null,
            confirmations?: null,
            proofHash?: null
        ): PayloadVerifiedEventFilter
        PayloadVerified(dvn?: null, header?: null, confirmations?: null, proofHash?: null): PayloadVerifiedEventFilter

        'UlnConfigSet(address,uint32,tuple)'(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter
        UlnConfigSet(oapp?: null, eid?: null, config?: null): UlnConfigSetEventFilter
    }

    estimateGas: {
        assertHeader(
            _packetHeader: PromiseOrValue<BytesLike>,
            _localEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getAppUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        hashLookup(
            headerHash: PromiseOrValue<BytesLike>,
            payloadHash: PromiseOrValue<BytesLike>,
            dvn: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        setDefaultUlnConfigs(
            _params: SetDefaultUlnConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        verifiable(
            _config: UlnConfigStruct,
            _headerHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>
    }

    populateTransaction: {
        assertHeader(
            _packetHeader: PromiseOrValue<BytesLike>,
            _localEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getAppUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getUlnConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        hashLookup(
            headerHash: PromiseOrValue<BytesLike>,
            payloadHash: PromiseOrValue<BytesLike>,
            dvn: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        setDefaultUlnConfigs(
            _params: SetDefaultUlnConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        verifiable(
            _config: UlnConfigStruct,
            _headerHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>
    }
}
