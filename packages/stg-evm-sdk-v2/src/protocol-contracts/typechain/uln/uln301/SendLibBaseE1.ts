/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export type ExecutorConfigStruct = {
    maxMessageSize: PromiseOrValue<BigNumberish>
    executor: PromiseOrValue<string>
}

export type ExecutorConfigStructOutput = [number, string] & {
    maxMessageSize: number
    executor: string
}

export type SetDefaultExecutorConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>
    config: ExecutorConfigStruct
}

export type SetDefaultExecutorConfigParamStructOutput = [number, ExecutorConfigStructOutput] & {
    eid: number
    config: ExecutorConfigStructOutput
}

export interface SendLibBaseE1Interface extends utils.Interface {
    functions: {
        'addressSizes(uint32)': FunctionFragment
        'estimateFees(uint16,address,bytes,bool,bytes)': FunctionFragment
        'executorConfigs(address,uint32)': FunctionFragment
        'fees(address)': FunctionFragment
        'getConfig(uint16,address,uint256)': FunctionFragment
        'getExecutorConfig(address,uint32)': FunctionFragment
        'nonceContract()': FunctionFragment
        'owner()': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'send(address,uint64,uint16,bytes,bytes,address,address,bytes)': FunctionFragment
        'setAddressSize(uint16,uint256)': FunctionFragment
        'setConfig(uint16,address,uint256,bytes)': FunctionFragment
        'setDefaultExecutorConfigs((uint32,(uint32,address))[])': FunctionFragment
        'setLzToken(address)': FunctionFragment
        'setTreasury(address)': FunctionFragment
        'setTreasuryNativeFeeCap(uint256)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'treasury()': FunctionFragment
        'treasuryFeeHandler()': FunctionFragment
        'version()': FunctionFragment
        'withdrawFee(address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'addressSizes'
            | 'estimateFees'
            | 'executorConfigs'
            | 'fees'
            | 'getConfig'
            | 'getExecutorConfig'
            | 'nonceContract'
            | 'owner'
            | 'renounceOwnership'
            | 'send'
            | 'setAddressSize'
            | 'setConfig'
            | 'setDefaultExecutorConfigs'
            | 'setLzToken'
            | 'setTreasury'
            | 'setTreasuryNativeFeeCap'
            | 'transferOwnership'
            | 'treasury'
            | 'treasuryFeeHandler'
            | 'version'
            | 'withdrawFee'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'addressSizes', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(
        functionFragment: 'estimateFees',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<boolean>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'executorConfigs',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'fees', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'getConfig',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getExecutorConfig',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'nonceContract', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'send',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setAddressSize',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'setConfig',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setDefaultExecutorConfigs',
        values: [SetDefaultExecutorConfigParamStruct[]]
    ): string
    encodeFunctionData(functionFragment: 'setLzToken', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'setTreasuryNativeFeeCap', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'treasury', values?: undefined): string
    encodeFunctionData(functionFragment: 'treasuryFeeHandler', values?: undefined): string
    encodeFunctionData(functionFragment: 'version', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'withdrawFee',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'addressSizes', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'estimateFees', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'executorConfigs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'fees', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getExecutorConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nonceContract', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setAddressSize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultExecutorConfigs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setLzToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setTreasuryNativeFeeCap', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'treasuryFeeHandler', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result

    events: {
        'AddressSizeSet(uint16,uint256)': EventFragment
        'DefaultExecutorConfigsSet(tuple[])': EventFragment
        'ExecutorConfigSet(address,uint32,tuple)': EventFragment
        'ExecutorFeePaid(address,uint256)': EventFragment
        'LzTokenSet(address)': EventFragment
        'NativeFeeWithdrawn(address,address,uint256)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'PacketSent(bytes,bytes,uint256,uint256)': EventFragment
        'TreasuryNativeFeeCapSet(uint256)': EventFragment
        'TreasurySet(address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'AddressSizeSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DefaultExecutorConfigsSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ExecutorConfigSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ExecutorFeePaid'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LzTokenSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NativeFeeWithdrawn'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PacketSent'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TreasuryNativeFeeCapSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TreasurySet'): EventFragment
}

export interface AddressSizeSetEventObject {
    eid: number
    size: BigNumber
}
export type AddressSizeSetEvent = TypedEvent<[number, BigNumber], AddressSizeSetEventObject>

export type AddressSizeSetEventFilter = TypedEventFilter<AddressSizeSetEvent>

export interface DefaultExecutorConfigsSetEventObject {
    params: SetDefaultExecutorConfigParamStructOutput[]
}
export type DefaultExecutorConfigsSetEvent = TypedEvent<
    [SetDefaultExecutorConfigParamStructOutput[]],
    DefaultExecutorConfigsSetEventObject
>

export type DefaultExecutorConfigsSetEventFilter = TypedEventFilter<DefaultExecutorConfigsSetEvent>

export interface ExecutorConfigSetEventObject {
    oapp: string
    eid: number
    config: ExecutorConfigStructOutput
}
export type ExecutorConfigSetEvent = TypedEvent<
    [string, number, ExecutorConfigStructOutput],
    ExecutorConfigSetEventObject
>

export type ExecutorConfigSetEventFilter = TypedEventFilter<ExecutorConfigSetEvent>

export interface ExecutorFeePaidEventObject {
    executor: string
    fee: BigNumber
}
export type ExecutorFeePaidEvent = TypedEvent<[string, BigNumber], ExecutorFeePaidEventObject>

export type ExecutorFeePaidEventFilter = TypedEventFilter<ExecutorFeePaidEvent>

export interface LzTokenSetEventObject {
    token: string
}
export type LzTokenSetEvent = TypedEvent<[string], LzTokenSetEventObject>

export type LzTokenSetEventFilter = TypedEventFilter<LzTokenSetEvent>

export interface NativeFeeWithdrawnEventObject {
    user: string
    receiver: string
    amount: BigNumber
}
export type NativeFeeWithdrawnEvent = TypedEvent<[string, string, BigNumber], NativeFeeWithdrawnEventObject>

export type NativeFeeWithdrawnEventFilter = TypedEventFilter<NativeFeeWithdrawnEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PacketSentEventObject {
    encodedPayload: string
    options: string
    nativeFee: BigNumber
    lzTokenFee: BigNumber
}
export type PacketSentEvent = TypedEvent<[string, string, BigNumber, BigNumber], PacketSentEventObject>

export type PacketSentEventFilter = TypedEventFilter<PacketSentEvent>

export interface TreasuryNativeFeeCapSetEventObject {
    newTreasuryNativeFeeCap: BigNumber
}
export type TreasuryNativeFeeCapSetEvent = TypedEvent<[BigNumber], TreasuryNativeFeeCapSetEventObject>

export type TreasuryNativeFeeCapSetEventFilter = TypedEventFilter<TreasuryNativeFeeCapSetEvent>

export interface TreasurySetEventObject {
    treasury: string
}
export type TreasurySetEvent = TypedEvent<[string], TreasurySetEventObject>

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>

export interface SendLibBaseE1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: SendLibBaseE1Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        addressSizes(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { size: BigNumber }>

        estimateFees(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _message: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }>

        executorConfigs(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[number, string] & { maxMessageSize: number; executor: string }>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

        getConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>

        getExecutorConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[ExecutorConfigStructOutput] & { rtnConfig: ExecutorConfigStructOutput }>

        nonceContract(overrides?: CallOverrides): Promise<[string]>

        owner(overrides?: CallOverrides): Promise<[string]>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        send(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _dstEid: PromiseOrValue<BigNumberish>,
            _path: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _refundAddress: PromiseOrValue<string>,
            _lzTokenPaymentAddress: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setAddressSize(
            _eid: PromiseOrValue<BigNumberish>,
            _size: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            _config: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDefaultExecutorConfigs(
            _params: SetDefaultExecutorConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setLzToken(
            _lzToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        treasury(overrides?: CallOverrides): Promise<[string]>

        treasuryFeeHandler(overrides?: CallOverrides): Promise<[string]>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    estimateFees(
        _dstEid: PromiseOrValue<BigNumberish>,
        _sender: PromiseOrValue<string>,
        _message: PromiseOrValue<BytesLike>,
        _payInLzToken: PromiseOrValue<boolean>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }>

    executorConfigs(
        oapp: PromiseOrValue<string>,
        eid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<[number, string] & { maxMessageSize: number; executor: string }>

    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    getConfig(
        _chainId: PromiseOrValue<BigNumberish>,
        _userApplication: PromiseOrValue<string>,
        _configType: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>

    getExecutorConfig(
        _oapp: PromiseOrValue<string>,
        _remoteEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<ExecutorConfigStructOutput>

    nonceContract(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    send(
        _sender: PromiseOrValue<string>,
        arg1: PromiseOrValue<BigNumberish>,
        _dstEid: PromiseOrValue<BigNumberish>,
        _path: PromiseOrValue<BytesLike>,
        _message: PromiseOrValue<BytesLike>,
        _refundAddress: PromiseOrValue<string>,
        _lzTokenPaymentAddress: PromiseOrValue<string>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setAddressSize(
        _eid: PromiseOrValue<BigNumberish>,
        _size: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setConfig(
        _chainId: PromiseOrValue<BigNumberish>,
        _userApplication: PromiseOrValue<string>,
        _configType: PromiseOrValue<BigNumberish>,
        _config: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDefaultExecutorConfigs(
        _params: SetDefaultExecutorConfigParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setLzToken(
        _lzToken: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTreasury(
        _treasury: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTreasuryNativeFeeCap(
        _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    treasury(overrides?: CallOverrides): Promise<string>

    treasuryFeeHandler(overrides?: CallOverrides): Promise<string>

    version(overrides?: CallOverrides): Promise<
        [BigNumber, number, number] & {
            major: BigNumber
            minor: number
            endpointVersion: number
        }
    >

    withdrawFee(
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        estimateFees(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _message: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { nativeFee: BigNumber; lzTokenFee: BigNumber }>

        executorConfigs(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[number, string] & { maxMessageSize: number; executor: string }>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        getConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>

        getExecutorConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<ExecutorConfigStructOutput>

        nonceContract(overrides?: CallOverrides): Promise<string>

        owner(overrides?: CallOverrides): Promise<string>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        send(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _dstEid: PromiseOrValue<BigNumberish>,
            _path: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _refundAddress: PromiseOrValue<string>,
            _lzTokenPaymentAddress: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        setAddressSize(
            _eid: PromiseOrValue<BigNumberish>,
            _size: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        setConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            _config: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        setDefaultExecutorConfigs(
            _params: SetDefaultExecutorConfigParamStruct[],
            overrides?: CallOverrides
        ): Promise<void>

        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        treasury(overrides?: CallOverrides): Promise<string>

        treasuryFeeHandler(overrides?: CallOverrides): Promise<string>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'AddressSizeSet(uint16,uint256)'(eid?: null, size?: null): AddressSizeSetEventFilter
        AddressSizeSet(eid?: null, size?: null): AddressSizeSetEventFilter

        'DefaultExecutorConfigsSet(tuple[])'(params?: null): DefaultExecutorConfigsSetEventFilter
        DefaultExecutorConfigsSet(params?: null): DefaultExecutorConfigsSetEventFilter

        'ExecutorConfigSet(address,uint32,tuple)'(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter
        ExecutorConfigSet(oapp?: null, eid?: null, config?: null): ExecutorConfigSetEventFilter

        'ExecutorFeePaid(address,uint256)'(executor?: null, fee?: null): ExecutorFeePaidEventFilter
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter

        'LzTokenSet(address)'(token?: null): LzTokenSetEventFilter
        LzTokenSet(token?: null): LzTokenSetEventFilter

        'NativeFeeWithdrawn(address,address,uint256)'(
            user?: null,
            receiver?: null,
            amount?: null
        ): NativeFeeWithdrawnEventFilter
        NativeFeeWithdrawn(user?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'PacketSent(bytes,bytes,uint256,uint256)'(
            encodedPayload?: null,
            options?: null,
            nativeFee?: null,
            lzTokenFee?: null
        ): PacketSentEventFilter
        PacketSent(encodedPayload?: null, options?: null, nativeFee?: null, lzTokenFee?: null): PacketSentEventFilter

        'TreasuryNativeFeeCapSet(uint256)'(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter
        TreasuryNativeFeeCapSet(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter

        'TreasurySet(address)'(treasury?: null): TreasurySetEventFilter
        TreasurySet(treasury?: null): TreasurySetEventFilter
    }

    estimateGas: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        estimateFees(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _message: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        executorConfigs(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        getConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getExecutorConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        nonceContract(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        send(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _dstEid: PromiseOrValue<BigNumberish>,
            _path: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _refundAddress: PromiseOrValue<string>,
            _lzTokenPaymentAddress: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setAddressSize(
            _eid: PromiseOrValue<BigNumberish>,
            _size: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            _config: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDefaultExecutorConfigs(
            _params: SetDefaultExecutorConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setLzToken(
            _lzToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        treasury(overrides?: CallOverrides): Promise<BigNumber>

        treasuryFeeHandler(overrides?: CallOverrides): Promise<BigNumber>

        version(overrides?: CallOverrides): Promise<BigNumber>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        addressSizes(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        estimateFees(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _message: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        executorConfigs(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        getConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getExecutorConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        nonceContract(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        send(
            _sender: PromiseOrValue<string>,
            arg1: PromiseOrValue<BigNumberish>,
            _dstEid: PromiseOrValue<BigNumberish>,
            _path: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _refundAddress: PromiseOrValue<string>,
            _lzTokenPaymentAddress: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setAddressSize(
            _eid: PromiseOrValue<BigNumberish>,
            _size: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            _config: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDefaultExecutorConfigs(
            _params: SetDefaultExecutorConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setLzToken(
            _lzToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>

        treasuryFeeHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
