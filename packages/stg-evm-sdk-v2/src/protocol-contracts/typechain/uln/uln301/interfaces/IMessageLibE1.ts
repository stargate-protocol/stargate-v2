/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common'

export interface IMessageLibE1Interface extends utils.Interface {
    functions: {
        'estimateFees(uint16,address,bytes,bool,bytes)': FunctionFragment
        'getConfig(uint16,address,uint256)': FunctionFragment
        'send(address,uint64,uint16,bytes,bytes,address,address,bytes)': FunctionFragment
        'setConfig(uint16,address,uint256,bytes)': FunctionFragment
        'setLzToken(address)': FunctionFragment
        'setTreasury(address)': FunctionFragment
        'version()': FunctionFragment
        'withdrawFee(address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'estimateFees'
            | 'getConfig'
            | 'send'
            | 'setConfig'
            | 'setLzToken'
            | 'setTreasury'
            | 'version'
            | 'withdrawFee'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'estimateFees',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<boolean>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getConfig',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'send',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setConfig',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'setLzToken', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'version', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'withdrawFee',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'estimateFees', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setLzToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result

    events: {}
}

export interface IMessageLibE1 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IMessageLibE1Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        estimateFees(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _payload: PromiseOrValue<BytesLike>,
            _payInZRO: PromiseOrValue<boolean>,
            _adapterParam: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }>

        getConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>

        send(
            _userApplication: PromiseOrValue<string>,
            _lastNonce: PromiseOrValue<BigNumberish>,
            _chainId: PromiseOrValue<BigNumberish>,
            _destination: PromiseOrValue<BytesLike>,
            _payload: PromiseOrValue<BytesLike>,
            refundAddress: PromiseOrValue<string>,
            _zroPaymentAddress: PromiseOrValue<string>,
            _adapterParams: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            _config: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setLzToken(
            _lzToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    estimateFees(
        _chainId: PromiseOrValue<BigNumberish>,
        _userApplication: PromiseOrValue<string>,
        _payload: PromiseOrValue<BytesLike>,
        _payInZRO: PromiseOrValue<boolean>,
        _adapterParam: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }>

    getConfig(
        _chainId: PromiseOrValue<BigNumberish>,
        _userApplication: PromiseOrValue<string>,
        _configType: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>

    send(
        _userApplication: PromiseOrValue<string>,
        _lastNonce: PromiseOrValue<BigNumberish>,
        _chainId: PromiseOrValue<BigNumberish>,
        _destination: PromiseOrValue<BytesLike>,
        _payload: PromiseOrValue<BytesLike>,
        refundAddress: PromiseOrValue<string>,
        _zroPaymentAddress: PromiseOrValue<string>,
        _adapterParams: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setConfig(
        _chainId: PromiseOrValue<BigNumberish>,
        _userApplication: PromiseOrValue<string>,
        _configType: PromiseOrValue<BigNumberish>,
        _config: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setLzToken(
        _lzToken: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTreasury(
        _treasury: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    version(overrides?: CallOverrides): Promise<
        [BigNumber, number, number] & {
            major: BigNumber
            minor: number
            endpointVersion: number
        }
    >

    withdrawFee(
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        estimateFees(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _payload: PromiseOrValue<BytesLike>,
            _payInZRO: PromiseOrValue<boolean>,
            _adapterParam: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { nativeFee: BigNumber; zroFee: BigNumber }>

        getConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>

        send(
            _userApplication: PromiseOrValue<string>,
            _lastNonce: PromiseOrValue<BigNumberish>,
            _chainId: PromiseOrValue<BigNumberish>,
            _destination: PromiseOrValue<BytesLike>,
            _payload: PromiseOrValue<BytesLike>,
            refundAddress: PromiseOrValue<string>,
            _zroPaymentAddress: PromiseOrValue<string>,
            _adapterParams: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        setConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            _config: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {}

    estimateGas: {
        estimateFees(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _payload: PromiseOrValue<BytesLike>,
            _payInZRO: PromiseOrValue<boolean>,
            _adapterParam: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        send(
            _userApplication: PromiseOrValue<string>,
            _lastNonce: PromiseOrValue<BigNumberish>,
            _chainId: PromiseOrValue<BigNumberish>,
            _destination: PromiseOrValue<BytesLike>,
            _payload: PromiseOrValue<BytesLike>,
            refundAddress: PromiseOrValue<string>,
            _zroPaymentAddress: PromiseOrValue<string>,
            _adapterParams: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            _config: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setLzToken(
            _lzToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        version(overrides?: CallOverrides): Promise<BigNumber>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        estimateFees(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _payload: PromiseOrValue<BytesLike>,
            _payInZRO: PromiseOrValue<boolean>,
            _adapterParam: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        send(
            _userApplication: PromiseOrValue<string>,
            _lastNonce: PromiseOrValue<BigNumberish>,
            _chainId: PromiseOrValue<BigNumberish>,
            _destination: PromiseOrValue<BytesLike>,
            _payload: PromiseOrValue<BytesLike>,
            refundAddress: PromiseOrValue<string>,
            _zroPaymentAddress: PromiseOrValue<string>,
            _adapterParams: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setConfig(
            _chainId: PromiseOrValue<BigNumberish>,
            _userApplication: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            _config: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setLzToken(
            _lzToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
