/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common'

export interface NonceContractMockInterface extends utils.Interface {
    functions: {
        'endpoint()': FunctionFragment
        'increment(uint16,address,bytes)': FunctionFragment
        'outboundNonce(uint16,bytes)': FunctionFragment
    }

    getFunction(nameOrSignatureOrTopic: 'endpoint' | 'increment' | 'outboundNonce'): FunctionFragment

    encodeFunctionData(functionFragment: 'endpoint', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'increment',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'outboundNonce',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
    ): string

    decodeFunctionResult(functionFragment: 'endpoint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'increment', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'outboundNonce', data: BytesLike): Result

    events: {}
}

export interface NonceContractMock extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: NonceContractMockInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        endpoint(overrides?: CallOverrides): Promise<[string]>

        increment(
            _chainId: PromiseOrValue<BigNumberish>,
            _ua: PromiseOrValue<string>,
            _path: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        outboundNonce(
            dstEid: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { nonce: BigNumber }>
    }

    endpoint(overrides?: CallOverrides): Promise<string>

    increment(
        _chainId: PromiseOrValue<BigNumberish>,
        _ua: PromiseOrValue<string>,
        _path: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    outboundNonce(
        dstEid: PromiseOrValue<BigNumberish>,
        path: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    callStatic: {
        endpoint(overrides?: CallOverrides): Promise<string>

        increment(
            _chainId: PromiseOrValue<BigNumberish>,
            _ua: PromiseOrValue<string>,
            _path: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        outboundNonce(
            dstEid: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>
    }

    filters: {}

    estimateGas: {
        endpoint(overrides?: CallOverrides): Promise<BigNumber>

        increment(
            _chainId: PromiseOrValue<BigNumberish>,
            _ua: PromiseOrValue<string>,
            _path: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        outboundNonce(
            dstEid: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>
    }

    populateTransaction: {
        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>

        increment(
            _chainId: PromiseOrValue<BigNumberish>,
            _ua: PromiseOrValue<string>,
            _path: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        outboundNonce(
            dstEid: PromiseOrValue<BigNumberish>,
            path: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>
    }
}
