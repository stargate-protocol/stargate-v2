/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BigNumberish, BytesLike, Signer, utils } from 'ethers'
import type { EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common'

export declare namespace ICCIPDVNAdapter {
    export type DstConfigParamStruct = {
        eid: PromiseOrValue<BigNumberish>
        multiplierBps: PromiseOrValue<BigNumberish>
        chainSelector: PromiseOrValue<BigNumberish>
        gas: PromiseOrValue<BigNumberish>
        peer: PromiseOrValue<BytesLike>
    }

    export type DstConfigParamStructOutput = [number, number, BigNumber, BigNumber, string] & {
        eid: number
        multiplierBps: number
        chainSelector: BigNumber
        gas: BigNumber
        peer: string
    }
}

export interface ICCIPDVNAdapterInterface extends utils.Interface {
    functions: {}

    events: {
        'DstConfigSet(tuple[])': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'DstConfigSet'): EventFragment
}

export interface DstConfigSetEventObject {
    params: ICCIPDVNAdapter.DstConfigParamStructOutput[]
}
export type DstConfigSetEvent = TypedEvent<[ICCIPDVNAdapter.DstConfigParamStructOutput[]], DstConfigSetEventObject>

export type DstConfigSetEventFilter = TypedEventFilter<DstConfigSetEvent>

export interface ICCIPDVNAdapter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: ICCIPDVNAdapterInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {}

    callStatic: {}

    filters: {
        'DstConfigSet(tuple[])'(params?: null): DstConfigSetEventFilter
        DstConfigSet(params?: null): DstConfigSetEventFilter
    }

    estimateGas: {}

    populateTransaction: {}
}
