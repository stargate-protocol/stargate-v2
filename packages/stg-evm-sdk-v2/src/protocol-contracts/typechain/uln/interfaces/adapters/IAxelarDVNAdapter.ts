/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common'

export declare namespace IAxelarDVNAdapter {
    export type DstConfigParamStruct = {
        eid: PromiseOrValue<BigNumberish>
        chainName: PromiseOrValue<string>
        peer: PromiseOrValue<string>
        multiplierBps: PromiseOrValue<BigNumberish>
        nativeGasFee: PromiseOrValue<BigNumberish>
    }

    export type DstConfigParamStructOutput = [number, string, string, number, BigNumber] & {
        eid: number
        chainName: string
        peer: string
        multiplierBps: number
        nativeGasFee: BigNumber
    }

    export type FloorMarginUSDParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        floorMarginUSD: PromiseOrValue<BigNumberish>
    }

    export type FloorMarginUSDParamStructOutput = [number, BigNumber] & {
        dstEid: number
        floorMarginUSD: BigNumber
    }

    export type MultiplierParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        multiplierBps: PromiseOrValue<BigNumberish>
    }

    export type MultiplierParamStructOutput = [number, number] & {
        dstEid: number
        multiplierBps: number
    }

    export type NativeGasFeeParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        nativeGasFee: PromiseOrValue<BigNumberish>
    }

    export type NativeGasFeeParamStructOutput = [number, BigNumber] & {
        dstEid: number
        nativeGasFee: BigNumber
    }
}

export interface IAxelarDVNAdapterInterface extends utils.Interface {
    functions: {
        'withdrawToFeeLib(address)': FunctionFragment
    }

    getFunction(nameOrSignatureOrTopic: 'withdrawToFeeLib'): FunctionFragment

    encodeFunctionData(functionFragment: 'withdrawToFeeLib', values: [PromiseOrValue<string>]): string

    decodeFunctionResult(functionFragment: 'withdrawToFeeLib', data: BytesLike): Result

    events: {
        'DstConfigSet(tuple[])': EventFragment
        'FloorMarginUSDSet(tuple[])': EventFragment
        'MultiplierSet(tuple[])': EventFragment
        'NativeGasFeeSet(tuple[])': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'DstConfigSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'FloorMarginUSDSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'MultiplierSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NativeGasFeeSet'): EventFragment
}

export interface DstConfigSetEventObject {
    params: IAxelarDVNAdapter.DstConfigParamStructOutput[]
}
export type DstConfigSetEvent = TypedEvent<[IAxelarDVNAdapter.DstConfigParamStructOutput[]], DstConfigSetEventObject>

export type DstConfigSetEventFilter = TypedEventFilter<DstConfigSetEvent>

export interface FloorMarginUSDSetEventObject {
    params: IAxelarDVNAdapter.FloorMarginUSDParamStructOutput[]
}
export type FloorMarginUSDSetEvent = TypedEvent<
    [IAxelarDVNAdapter.FloorMarginUSDParamStructOutput[]],
    FloorMarginUSDSetEventObject
>

export type FloorMarginUSDSetEventFilter = TypedEventFilter<FloorMarginUSDSetEvent>

export interface MultiplierSetEventObject {
    params: IAxelarDVNAdapter.MultiplierParamStructOutput[]
}
export type MultiplierSetEvent = TypedEvent<[IAxelarDVNAdapter.MultiplierParamStructOutput[]], MultiplierSetEventObject>

export type MultiplierSetEventFilter = TypedEventFilter<MultiplierSetEvent>

export interface NativeGasFeeSetEventObject {
    params: IAxelarDVNAdapter.NativeGasFeeParamStructOutput[]
}
export type NativeGasFeeSetEvent = TypedEvent<
    [IAxelarDVNAdapter.NativeGasFeeParamStructOutput[]],
    NativeGasFeeSetEventObject
>

export type NativeGasFeeSetEventFilter = TypedEventFilter<NativeGasFeeSetEvent>

export interface IAxelarDVNAdapter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IAxelarDVNAdapterInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        withdrawToFeeLib(
            _sendLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    withdrawToFeeLib(
        _sendLib: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        withdrawToFeeLib(_sendLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'DstConfigSet(tuple[])'(params?: null): DstConfigSetEventFilter
        DstConfigSet(params?: null): DstConfigSetEventFilter

        'FloorMarginUSDSet(tuple[])'(params?: null): FloorMarginUSDSetEventFilter
        FloorMarginUSDSet(params?: null): FloorMarginUSDSetEventFilter

        'MultiplierSet(tuple[])'(params?: null): MultiplierSetEventFilter
        MultiplierSet(params?: null): MultiplierSetEventFilter

        'NativeGasFeeSet(tuple[])'(params?: null): NativeGasFeeSetEventFilter
        NativeGasFeeSet(params?: null): NativeGasFeeSetEventFilter
    }

    estimateGas: {
        withdrawToFeeLib(
            _sendLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        withdrawToFeeLib(
            _sendLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
