/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common'

export declare namespace IAxelarDVNAdapterFeeLib {
    export type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        gas: PromiseOrValue<BigNumberish>
        floorMarginUSD: PromiseOrValue<BigNumberish>
    }

    export type DstConfigParamStructOutput = [number, BigNumber, BigNumber] & {
        dstEid: number
        gas: BigNumber
        floorMarginUSD: BigNumber
    }

    export type ParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        confirmations: PromiseOrValue<BigNumberish>
        sender: PromiseOrValue<string>
        defaultMultiplierBps: PromiseOrValue<BigNumberish>
    }

    export type ParamStructOutput = [number, BigNumber, string, number] & {
        dstEid: number
        confirmations: BigNumber
        sender: string
        defaultMultiplierBps: number
    }
}

export declare namespace IAxelarDVNAdapter {
    export type DstConfigStruct = {
        chainName: PromiseOrValue<string>
        peer: PromiseOrValue<string>
        multiplierBps: PromiseOrValue<BigNumberish>
        nativeGasFee: PromiseOrValue<BigNumberish>
    }

    export type DstConfigStructOutput = [string, string, number, BigNumber] & {
        chainName: string
        peer: string
        multiplierBps: number
        nativeGasFee: BigNumber
    }
}

export interface IAxelarDVNAdapterFeeLibInterface extends utils.Interface {
    functions: {
        'getFee((uint32,uint64,address,uint16),(string,string,uint16,uint256),bytes)': FunctionFragment
        'getFeeOnSend((uint32,uint64,address,uint16),(string,string,uint16,uint256),bytes,bytes,address)': FunctionFragment
    }

    getFunction(nameOrSignatureOrTopic: 'getFee' | 'getFeeOnSend'): FunctionFragment

    encodeFunctionData(
        functionFragment: 'getFee',
        values: [IAxelarDVNAdapterFeeLib.ParamStruct, IAxelarDVNAdapter.DstConfigStruct, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'getFeeOnSend',
        values: [
            IAxelarDVNAdapterFeeLib.ParamStruct,
            IAxelarDVNAdapter.DstConfigStruct,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<string>,
        ]
    ): string

    decodeFunctionResult(functionFragment: 'getFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFeeOnSend', data: BytesLike): Result

    events: {
        'DstConfigSet(tuple[])': EventFragment
        'GasServiceSet(address)': EventFragment
        'NativeGasFeeMultiplierBpsSet(uint16)': EventFragment
        'PriceFeedSet(address)': EventFragment
        'TokenWithdrawn(address,address,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'DstConfigSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'GasServiceSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NativeGasFeeMultiplierBpsSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PriceFeedSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TokenWithdrawn'): EventFragment
}

export interface DstConfigSetEventObject {
    params: IAxelarDVNAdapterFeeLib.DstConfigParamStructOutput[]
}
export type DstConfigSetEvent = TypedEvent<
    [IAxelarDVNAdapterFeeLib.DstConfigParamStructOutput[]],
    DstConfigSetEventObject
>

export type DstConfigSetEventFilter = TypedEventFilter<DstConfigSetEvent>

export interface GasServiceSetEventObject {
    gasService: string
}
export type GasServiceSetEvent = TypedEvent<[string], GasServiceSetEventObject>

export type GasServiceSetEventFilter = TypedEventFilter<GasServiceSetEvent>

export interface NativeGasFeeMultiplierBpsSetEventObject {
    multiplierBps: number
}
export type NativeGasFeeMultiplierBpsSetEvent = TypedEvent<[number], NativeGasFeeMultiplierBpsSetEventObject>

export type NativeGasFeeMultiplierBpsSetEventFilter = TypedEventFilter<NativeGasFeeMultiplierBpsSetEvent>

export interface PriceFeedSetEventObject {
    priceFeed: string
}
export type PriceFeedSetEvent = TypedEvent<[string], PriceFeedSetEventObject>

export type PriceFeedSetEventFilter = TypedEventFilter<PriceFeedSetEvent>

export interface TokenWithdrawnEventObject {
    token: string
    to: string
    amount: BigNumber
}
export type TokenWithdrawnEvent = TypedEvent<[string, string, BigNumber], TokenWithdrawnEventObject>

export type TokenWithdrawnEventFilter = TypedEventFilter<TokenWithdrawnEvent>

export interface IAxelarDVNAdapterFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IAxelarDVNAdapterFeeLibInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        getFee(
            _params: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { totalFee: BigNumber }>

        getFeeOnSend(
            _params: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _payload: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            _sendLib: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    getFee(
        _params: IAxelarDVNAdapterFeeLib.ParamStruct,
        _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
        _options: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getFeeOnSend(
        _params: IAxelarDVNAdapterFeeLib.ParamStruct,
        _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
        _payload: PromiseOrValue<BytesLike>,
        _options: PromiseOrValue<BytesLike>,
        _sendLib: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        getFee(
            _params: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getFeeOnSend(
            _params: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _payload: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            _sendLib: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>
    }

    filters: {
        'DstConfigSet(tuple[])'(params?: null): DstConfigSetEventFilter
        DstConfigSet(params?: null): DstConfigSetEventFilter

        'GasServiceSet(address)'(gasService?: null): GasServiceSetEventFilter
        GasServiceSet(gasService?: null): GasServiceSetEventFilter

        'NativeGasFeeMultiplierBpsSet(uint16)'(multiplierBps?: null): NativeGasFeeMultiplierBpsSetEventFilter
        NativeGasFeeMultiplierBpsSet(multiplierBps?: null): NativeGasFeeMultiplierBpsSetEventFilter

        'PriceFeedSet(address)'(priceFeed?: null): PriceFeedSetEventFilter
        PriceFeedSet(priceFeed?: null): PriceFeedSetEventFilter

        'TokenWithdrawn(address,address,uint256)'(token?: null, to?: null, amount?: null): TokenWithdrawnEventFilter
        TokenWithdrawn(token?: null, to?: null, amount?: null): TokenWithdrawnEventFilter
    }

    estimateGas: {
        getFee(
            _params: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getFeeOnSend(
            _params: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _payload: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            _sendLib: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        getFee(
            _params: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getFeeOnSend(
            _params: IAxelarDVNAdapterFeeLib.ParamStruct,
            _dstConfig: IAxelarDVNAdapter.DstConfigStruct,
            _payload: PromiseOrValue<BytesLike>,
            _options: PromiseOrValue<BytesLike>,
            _sendLib: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
