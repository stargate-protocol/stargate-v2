/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../../common'

export declare namespace ICCIPDVNAdapterFeeLib {
    export type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        floorMarginUSD: PromiseOrValue<BigNumberish>
    }

    export type DstConfigParamStructOutput = [number, BigNumber] & {
        dstEid: number
        floorMarginUSD: BigNumber
    }

    export type ParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        confirmations: PromiseOrValue<BigNumberish>
        sender: PromiseOrValue<string>
        defaultMultiplierBps: PromiseOrValue<BigNumberish>
    }

    export type ParamStructOutput = [number, BigNumber, string, number] & {
        dstEid: number
        confirmations: BigNumber
        sender: string
        defaultMultiplierBps: number
    }
}

export declare namespace ICCIPDVNAdapter {
    export type DstConfigStruct = {
        chainSelector: PromiseOrValue<BigNumberish>
        multiplierBps: PromiseOrValue<BigNumberish>
        peer: PromiseOrValue<BytesLike>
        gas: PromiseOrValue<BigNumberish>
    }

    export type DstConfigStructOutput = [BigNumber, number, string, BigNumber] & {
        chainSelector: BigNumber
        multiplierBps: number
        peer: string
        gas: BigNumber
    }
}

export declare namespace Client {
    export type EVMTokenAmountStruct = {
        token: PromiseOrValue<string>
        amount: PromiseOrValue<BigNumberish>
    }

    export type EVMTokenAmountStructOutput = [string, BigNumber] & {
        token: string
        amount: BigNumber
    }

    export type EVM2AnyMessageStruct = {
        receiver: PromiseOrValue<BytesLike>
        data: PromiseOrValue<BytesLike>
        tokenAmounts: Client.EVMTokenAmountStruct[]
        feeToken: PromiseOrValue<string>
        extraArgs: PromiseOrValue<BytesLike>
    }

    export type EVM2AnyMessageStructOutput = [string, string, Client.EVMTokenAmountStructOutput[], string, string] & {
        receiver: string
        data: string
        tokenAmounts: Client.EVMTokenAmountStructOutput[]
        feeToken: string
        extraArgs: string
    }
}

export interface ICCIPDVNAdapterFeeLibInterface extends utils.Interface {
    functions: {
        'getFee((uint32,uint64,address,uint16),(uint64,uint16,bytes,uint256),(bytes,bytes,(address,uint256)[],address,bytes),bytes,address)': FunctionFragment
        'getFeeOnSend((uint32,uint64,address,uint16),(uint64,uint16,bytes,uint256),(bytes,bytes,(address,uint256)[],address,bytes),bytes,address)': FunctionFragment
    }

    getFunction(nameOrSignatureOrTopic: 'getFee' | 'getFeeOnSend'): FunctionFragment

    encodeFunctionData(
        functionFragment: 'getFee',
        values: [
            ICCIPDVNAdapterFeeLib.ParamStruct,
            ICCIPDVNAdapter.DstConfigStruct,
            Client.EVM2AnyMessageStruct,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<string>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getFeeOnSend',
        values: [
            ICCIPDVNAdapterFeeLib.ParamStruct,
            ICCIPDVNAdapter.DstConfigStruct,
            Client.EVM2AnyMessageStruct,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<string>,
        ]
    ): string

    decodeFunctionResult(functionFragment: 'getFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFeeOnSend', data: BytesLike): Result

    events: {
        'DstConfigSet(tuple[])': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'DstConfigSet'): EventFragment
}

export interface DstConfigSetEventObject {
    params: ICCIPDVNAdapterFeeLib.DstConfigParamStructOutput[]
}
export type DstConfigSetEvent = TypedEvent<
    [ICCIPDVNAdapterFeeLib.DstConfigParamStructOutput[]],
    DstConfigSetEventObject
>

export type DstConfigSetEventFilter = TypedEventFilter<DstConfigSetEvent>

export interface ICCIPDVNAdapterFeeLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: ICCIPDVNAdapterFeeLibInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        getFee(
            _params: ICCIPDVNAdapterFeeLib.ParamStruct,
            _dstConfig: ICCIPDVNAdapter.DstConfigStruct,
            _message: Client.EVM2AnyMessageStruct,
            _options: PromiseOrValue<BytesLike>,
            _router: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { totalFee: BigNumber }>

        getFeeOnSend(
            _params: ICCIPDVNAdapterFeeLib.ParamStruct,
            _dstConfig: ICCIPDVNAdapter.DstConfigStruct,
            _message: Client.EVM2AnyMessageStruct,
            _options: PromiseOrValue<BytesLike>,
            _router: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    getFee(
        _params: ICCIPDVNAdapterFeeLib.ParamStruct,
        _dstConfig: ICCIPDVNAdapter.DstConfigStruct,
        _message: Client.EVM2AnyMessageStruct,
        _options: PromiseOrValue<BytesLike>,
        _router: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getFeeOnSend(
        _params: ICCIPDVNAdapterFeeLib.ParamStruct,
        _dstConfig: ICCIPDVNAdapter.DstConfigStruct,
        _message: Client.EVM2AnyMessageStruct,
        _options: PromiseOrValue<BytesLike>,
        _router: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        getFee(
            _params: ICCIPDVNAdapterFeeLib.ParamStruct,
            _dstConfig: ICCIPDVNAdapter.DstConfigStruct,
            _message: Client.EVM2AnyMessageStruct,
            _options: PromiseOrValue<BytesLike>,
            _router: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getFeeOnSend(
            _params: ICCIPDVNAdapterFeeLib.ParamStruct,
            _dstConfig: ICCIPDVNAdapter.DstConfigStruct,
            _message: Client.EVM2AnyMessageStruct,
            _options: PromiseOrValue<BytesLike>,
            _router: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[BigNumber, BigNumber] & { ccipFee: BigNumber; totalFee: BigNumber }>
    }

    filters: {
        'DstConfigSet(tuple[])'(params?: null): DstConfigSetEventFilter
        DstConfigSet(params?: null): DstConfigSetEventFilter
    }

    estimateGas: {
        getFee(
            _params: ICCIPDVNAdapterFeeLib.ParamStruct,
            _dstConfig: ICCIPDVNAdapter.DstConfigStruct,
            _message: Client.EVM2AnyMessageStruct,
            _options: PromiseOrValue<BytesLike>,
            _router: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getFeeOnSend(
            _params: ICCIPDVNAdapterFeeLib.ParamStruct,
            _dstConfig: ICCIPDVNAdapter.DstConfigStruct,
            _message: Client.EVM2AnyMessageStruct,
            _options: PromiseOrValue<BytesLike>,
            _router: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        getFee(
            _params: ICCIPDVNAdapterFeeLib.ParamStruct,
            _dstConfig: ICCIPDVNAdapter.DstConfigStruct,
            _message: Client.EVM2AnyMessageStruct,
            _options: PromiseOrValue<BytesLike>,
            _router: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getFeeOnSend(
            _params: ICCIPDVNAdapterFeeLib.ParamStruct,
            _dstConfig: ICCIPDVNAdapter.DstConfigStruct,
            _message: Client.EVM2AnyMessageStruct,
            _options: PromiseOrValue<BytesLike>,
            _router: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
