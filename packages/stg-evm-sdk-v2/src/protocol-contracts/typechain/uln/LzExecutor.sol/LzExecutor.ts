/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export type OriginStruct = {
    srcEid: PromiseOrValue<BigNumberish>
    sender: PromiseOrValue<BytesLike>
    nonce: PromiseOrValue<BigNumberish>
}

export type OriginStructOutput = [number, string, BigNumber] & {
    srcEid: number
    sender: string
    nonce: BigNumber
}

export type LzReceiveParamStruct = {
    origin: OriginStruct
    receiver: PromiseOrValue<string>
    guid: PromiseOrValue<BytesLike>
    message: PromiseOrValue<BytesLike>
    extraData: PromiseOrValue<BytesLike>
    gas: PromiseOrValue<BigNumberish>
    value: PromiseOrValue<BigNumberish>
}

export type LzReceiveParamStructOutput = [OriginStructOutput, string, string, string, string, BigNumber, BigNumber] & {
    origin: OriginStructOutput
    receiver: string
    guid: string
    message: string
    extraData: string
    gas: BigNumber
    value: BigNumber
}

export type NativeDropParamStruct = {
    _receiver: PromiseOrValue<string>
    _amount: PromiseOrValue<BigNumberish>
}

export type NativeDropParamStructOutput = [string, BigNumber] & {
    _receiver: string
    _amount: BigNumber
}

export interface LzExecutorInterface extends utils.Interface {
    functions: {
        'EMPTY_PAYLOAD_HASH()': FunctionFragment
        'NIL_PAYLOAD_HASH()': FunctionFragment
        'commitAndExecute(address,((uint32,bytes32,uint64),address,bytes32,bytes,bytes,uint256,uint256),(address,uint256)[])': FunctionFragment
        'endpoint()': FunctionFragment
        'executable((uint32,bytes32,uint64),address)': FunctionFragment
        'initializable((uint32,bytes32,uint64),address)': FunctionFragment
        'initialize(address,address,address)': FunctionFragment
        'localEid()': FunctionFragment
        'owner()': FunctionFragment
        'receiveLibToView(address)': FunctionFragment
        'receiveUln302()': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'setReceiveLibView(address,address)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'verifiable((uint32,bytes32,uint64),address,address,bytes32)': FunctionFragment
        'withdrawNative(address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'EMPTY_PAYLOAD_HASH'
            | 'NIL_PAYLOAD_HASH'
            | 'commitAndExecute'
            | 'endpoint'
            | 'executable'
            | 'initializable'
            | 'initialize'
            | 'localEid'
            | 'owner'
            | 'receiveLibToView'
            | 'receiveUln302'
            | 'renounceOwnership'
            | 'setReceiveLibView'
            | 'transferOwnership'
            | 'verifiable'
            | 'withdrawNative'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'EMPTY_PAYLOAD_HASH', values?: undefined): string
    encodeFunctionData(functionFragment: 'NIL_PAYLOAD_HASH', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'commitAndExecute',
        values: [PromiseOrValue<string>, LzReceiveParamStruct, NativeDropParamStruct[]]
    ): string
    encodeFunctionData(functionFragment: 'endpoint', values?: undefined): string
    encodeFunctionData(functionFragment: 'executable', values: [OriginStruct, PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'initializable', values: [OriginStruct, PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'initialize',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'localEid', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'receiveLibToView', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'receiveUln302', values?: undefined): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'setReceiveLibView',
        values: [PromiseOrValue<string>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'verifiable',
        values: [OriginStruct, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawNative',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'EMPTY_PAYLOAD_HASH', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'NIL_PAYLOAD_HASH', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'commitAndExecute', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'endpoint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'executable', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initializable', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'localEid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'receiveLibToView', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'receiveUln302', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setReceiveLibView', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'verifiable', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawNative', data: BytesLike): Result

    events: {
        'Initialized(uint8)': EventFragment
        'NativeWithdrawn(address,uint256)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'ReceiveLibViewSet(address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NativeWithdrawn'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ReceiveLibViewSet'): EventFragment
}

export interface InitializedEventObject {
    version: number
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>

export interface NativeWithdrawnEventObject {
    _to: string
    _amount: BigNumber
}
export type NativeWithdrawnEvent = TypedEvent<[string, BigNumber], NativeWithdrawnEventObject>

export type NativeWithdrawnEventFilter = TypedEventFilter<NativeWithdrawnEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface ReceiveLibViewSetEventObject {
    _receiveLib: string
    _receiveLibView: string
}
export type ReceiveLibViewSetEvent = TypedEvent<[string, string], ReceiveLibViewSetEventObject>

export type ReceiveLibViewSetEventFilter = TypedEventFilter<ReceiveLibViewSetEvent>

export interface LzExecutor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: LzExecutorInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>

        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>

        commitAndExecute(
            _receiveLib: PromiseOrValue<string>,
            _lzReceiveParam: LzReceiveParamStruct,
            _nativeDropParams: NativeDropParamStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        endpoint(overrides?: CallOverrides): Promise<[string]>

        executable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[number]>

        initializable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        initialize(
            _receiveUln302: PromiseOrValue<string>,
            _receiveUln302View: PromiseOrValue<string>,
            _endpoint: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        localEid(overrides?: CallOverrides): Promise<[number]>

        owner(overrides?: CallOverrides): Promise<[string]>

        receiveLibToView(
            receiveLib: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[string] & { receiveLibView: string }>

        receiveUln302(overrides?: CallOverrides): Promise<[string]>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        setReceiveLibView(
            _receiveLib: PromiseOrValue<string>,
            _receiveLibView: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        verifiable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _receiveLib: PromiseOrValue<string>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        withdrawNative(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>

    NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>

    commitAndExecute(
        _receiveLib: PromiseOrValue<string>,
        _lzReceiveParam: LzReceiveParamStruct,
        _nativeDropParams: NativeDropParamStruct[],
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    endpoint(overrides?: CallOverrides): Promise<string>

    executable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>

    initializable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    initialize(
        _receiveUln302: PromiseOrValue<string>,
        _receiveUln302View: PromiseOrValue<string>,
        _endpoint: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    localEid(overrides?: CallOverrides): Promise<number>

    owner(overrides?: CallOverrides): Promise<string>

    receiveLibToView(receiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

    receiveUln302(overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    setReceiveLibView(
        _receiveLib: PromiseOrValue<string>,
        _receiveLibView: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    verifiable(
        _origin: OriginStruct,
        _receiver: PromiseOrValue<string>,
        _receiveLib: PromiseOrValue<string>,
        _payloadHash: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<boolean>

    withdrawNative(
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>

        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>

        commitAndExecute(
            _receiveLib: PromiseOrValue<string>,
            _lzReceiveParam: LzReceiveParamStruct,
            _nativeDropParams: NativeDropParamStruct[],
            overrides?: CallOverrides
        ): Promise<void>

        endpoint(overrides?: CallOverrides): Promise<string>

        executable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<number>

        initializable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        initialize(
            _receiveUln302: PromiseOrValue<string>,
            _receiveUln302View: PromiseOrValue<string>,
            _endpoint: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        localEid(overrides?: CallOverrides): Promise<number>

        owner(overrides?: CallOverrides): Promise<string>

        receiveLibToView(receiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

        receiveUln302(overrides?: CallOverrides): Promise<string>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        setReceiveLibView(
            _receiveLib: PromiseOrValue<string>,
            _receiveLibView: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        verifiable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _receiveLib: PromiseOrValue<string>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<boolean>

        withdrawNative(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'Initialized(uint8)'(version?: null): InitializedEventFilter
        Initialized(version?: null): InitializedEventFilter

        'NativeWithdrawn(address,uint256)'(_to?: null, _amount?: null): NativeWithdrawnEventFilter
        NativeWithdrawn(_to?: null, _amount?: null): NativeWithdrawnEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'ReceiveLibViewSet(address,address)'(_receiveLib?: null, _receiveLibView?: null): ReceiveLibViewSetEventFilter
        ReceiveLibViewSet(_receiveLib?: null, _receiveLibView?: null): ReceiveLibViewSetEventFilter
    }

    estimateGas: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>

        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>

        commitAndExecute(
            _receiveLib: PromiseOrValue<string>,
            _lzReceiveParam: LzReceiveParamStruct,
            _nativeDropParams: NativeDropParamStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        endpoint(overrides?: CallOverrides): Promise<BigNumber>

        executable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        initializable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        initialize(
            _receiveUln302: PromiseOrValue<string>,
            _receiveUln302View: PromiseOrValue<string>,
            _endpoint: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        localEid(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        receiveLibToView(receiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        receiveUln302(overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        setReceiveLibView(
            _receiveLib: PromiseOrValue<string>,
            _receiveLibView: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        verifiable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _receiveLib: PromiseOrValue<string>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        withdrawNative(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

        commitAndExecute(
            _receiveLib: PromiseOrValue<string>,
            _lzReceiveParam: LzReceiveParamStruct,
            _nativeDropParams: NativeDropParamStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>

        executable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        initializable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        initialize(
            _receiveUln302: PromiseOrValue<string>,
            _receiveUln302View: PromiseOrValue<string>,
            _endpoint: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        localEid(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        receiveLibToView(receiveLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        receiveUln302(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        setReceiveLibView(
            _receiveLib: PromiseOrValue<string>,
            _receiveLibView: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        verifiable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _receiveLib: PromiseOrValue<string>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        withdrawNative(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
