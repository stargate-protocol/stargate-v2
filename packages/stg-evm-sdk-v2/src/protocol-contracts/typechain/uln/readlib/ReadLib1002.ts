/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export type ReadLibConfigStruct = {
    executor: PromiseOrValue<string>
    requiredDVNCount: PromiseOrValue<BigNumberish>
    optionalDVNCount: PromiseOrValue<BigNumberish>
    optionalDVNThreshold: PromiseOrValue<BigNumberish>
    requiredDVNs: PromiseOrValue<string>[]
    optionalDVNs: PromiseOrValue<string>[]
}

export type ReadLibConfigStructOutput = [string, number, number, number, string[], string[]] & {
    executor: string
    requiredDVNCount: number
    optionalDVNCount: number
    optionalDVNThreshold: number
    requiredDVNs: string[]
    optionalDVNs: string[]
}

export type SetDefaultReadLibConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>
    config: ReadLibConfigStruct
}

export type SetDefaultReadLibConfigParamStructOutput = [number, ReadLibConfigStructOutput] & {
    eid: number
    config: ReadLibConfigStructOutput
}

export type PacketStruct = {
    nonce: PromiseOrValue<BigNumberish>
    srcEid: PromiseOrValue<BigNumberish>
    sender: PromiseOrValue<string>
    dstEid: PromiseOrValue<BigNumberish>
    receiver: PromiseOrValue<BytesLike>
    guid: PromiseOrValue<BytesLike>
    message: PromiseOrValue<BytesLike>
}

export type PacketStructOutput = [BigNumber, number, string, number, string, string, string] & {
    nonce: BigNumber
    srcEid: number
    sender: string
    dstEid: number
    receiver: string
    guid: string
    message: string
}

export type MessagingFeeStruct = {
    nativeFee: PromiseOrValue<BigNumberish>
    lzTokenFee: PromiseOrValue<BigNumberish>
}

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
    nativeFee: BigNumber
    lzTokenFee: BigNumber
}

export type SetConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>
    configType: PromiseOrValue<BigNumberish>
    config: PromiseOrValue<BytesLike>
}

export type SetConfigParamStructOutput = [number, number, string] & {
    eid: number
    configType: number
    config: string
}

export interface ReadLib1002Interface extends utils.Interface {
    functions: {
        'cmdHashLookup(address,uint32,uint64)': FunctionFragment
        'commitVerification(bytes,bytes32,bytes32)': FunctionFragment
        'fees(address)': FunctionFragment
        'getAppReadLibConfig(address,uint32)': FunctionFragment
        'getConfig(uint32,address,uint32)': FunctionFragment
        'getReadLibConfig(address,uint32)': FunctionFragment
        'getTreasuryAndNativeFeeCap()': FunctionFragment
        'hashLookup(bytes32,bytes32,address)': FunctionFragment
        'isSupportedEid(uint32)': FunctionFragment
        'messageLibType()': FunctionFragment
        'owner()': FunctionFragment
        'quote((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)': FunctionFragment
        'setConfig(address,(uint32,uint32,bytes)[])': FunctionFragment
        'setDefaultReadLibConfigs((uint32,(address,uint8,uint8,uint8,address[],address[]))[])': FunctionFragment
        'setTreasury(address)': FunctionFragment
        'setTreasuryNativeFeeCap(uint256)': FunctionFragment
        'supportsInterface(bytes4)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'verifiable((address,uint8,uint8,uint8,address[],address[]),bytes32,bytes32,bytes32)': FunctionFragment
        'verify(bytes,bytes32,bytes32)': FunctionFragment
        'version()': FunctionFragment
        'withdrawFee(address,uint256)': FunctionFragment
        'withdrawLzTokenFee(address,address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'cmdHashLookup'
            | 'commitVerification'
            | 'fees'
            | 'getAppReadLibConfig'
            | 'getConfig'
            | 'getReadLibConfig'
            | 'getTreasuryAndNativeFeeCap'
            | 'hashLookup'
            | 'isSupportedEid'
            | 'messageLibType'
            | 'owner'
            | 'quote'
            | 'renounceOwnership'
            | 'send'
            | 'setConfig'
            | 'setDefaultReadLibConfigs'
            | 'setTreasury'
            | 'setTreasuryNativeFeeCap'
            | 'supportsInterface'
            | 'transferOwnership'
            | 'verifiable'
            | 'verify'
            | 'version'
            | 'withdrawFee'
            | 'withdrawLzTokenFee'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'cmdHashLookup',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'commitVerification',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(functionFragment: 'fees', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'getAppReadLibConfig',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getConfig',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getReadLibConfig',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'getTreasuryAndNativeFeeCap', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'hashLookup',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'isSupportedEid', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'messageLibType', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'quote',
        values: [PacketStruct, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'send',
        values: [PacketStruct, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(functionFragment: 'setConfig', values: [PromiseOrValue<string>, SetConfigParamStruct[]]): string
    encodeFunctionData(
        functionFragment: 'setDefaultReadLibConfigs',
        values: [SetDefaultReadLibConfigParamStruct[]]
    ): string
    encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'setTreasuryNativeFeeCap', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'verifiable',
        values: [ReadLibConfigStruct, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'verify',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(functionFragment: 'version', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'withdrawFee',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawLzTokenFee',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'cmdHashLookup', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'commitVerification', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'fees', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getAppReadLibConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getReadLibConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getTreasuryAndNativeFeeCap', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'hashLookup', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isSupportedEid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'messageLibType', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultReadLibConfigs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setTreasuryNativeFeeCap', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'verifiable', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawLzTokenFee', data: BytesLike): Result

    events: {
        'DVNFeePaid(address[],address[],uint256[])': EventFragment
        'DefaultReadLibConfigsSet(tuple[])': EventFragment
        'ExecutorFeePaid(address,uint256)': EventFragment
        'LzTokenFeeWithdrawn(address,address,uint256)': EventFragment
        'NativeFeeWithdrawn(address,address,uint256)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'PayloadVerified(address,bytes,bytes32,bytes32)': EventFragment
        'ReadLibConfigSet(address,uint32,tuple)': EventFragment
        'TreasuryNativeFeeCapSet(uint256)': EventFragment
        'TreasurySet(address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'DVNFeePaid'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DefaultReadLibConfigsSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ExecutorFeePaid'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LzTokenFeeWithdrawn'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NativeFeeWithdrawn'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PayloadVerified'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ReadLibConfigSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TreasuryNativeFeeCapSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'TreasurySet'): EventFragment
}

export interface DVNFeePaidEventObject {
    requiredDVNs: string[]
    optionalDVNs: string[]
    fees: BigNumber[]
}
export type DVNFeePaidEvent = TypedEvent<[string[], string[], BigNumber[]], DVNFeePaidEventObject>

export type DVNFeePaidEventFilter = TypedEventFilter<DVNFeePaidEvent>

export interface DefaultReadLibConfigsSetEventObject {
    params: SetDefaultReadLibConfigParamStructOutput[]
}
export type DefaultReadLibConfigsSetEvent = TypedEvent<
    [SetDefaultReadLibConfigParamStructOutput[]],
    DefaultReadLibConfigsSetEventObject
>

export type DefaultReadLibConfigsSetEventFilter = TypedEventFilter<DefaultReadLibConfigsSetEvent>

export interface ExecutorFeePaidEventObject {
    executor: string
    fee: BigNumber
}
export type ExecutorFeePaidEvent = TypedEvent<[string, BigNumber], ExecutorFeePaidEventObject>

export type ExecutorFeePaidEventFilter = TypedEventFilter<ExecutorFeePaidEvent>

export interface LzTokenFeeWithdrawnEventObject {
    lzToken: string
    receiver: string
    amount: BigNumber
}
export type LzTokenFeeWithdrawnEvent = TypedEvent<[string, string, BigNumber], LzTokenFeeWithdrawnEventObject>

export type LzTokenFeeWithdrawnEventFilter = TypedEventFilter<LzTokenFeeWithdrawnEvent>

export interface NativeFeeWithdrawnEventObject {
    worker: string
    receiver: string
    amount: BigNumber
}
export type NativeFeeWithdrawnEvent = TypedEvent<[string, string, BigNumber], NativeFeeWithdrawnEventObject>

export type NativeFeeWithdrawnEventFilter = TypedEventFilter<NativeFeeWithdrawnEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PayloadVerifiedEventObject {
    dvn: string
    header: string
    cmdHash: string
    payloadHash: string
}
export type PayloadVerifiedEvent = TypedEvent<[string, string, string, string], PayloadVerifiedEventObject>

export type PayloadVerifiedEventFilter = TypedEventFilter<PayloadVerifiedEvent>

export interface ReadLibConfigSetEventObject {
    oapp: string
    eid: number
    config: ReadLibConfigStructOutput
}
export type ReadLibConfigSetEvent = TypedEvent<[string, number, ReadLibConfigStructOutput], ReadLibConfigSetEventObject>

export type ReadLibConfigSetEventFilter = TypedEventFilter<ReadLibConfigSetEvent>

export interface TreasuryNativeFeeCapSetEventObject {
    newTreasuryNativeFeeCap: BigNumber
}
export type TreasuryNativeFeeCapSetEvent = TypedEvent<[BigNumber], TreasuryNativeFeeCapSetEventObject>

export type TreasuryNativeFeeCapSetEventFilter = TypedEventFilter<TreasuryNativeFeeCapSetEvent>

export interface TreasurySetEventObject {
    treasury: string
}
export type TreasurySetEvent = TypedEvent<[string], TreasurySetEventObject>

export type TreasurySetEventFilter = TypedEventFilter<TreasurySetEvent>

export interface ReadLib1002 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: ReadLib1002Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        cmdHashLookup(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            nonce: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string] & { cmdHash: string }>

        commitVerification(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber] & { fee: BigNumber }>

        getAppReadLibConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[ReadLibConfigStructOutput]>

        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string]>

        getReadLibConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[ReadLibConfigStructOutput] & { rtnConfig: ReadLibConfigStructOutput }>

        getTreasuryAndNativeFeeCap(overrides?: CallOverrides): Promise<[string, BigNumber]>

        hashLookup(
            headerHash: PromiseOrValue<BytesLike>,
            cmdHash: PromiseOrValue<BytesLike>,
            dvn: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[string] & { payloadHash: string }>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>

        messageLibType(overrides?: CallOverrides): Promise<[number]>

        owner(overrides?: CallOverrides): Promise<[string]>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput]>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDefaultReadLibConfigs(
            _params: SetDefaultReadLibConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        verifiable(
            _config: ReadLibConfigStruct,
            _headerHash: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        verify(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    cmdHashLookup(
        oapp: PromiseOrValue<string>,
        eid: PromiseOrValue<BigNumberish>,
        nonce: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>

    commitVerification(
        _packetHeader: PromiseOrValue<BytesLike>,
        _cmdHash: PromiseOrValue<BytesLike>,
        _payloadHash: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    getAppReadLibConfig(
        _oapp: PromiseOrValue<string>,
        _remoteEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<ReadLibConfigStructOutput>

    getConfig(
        _eid: PromiseOrValue<BigNumberish>,
        _oapp: PromiseOrValue<string>,
        _configType: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>

    getReadLibConfig(
        _oapp: PromiseOrValue<string>,
        _remoteEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<ReadLibConfigStructOutput>

    getTreasuryAndNativeFeeCap(overrides?: CallOverrides): Promise<[string, BigNumber]>

    hashLookup(
        headerHash: PromiseOrValue<BytesLike>,
        cmdHash: PromiseOrValue<BytesLike>,
        dvn: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<string>

    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

    messageLibType(overrides?: CallOverrides): Promise<number>

    owner(overrides?: CallOverrides): Promise<string>

    quote(
        _packet: PacketStruct,
        _options: PromiseOrValue<BytesLike>,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    send(
        _packet: PacketStruct,
        _options: PromiseOrValue<BytesLike>,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setConfig(
        _oapp: PromiseOrValue<string>,
        _params: SetConfigParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDefaultReadLibConfigs(
        _params: SetDefaultReadLibConfigParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTreasury(
        _treasury: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTreasuryNativeFeeCap(
        _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    verifiable(
        _config: ReadLibConfigStruct,
        _headerHash: PromiseOrValue<BytesLike>,
        _cmdHash: PromiseOrValue<BytesLike>,
        _payloadHash: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<boolean>

    verify(
        _packetHeader: PromiseOrValue<BytesLike>,
        _cmdHash: PromiseOrValue<BytesLike>,
        _payloadHash: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    version(overrides?: CallOverrides): Promise<
        [BigNumber, number, number] & {
            major: BigNumber
            minor: number
            endpointVersion: number
        }
    >

    withdrawFee(
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawLzTokenFee(
        _lzToken: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        cmdHashLookup(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            nonce: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>

        commitVerification(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        getAppReadLibConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<ReadLibConfigStructOutput>

        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>

        getReadLibConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<ReadLibConfigStructOutput>

        getTreasuryAndNativeFeeCap(overrides?: CallOverrides): Promise<[string, BigNumber]>

        hashLookup(
            headerHash: PromiseOrValue<BytesLike>,
            cmdHash: PromiseOrValue<BytesLike>,
            dvn: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<string>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

        messageLibType(overrides?: CallOverrides): Promise<number>

        owner(overrides?: CallOverrides): Promise<string>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<MessagingFeeStructOutput>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput, string]>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: CallOverrides
        ): Promise<void>

        setDefaultReadLibConfigs(
            _params: SetDefaultReadLibConfigParamStruct[],
            overrides?: CallOverrides
        ): Promise<void>

        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        verifiable(
            _config: ReadLibConfigStruct,
            _headerHash: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<boolean>

        verify(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'DVNFeePaid(address[],address[],uint256[])'(
            requiredDVNs?: null,
            optionalDVNs?: null,
            fees?: null
        ): DVNFeePaidEventFilter
        DVNFeePaid(requiredDVNs?: null, optionalDVNs?: null, fees?: null): DVNFeePaidEventFilter

        'DefaultReadLibConfigsSet(tuple[])'(params?: null): DefaultReadLibConfigsSetEventFilter
        DefaultReadLibConfigsSet(params?: null): DefaultReadLibConfigsSetEventFilter

        'ExecutorFeePaid(address,uint256)'(executor?: null, fee?: null): ExecutorFeePaidEventFilter
        ExecutorFeePaid(executor?: null, fee?: null): ExecutorFeePaidEventFilter

        'LzTokenFeeWithdrawn(address,address,uint256)'(
            lzToken?: null,
            receiver?: null,
            amount?: null
        ): LzTokenFeeWithdrawnEventFilter
        LzTokenFeeWithdrawn(lzToken?: null, receiver?: null, amount?: null): LzTokenFeeWithdrawnEventFilter

        'NativeFeeWithdrawn(address,address,uint256)'(
            worker?: null,
            receiver?: null,
            amount?: null
        ): NativeFeeWithdrawnEventFilter
        NativeFeeWithdrawn(worker?: null, receiver?: null, amount?: null): NativeFeeWithdrawnEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'PayloadVerified(address,bytes,bytes32,bytes32)'(
            dvn?: null,
            header?: null,
            cmdHash?: null,
            payloadHash?: null
        ): PayloadVerifiedEventFilter
        PayloadVerified(dvn?: null, header?: null, cmdHash?: null, payloadHash?: null): PayloadVerifiedEventFilter

        'ReadLibConfigSet(address,uint32,tuple)'(oapp?: null, eid?: null, config?: null): ReadLibConfigSetEventFilter
        ReadLibConfigSet(oapp?: null, eid?: null, config?: null): ReadLibConfigSetEventFilter

        'TreasuryNativeFeeCapSet(uint256)'(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter
        TreasuryNativeFeeCapSet(newTreasuryNativeFeeCap?: null): TreasuryNativeFeeCapSetEventFilter

        'TreasurySet(address)'(treasury?: null): TreasurySetEventFilter
        TreasurySet(treasury?: null): TreasurySetEventFilter
    }

    estimateGas: {
        cmdHashLookup(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            nonce: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        commitVerification(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        getAppReadLibConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getReadLibConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getTreasuryAndNativeFeeCap(overrides?: CallOverrides): Promise<BigNumber>

        hashLookup(
            headerHash: PromiseOrValue<BytesLike>,
            cmdHash: PromiseOrValue<BytesLike>,
            dvn: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        messageLibType(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDefaultReadLibConfigs(
            _params: SetDefaultReadLibConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        supportsInterface(_interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        verifiable(
            _config: ReadLibConfigStruct,
            _headerHash: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        verify(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        version(overrides?: CallOverrides): Promise<BigNumber>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        cmdHashLookup(
            oapp: PromiseOrValue<string>,
            eid: PromiseOrValue<BigNumberish>,
            nonce: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        commitVerification(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        fees(worker: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        getAppReadLibConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getReadLibConfig(
            _oapp: PromiseOrValue<string>,
            _remoteEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getTreasuryAndNativeFeeCap(overrides?: CallOverrides): Promise<PopulatedTransaction>

        hashLookup(
            headerHash: PromiseOrValue<BytesLike>,
            cmdHash: PromiseOrValue<BytesLike>,
            dvn: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDefaultReadLibConfigs(
            _params: SetDefaultReadLibConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setTreasuryNativeFeeCap(
            _newTreasuryNativeFeeCap: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        supportsInterface(
            _interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        verifiable(
            _config: ReadLibConfigStruct,
            _headerHash: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        verify(
            _packetHeader: PromiseOrValue<BytesLike>,
            _cmdHash: PromiseOrValue<BytesLike>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
