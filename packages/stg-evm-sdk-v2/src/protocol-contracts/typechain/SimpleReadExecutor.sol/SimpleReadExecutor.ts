/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type OriginStruct = {
    srcEid: PromiseOrValue<BigNumberish>
    sender: PromiseOrValue<BytesLike>
    nonce: PromiseOrValue<BigNumberish>
}

export type OriginStructOutput = [number, string, BigNumber] & {
    srcEid: number
    sender: string
    nonce: BigNumber
}

export type ExecutionParamsStruct = {
    receiver: PromiseOrValue<string>
    origin: OriginStruct
    guid: PromiseOrValue<BytesLike>
    message: PromiseOrValue<BytesLike>
    extraData: PromiseOrValue<BytesLike>
    gasLimit: PromiseOrValue<BigNumberish>
}

export type ExecutionParamsStructOutput = [string, OriginStructOutput, string, string, string, BigNumber] & {
    receiver: string
    origin: OriginStructOutput
    guid: string
    message: string
    extraData: string
    gasLimit: BigNumber
}

export interface SimpleReadExecutorInterface extends utils.Interface {
    functions: {
        'assignJob(address,bytes)': FunctionFragment
        'configGas(uint128,uint128)': FunctionFragment
        'endpoint()': FunctionFragment
        'execute((address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))': FunctionFragment
        'gasPerByte()': FunctionFragment
        'gasPrice()': FunctionFragment
        'getFee(address,bytes)': FunctionFragment
        'mustExecute((address,(uint32,bytes32,uint64),bytes32,bytes,bytes,uint256))': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'assignJob'
            | 'configGas'
            | 'endpoint'
            | 'execute'
            | 'gasPerByte'
            | 'gasPrice'
            | 'getFee'
            | 'mustExecute'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'assignJob',
        values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'configGas',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'endpoint', values?: undefined): string
    encodeFunctionData(functionFragment: 'execute', values: [ExecutionParamsStruct]): string
    encodeFunctionData(functionFragment: 'gasPerByte', values?: undefined): string
    encodeFunctionData(functionFragment: 'gasPrice', values?: undefined): string
    encodeFunctionData(functionFragment: 'getFee', values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]): string
    encodeFunctionData(functionFragment: 'mustExecute', values: [ExecutionParamsStruct]): string

    decodeFunctionResult(functionFragment: 'assignJob', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'configGas', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'endpoint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'gasPerByte', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'gasPrice', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'mustExecute', data: BytesLike): Result

    events: {}
}

export interface SimpleReadExecutor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: SimpleReadExecutorInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        assignJob(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        configGas(
            _gasPerByte: PromiseOrValue<BigNumberish>,
            _gasPrice: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        endpoint(overrides?: CallOverrides): Promise<[string]>

        execute(
            _executionParams: ExecutionParamsStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        gasPerByte(overrides?: CallOverrides): Promise<[BigNumber]>

        gasPrice(overrides?: CallOverrides): Promise<[BigNumber]>

        getFee(
            arg0: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        mustExecute(
            _executionParams: ExecutionParamsStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    assignJob(
        _sender: PromiseOrValue<string>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    configGas(
        _gasPerByte: PromiseOrValue<BigNumberish>,
        _gasPrice: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    endpoint(overrides?: CallOverrides): Promise<string>

    execute(
        _executionParams: ExecutionParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    gasPerByte(overrides?: CallOverrides): Promise<BigNumber>

    gasPrice(overrides?: CallOverrides): Promise<BigNumber>

    getFee(
        arg0: PromiseOrValue<string>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    mustExecute(
        _executionParams: ExecutionParamsStruct,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        assignJob(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        configGas(
            _gasPerByte: PromiseOrValue<BigNumberish>,
            _gasPrice: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        endpoint(overrides?: CallOverrides): Promise<string>

        execute(_executionParams: ExecutionParamsStruct, overrides?: CallOverrides): Promise<void>

        gasPerByte(overrides?: CallOverrides): Promise<BigNumber>

        gasPrice(overrides?: CallOverrides): Promise<BigNumber>

        getFee(
            arg0: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        mustExecute(_executionParams: ExecutionParamsStruct, overrides?: CallOverrides): Promise<void>
    }

    filters: {}

    estimateGas: {
        assignJob(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        configGas(
            _gasPerByte: PromiseOrValue<BigNumberish>,
            _gasPrice: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        endpoint(overrides?: CallOverrides): Promise<BigNumber>

        execute(
            _executionParams: ExecutionParamsStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        gasPerByte(overrides?: CallOverrides): Promise<BigNumber>

        gasPrice(overrides?: CallOverrides): Promise<BigNumber>

        getFee(
            arg0: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        mustExecute(
            _executionParams: ExecutionParamsStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        assignJob(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        configGas(
            _gasPerByte: PromiseOrValue<BigNumberish>,
            _gasPrice: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>

        execute(
            _executionParams: ExecutionParamsStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        gasPerByte(overrides?: CallOverrides): Promise<PopulatedTransaction>

        gasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getFee(
            arg0: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        mustExecute(
            _executionParams: ExecutionParamsStruct,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
