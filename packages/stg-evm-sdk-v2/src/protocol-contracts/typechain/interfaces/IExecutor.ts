/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type OriginStruct = {
    srcEid: PromiseOrValue<BigNumberish>
    sender: PromiseOrValue<BytesLike>
    nonce: PromiseOrValue<BigNumberish>
}

export type OriginStructOutput = [number, string, BigNumber] & {
    srcEid: number
    sender: string
    nonce: BigNumber
}

export declare namespace IExecutor {
    export type DstConfigParamStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        lzReceiveBaseGas: PromiseOrValue<BigNumberish>
        lzComposeBaseGas: PromiseOrValue<BigNumberish>
        multiplierBps: PromiseOrValue<BigNumberish>
        floorMarginUSD: PromiseOrValue<BigNumberish>
        nativeCap: PromiseOrValue<BigNumberish>
    }

    export type DstConfigParamStructOutput = [number, BigNumber, BigNumber, number, BigNumber, BigNumber] & {
        dstEid: number
        lzReceiveBaseGas: BigNumber
        lzComposeBaseGas: BigNumber
        multiplierBps: number
        floorMarginUSD: BigNumber
        nativeCap: BigNumber
    }

    export type NativeDropParamsStruct = {
        receiver: PromiseOrValue<string>
        amount: PromiseOrValue<BigNumberish>
    }

    export type NativeDropParamsStructOutput = [string, BigNumber] & {
        receiver: string
        amount: BigNumber
    }
}

export interface IExecutorInterface extends utils.Interface {
    functions: {
        'assignJob(uint32,address,uint256,bytes)': FunctionFragment
        'assignJob(address,bytes)': FunctionFragment
        'defaultMultiplierBps()': FunctionFragment
        'dstConfig(uint32)': FunctionFragment
        'getFee(uint32,address,uint256,bytes)': FunctionFragment
        'getFee(address,bytes)': FunctionFragment
        'getSupportedOptionTypes(uint32)': FunctionFragment
        'priceFeed()': FunctionFragment
        'setDefaultMultiplierBps(uint16)': FunctionFragment
        'setPriceFeed(address)': FunctionFragment
        'setSupportedOptionTypes(uint32,uint8[])': FunctionFragment
        'withdrawFee(address,address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'assignJob(uint32,address,uint256,bytes)'
            | 'assignJob(address,bytes)'
            | 'defaultMultiplierBps'
            | 'dstConfig'
            | 'getFee(uint32,address,uint256,bytes)'
            | 'getFee(address,bytes)'
            | 'getSupportedOptionTypes'
            | 'priceFeed'
            | 'setDefaultMultiplierBps'
            | 'setPriceFeed'
            | 'setSupportedOptionTypes'
            | 'withdrawFee'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'assignJob(uint32,address,uint256,bytes)',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'assignJob(address,bytes)',
        values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(functionFragment: 'defaultMultiplierBps', values?: undefined): string
    encodeFunctionData(functionFragment: 'dstConfig', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(
        functionFragment: 'getFee(uint32,address,uint256,bytes)',
        values: [
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getFee(address,bytes)',
        values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(functionFragment: 'getSupportedOptionTypes', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string
    encodeFunctionData(functionFragment: 'setDefaultMultiplierBps', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'setPriceFeed', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'setSupportedOptionTypes',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawFee',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'assignJob(uint32,address,uint256,bytes)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'assignJob(address,bytes)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'defaultMultiplierBps', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'dstConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFee(uint32,address,uint256,bytes)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFee(address,bytes)', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getSupportedOptionTypes', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultMultiplierBps', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setPriceFeed', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setSupportedOptionTypes', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result

    events: {
        'DstConfigSet(tuple[])': EventFragment
        'NativeDropApplied(tuple,uint32,address,tuple[],bool[])': EventFragment
        'SetDefaultMultiplierBps(uint16)': EventFragment
        'SetPriceFeed(address)': EventFragment
        'SetSupportedOptionTypes(uint32,uint8[])': EventFragment
        'SetWorkerLib(address)': EventFragment
        'Withdraw(address,address,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'DstConfigSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'NativeDropApplied'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetDefaultMultiplierBps'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetPriceFeed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetSupportedOptionTypes'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetWorkerLib'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
}

export interface DstConfigSetEventObject {
    params: IExecutor.DstConfigParamStructOutput[]
}
export type DstConfigSetEvent = TypedEvent<[IExecutor.DstConfigParamStructOutput[]], DstConfigSetEventObject>

export type DstConfigSetEventFilter = TypedEventFilter<DstConfigSetEvent>

export interface NativeDropAppliedEventObject {
    origin: OriginStructOutput
    dstEid: number
    oapp: string
    params: IExecutor.NativeDropParamsStructOutput[]
    success: boolean[]
}
export type NativeDropAppliedEvent = TypedEvent<
    [OriginStructOutput, number, string, IExecutor.NativeDropParamsStructOutput[], boolean[]],
    NativeDropAppliedEventObject
>

export type NativeDropAppliedEventFilter = TypedEventFilter<NativeDropAppliedEvent>

export interface SetDefaultMultiplierBpsEventObject {
    multiplierBps: number
}
export type SetDefaultMultiplierBpsEvent = TypedEvent<[number], SetDefaultMultiplierBpsEventObject>

export type SetDefaultMultiplierBpsEventFilter = TypedEventFilter<SetDefaultMultiplierBpsEvent>

export interface SetPriceFeedEventObject {
    priceFeed: string
}
export type SetPriceFeedEvent = TypedEvent<[string], SetPriceFeedEventObject>

export type SetPriceFeedEventFilter = TypedEventFilter<SetPriceFeedEvent>

export interface SetSupportedOptionTypesEventObject {
    dstEid: number
    optionTypes: number[]
}
export type SetSupportedOptionTypesEvent = TypedEvent<[number, number[]], SetSupportedOptionTypesEventObject>

export type SetSupportedOptionTypesEventFilter = TypedEventFilter<SetSupportedOptionTypesEvent>

export interface SetWorkerLibEventObject {
    workerLib: string
}
export type SetWorkerLibEvent = TypedEvent<[string], SetWorkerLibEventObject>

export type SetWorkerLibEventFilter = TypedEventFilter<SetWorkerLibEvent>

export interface WithdrawEventObject {
    lib: string
    to: string
    amount: BigNumber
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber], WithdrawEventObject>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface IExecutor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IExecutorInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        'assignJob(uint32,address,uint256,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _calldataSize: PromiseOrValue<BigNumberish>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        'assignJob(address,bytes)'(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>

        dstConfig(
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber, number, BigNumber, BigNumber, BigNumber]>

        'getFee(uint32,address,uint256,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _calldataSize: PromiseOrValue<BigNumberish>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { price: BigNumber }>

        'getFee(address,bytes)'(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { fee: BigNumber }>

        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>

        priceFeed(overrides?: CallOverrides): Promise<[string]>

        setDefaultMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    'assignJob(uint32,address,uint256,bytes)'(
        _dstEid: PromiseOrValue<BigNumberish>,
        _sender: PromiseOrValue<string>,
        _calldataSize: PromiseOrValue<BigNumberish>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'assignJob(address,bytes)'(
        _sender: PromiseOrValue<string>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>

    dstConfig(
        _dstEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<[BigNumber, number, BigNumber, BigNumber, BigNumber]>

    'getFee(uint32,address,uint256,bytes)'(
        _dstEid: PromiseOrValue<BigNumberish>,
        _sender: PromiseOrValue<string>,
        _calldataSize: PromiseOrValue<BigNumberish>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    'getFee(address,bytes)'(
        _sender: PromiseOrValue<string>,
        _options: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>

    priceFeed(overrides?: CallOverrides): Promise<string>

    setDefaultMultiplierBps(
        _multiplierBps: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPriceFeed(
        _priceFeed: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setSupportedOptionTypes(
        _eid: PromiseOrValue<BigNumberish>,
        _optionTypes: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawFee(
        _lib: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        'assignJob(uint32,address,uint256,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _calldataSize: PromiseOrValue<BigNumberish>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'assignJob(address,bytes)'(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>

        dstConfig(
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber, number, BigNumber, BigNumber, BigNumber]>

        'getFee(uint32,address,uint256,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _calldataSize: PromiseOrValue<BigNumberish>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee(address,bytes)'(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>

        priceFeed(overrides?: CallOverrides): Promise<string>

        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<void>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'DstConfigSet(tuple[])'(params?: null): DstConfigSetEventFilter
        DstConfigSet(params?: null): DstConfigSetEventFilter

        'NativeDropApplied(tuple,uint32,address,tuple[],bool[])'(
            origin?: null,
            dstEid?: null,
            oapp?: null,
            params?: null,
            success?: null
        ): NativeDropAppliedEventFilter
        NativeDropApplied(
            origin?: null,
            dstEid?: null,
            oapp?: null,
            params?: null,
            success?: null
        ): NativeDropAppliedEventFilter

        'SetDefaultMultiplierBps(uint16)'(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter

        'SetPriceFeed(address)'(priceFeed?: null): SetPriceFeedEventFilter
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter

        'SetSupportedOptionTypes(uint32,uint8[])'(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter

        'SetWorkerLib(address)'(workerLib?: null): SetWorkerLibEventFilter
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter

        'Withdraw(address,address,uint256)'(lib?: null, to?: null, amount?: null): WithdrawEventFilter
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter
    }

    estimateGas: {
        'assignJob(uint32,address,uint256,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _calldataSize: PromiseOrValue<BigNumberish>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        'assignJob(address,bytes)'(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>

        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        'getFee(uint32,address,uint256,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _calldataSize: PromiseOrValue<BigNumberish>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        'getFee(address,bytes)'(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        priceFeed(overrides?: CallOverrides): Promise<BigNumber>

        setDefaultMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        'assignJob(uint32,address,uint256,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _calldataSize: PromiseOrValue<BigNumberish>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        'assignJob(address,bytes)'(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>

        dstConfig(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        'getFee(uint32,address,uint256,bytes)'(
            _dstEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<string>,
            _calldataSize: PromiseOrValue<BigNumberish>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        'getFee(address,bytes)'(
            _sender: PromiseOrValue<string>,
            _options: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>

        setDefaultMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
