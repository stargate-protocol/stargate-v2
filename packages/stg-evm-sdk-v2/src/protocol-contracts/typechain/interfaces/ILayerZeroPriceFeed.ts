/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export declare namespace ILayerZeroPriceFeed {
    export type PriceStruct = {
        priceRatio: PromiseOrValue<BigNumberish>
        gasPriceInUnit: PromiseOrValue<BigNumberish>
        gasPerByte: PromiseOrValue<BigNumberish>
    }

    export type PriceStructOutput = [BigNumber, BigNumber, number] & {
        priceRatio: BigNumber
        gasPriceInUnit: BigNumber
        gasPerByte: number
    }
}

export interface ILayerZeroPriceFeedInterface extends utils.Interface {
    functions: {
        'estimateFeeByEid(uint32,uint256,uint256)': FunctionFragment
        'estimateFeeOnSend(uint32,uint256,uint256)': FunctionFragment
        'getFee(uint32,uint256,uint256)': FunctionFragment
        'getPrice(uint32)': FunctionFragment
        'getPriceRatioDenominator()': FunctionFragment
        'nativeTokenPriceUSD()': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'estimateFeeByEid'
            | 'estimateFeeOnSend'
            | 'getFee'
            | 'getPrice'
            | 'getPriceRatioDenominator'
            | 'nativeTokenPriceUSD'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'estimateFeeByEid',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'estimateFeeOnSend',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'getFee',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'getPrice', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'getPriceRatioDenominator', values?: undefined): string
    encodeFunctionData(functionFragment: 'nativeTokenPriceUSD', values?: undefined): string

    decodeFunctionResult(functionFragment: 'estimateFeeByEid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'estimateFeeOnSend', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getPrice', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getPriceRatioDenominator', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nativeTokenPriceUSD', data: BytesLike): Result

    events: {}
}

export interface ILayerZeroPriceFeed extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: ILayerZeroPriceFeedInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        estimateFeeByEid(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
                fee: BigNumber
                priceRatio: BigNumber
                priceRatioDenominator: BigNumber
                nativePriceUSD: BigNumber
            }
        >

        estimateFeeOnSend(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        getFee(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        getPrice(
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[ILayerZeroPriceFeed.PriceStructOutput]>

        getPriceRatioDenominator(overrides?: CallOverrides): Promise<[BigNumber]>

        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<[BigNumber]>
    }

    estimateFeeByEid(
        _dstEid: PromiseOrValue<BigNumberish>,
        _callDataSize: PromiseOrValue<BigNumberish>,
        _gas: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
            fee: BigNumber
            priceRatio: BigNumber
            priceRatioDenominator: BigNumber
            nativePriceUSD: BigNumber
        }
    >

    estimateFeeOnSend(
        _dstEid: PromiseOrValue<BigNumberish>,
        _callDataSize: PromiseOrValue<BigNumberish>,
        _gas: PromiseOrValue<BigNumberish>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getFee(
        _dstEid: PromiseOrValue<BigNumberish>,
        _callDataSize: PromiseOrValue<BigNumberish>,
        _gas: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    getPrice(
        _dstEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<ILayerZeroPriceFeed.PriceStructOutput>

    getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>

    nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>

    callStatic: {
        estimateFeeByEid(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
                fee: BigNumber
                priceRatio: BigNumber
                priceRatioDenominator: BigNumber
                nativePriceUSD: BigNumber
            }
        >

        estimateFeeOnSend(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
                fee: BigNumber
                priceRatio: BigNumber
                priceRatioDenominator: BigNumber
                nativePriceUSD: BigNumber
            }
        >

        getFee(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getPrice(
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<ILayerZeroPriceFeed.PriceStructOutput>

        getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>

        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>
    }

    filters: {}

    estimateGas: {
        estimateFeeByEid(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        estimateFeeOnSend(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        getFee(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        getPriceRatioDenominator(overrides?: CallOverrides): Promise<BigNumber>

        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        estimateFeeByEid(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        estimateFeeOnSend(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        getFee(
            _dstEid: PromiseOrValue<BigNumberish>,
            _callDataSize: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getPrice(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        getPriceRatioDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>

        nativeTokenPriceUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
