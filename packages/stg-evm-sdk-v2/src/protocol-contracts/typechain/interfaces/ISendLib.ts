/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type PacketStruct = {
    nonce: PromiseOrValue<BigNumberish>
    srcEid: PromiseOrValue<BigNumberish>
    sender: PromiseOrValue<string>
    dstEid: PromiseOrValue<BigNumberish>
    receiver: PromiseOrValue<BytesLike>
    guid: PromiseOrValue<BytesLike>
    message: PromiseOrValue<BytesLike>
}

export type PacketStructOutput = [BigNumber, number, string, number, string, string, string] & {
    nonce: BigNumber
    srcEid: number
    sender: string
    dstEid: number
    receiver: string
    guid: string
    message: string
}

export type MessagingFeeStruct = {
    nativeFee: PromiseOrValue<BigNumberish>
    lzTokenFee: PromiseOrValue<BigNumberish>
}

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
    nativeFee: BigNumber
    lzTokenFee: BigNumber
}

export type SetConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>
    configType: PromiseOrValue<BigNumberish>
    config: PromiseOrValue<BytesLike>
}

export type SetConfigParamStructOutput = [number, number, string] & {
    eid: number
    configType: number
    config: string
}

export interface ISendLibInterface extends utils.Interface {
    functions: {
        'getConfig(uint32,address,uint32)': FunctionFragment
        'isSupportedEid(uint32)': FunctionFragment
        'messageLibType()': FunctionFragment
        'quote((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)': FunctionFragment
        'send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)': FunctionFragment
        'setConfig(address,(uint32,uint32,bytes)[])': FunctionFragment
        'setTreasury(address)': FunctionFragment
        'supportsInterface(bytes4)': FunctionFragment
        'version()': FunctionFragment
        'withdrawFee(address,uint256)': FunctionFragment
        'withdrawLzTokenFee(address,address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'getConfig'
            | 'isSupportedEid'
            | 'messageLibType'
            | 'quote'
            | 'send'
            | 'setConfig'
            | 'setTreasury'
            | 'supportsInterface'
            | 'version'
            | 'withdrawFee'
            | 'withdrawLzTokenFee'
    ): FunctionFragment

    encodeFunctionData(
        functionFragment: 'getConfig',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'isSupportedEid', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'messageLibType', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'quote',
        values: [PacketStruct, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(
        functionFragment: 'send',
        values: [PacketStruct, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(functionFragment: 'setConfig', values: [PromiseOrValue<string>, SetConfigParamStruct[]]): string
    encodeFunctionData(functionFragment: 'setTreasury', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(functionFragment: 'version', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'withdrawFee',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawLzTokenFee',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isSupportedEid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'messageLibType', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setTreasury', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawLzTokenFee', data: BytesLike): Result

    events: {}
}

export interface ISendLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: ISendLibInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string] & { config: string }>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>

        messageLibType(overrides?: CallOverrides): Promise<[number]>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput]>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _config: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    getConfig(
        _eid: PromiseOrValue<BigNumberish>,
        _oapp: PromiseOrValue<string>,
        _configType: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>

    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

    messageLibType(overrides?: CallOverrides): Promise<number>

    quote(
        _packet: PacketStruct,
        _options: PromiseOrValue<BytesLike>,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>

    send(
        _packet: PacketStruct,
        _options: PromiseOrValue<BytesLike>,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setConfig(
        _oapp: PromiseOrValue<string>,
        _config: SetConfigParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setTreasury(
        _treasury: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    version(overrides?: CallOverrides): Promise<
        [BigNumber, number, number] & {
            major: BigNumber
            minor: number
            endpointVersion: number
        }
    >

    withdrawFee(
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawLzTokenFee(
        _lzToken: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

        messageLibType(overrides?: CallOverrides): Promise<number>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<MessagingFeeStructOutput>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput, string] & { encodedPacket: string }>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _config: SetConfigParamStruct[],
            overrides?: CallOverrides
        ): Promise<void>

        setTreasury(_treasury: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {}

    estimateGas: {
        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        messageLibType(overrides?: CallOverrides): Promise<BigNumber>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _config: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

        version(overrides?: CallOverrides): Promise<BigNumber>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        getConfig(
            _eid: PromiseOrValue<BigNumberish>,
            _oapp: PromiseOrValue<string>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>

        quote(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _config: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setTreasury(
            _treasury: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawLzTokenFee(
            _lzToken: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
