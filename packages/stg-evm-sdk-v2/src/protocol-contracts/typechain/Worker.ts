/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export interface WorkerInterface extends utils.Interface {
    functions: {
        'DEFAULT_ADMIN_ROLE()': FunctionFragment
        'allowlistSize()': FunctionFragment
        'defaultMultiplierBps()': FunctionFragment
        'getRoleAdmin(bytes32)': FunctionFragment
        'getSupportedOptionTypes(uint32)': FunctionFragment
        'grantRole(bytes32,address)': FunctionFragment
        'hasAcl(address)': FunctionFragment
        'hasRole(bytes32,address)': FunctionFragment
        'paused()': FunctionFragment
        'priceFeed()': FunctionFragment
        'renounceRole(bytes32,address)': FunctionFragment
        'revokeRole(bytes32,address)': FunctionFragment
        'setDefaultMultiplierBps(uint16)': FunctionFragment
        'setPaused(bool)': FunctionFragment
        'setPriceFeed(address)': FunctionFragment
        'setSupportedOptionTypes(uint32,uint8[])': FunctionFragment
        'setWorkerFeeLib(address)': FunctionFragment
        'supportsInterface(bytes4)': FunctionFragment
        'withdrawFee(address,address,uint256)': FunctionFragment
        'withdrawToken(address,address,uint256)': FunctionFragment
        'workerFeeLib()': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'DEFAULT_ADMIN_ROLE'
            | 'allowlistSize'
            | 'defaultMultiplierBps'
            | 'getRoleAdmin'
            | 'getSupportedOptionTypes'
            | 'grantRole'
            | 'hasAcl'
            | 'hasRole'
            | 'paused'
            | 'priceFeed'
            | 'renounceRole'
            | 'revokeRole'
            | 'setDefaultMultiplierBps'
            | 'setPaused'
            | 'setPriceFeed'
            | 'setSupportedOptionTypes'
            | 'setWorkerFeeLib'
            | 'supportsInterface'
            | 'withdrawFee'
            | 'withdrawToken'
            | 'workerFeeLib'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string
    encodeFunctionData(functionFragment: 'allowlistSize', values?: undefined): string
    encodeFunctionData(functionFragment: 'defaultMultiplierBps', values?: undefined): string
    encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(functionFragment: 'getSupportedOptionTypes', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(
        functionFragment: 'grantRole',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'hasAcl', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'paused', values?: undefined): string
    encodeFunctionData(functionFragment: 'priceFeed', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'renounceRole',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'revokeRole',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'setDefaultMultiplierBps', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'setPaused', values: [PromiseOrValue<boolean>]): string
    encodeFunctionData(functionFragment: 'setPriceFeed', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'setSupportedOptionTypes',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
    ): string
    encodeFunctionData(functionFragment: 'setWorkerFeeLib', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(
        functionFragment: 'withdrawFee',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawToken',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'workerFeeLib', values?: undefined): string

    decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'allowlistSize', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'defaultMultiplierBps', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getSupportedOptionTypes', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'hasAcl', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'priceFeed', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultMultiplierBps', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setPaused', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setPriceFeed', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setSupportedOptionTypes', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setWorkerFeeLib', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'workerFeeLib', data: BytesLike): Result

    events: {
        'Paused(address)': EventFragment
        'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
        'RoleGranted(bytes32,address,address)': EventFragment
        'RoleRevoked(bytes32,address,address)': EventFragment
        'SetDefaultMultiplierBps(uint16)': EventFragment
        'SetPriceFeed(address)': EventFragment
        'SetSupportedOptionTypes(uint32,uint8[])': EventFragment
        'SetWorkerLib(address)': EventFragment
        'Unpaused(address)': EventFragment
        'Withdraw(address,address,uint256)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetDefaultMultiplierBps'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetPriceFeed'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetSupportedOptionTypes'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SetWorkerLib'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
}

export interface PausedEventObject {
    account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface RoleAdminChangedEventObject {
    role: string
    previousAdminRole: string
    newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
    role: string
    account: string
    sender: string
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
    role: string
    account: string
    sender: string
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface SetDefaultMultiplierBpsEventObject {
    multiplierBps: number
}
export type SetDefaultMultiplierBpsEvent = TypedEvent<[number], SetDefaultMultiplierBpsEventObject>

export type SetDefaultMultiplierBpsEventFilter = TypedEventFilter<SetDefaultMultiplierBpsEvent>

export interface SetPriceFeedEventObject {
    priceFeed: string
}
export type SetPriceFeedEvent = TypedEvent<[string], SetPriceFeedEventObject>

export type SetPriceFeedEventFilter = TypedEventFilter<SetPriceFeedEvent>

export interface SetSupportedOptionTypesEventObject {
    dstEid: number
    optionTypes: number[]
}
export type SetSupportedOptionTypesEvent = TypedEvent<[number, number[]], SetSupportedOptionTypesEventObject>

export type SetSupportedOptionTypesEventFilter = TypedEventFilter<SetSupportedOptionTypesEvent>

export interface SetWorkerLibEventObject {
    workerLib: string
}
export type SetWorkerLibEvent = TypedEvent<[string], SetWorkerLibEventObject>

export type SetWorkerLibEventFilter = TypedEventFilter<SetWorkerLibEvent>

export interface UnpausedEventObject {
    account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface WithdrawEventObject {
    lib: string
    to: string
    amount: BigNumber
}
export type WithdrawEvent = TypedEvent<[string, string, BigNumber], WithdrawEventObject>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface Worker extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: WorkerInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

        allowlistSize(overrides?: CallOverrides): Promise<[BigNumber]>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<[number]>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>

        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number[]]>

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        paused(overrides?: CallOverrides): Promise<[boolean]>

        priceFeed(overrides?: CallOverrides): Promise<[string]>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[void]>

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDefaultMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setPaused(
            _paused: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setWorkerFeeLib(
            _workerFeeLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        workerFeeLib(overrides?: CallOverrides): Promise<[string]>
    }

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    allowlistSize(overrides?: CallOverrides): Promise<BigNumber>

    defaultMultiplierBps(overrides?: CallOverrides): Promise<number>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

    getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>

    grantRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    hasRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<boolean>

    paused(overrides?: CallOverrides): Promise<boolean>

    priceFeed(overrides?: CallOverrides): Promise<string>

    renounceRole(
        arg0: PromiseOrValue<BytesLike>,
        arg1: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<void>

    revokeRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDefaultMultiplierBps(
        _multiplierBps: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPaused(
        _paused: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPriceFeed(
        _priceFeed: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setSupportedOptionTypes(
        _eid: PromiseOrValue<BigNumberish>,
        _optionTypes: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setWorkerFeeLib(
        _workerFeeLib: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    withdrawFee(
        _lib: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawToken(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    workerFeeLib(overrides?: CallOverrides): Promise<string>

    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<number>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number[]>

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        paused(overrides?: CallOverrides): Promise<boolean>

        priceFeed(overrides?: CallOverrides): Promise<string>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        setDefaultMultiplierBps(_multiplierBps: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<void>

        setPaused(_paused: PromiseOrValue<boolean>, overrides?: CallOverrides): Promise<void>

        setPriceFeed(_priceFeed: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: CallOverrides
        ): Promise<void>

        setWorkerFeeLib(_workerFeeLib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        workerFeeLib(overrides?: CallOverrides): Promise<string>
    }

    filters: {
        'Paused(address)'(account?: null): PausedEventFilter
        Paused(account?: null): PausedEventFilter

        'RoleAdminChanged(bytes32,bytes32,bytes32)'(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null
        ): RoleAdminChangedEventFilter
        RoleAdminChanged(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null
        ): RoleAdminChangedEventFilter

        'RoleGranted(bytes32,address,address)'(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleGrantedEventFilter
        RoleGranted(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleGrantedEventFilter

        'RoleRevoked(bytes32,address,address)'(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleRevokedEventFilter
        RoleRevoked(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleRevokedEventFilter

        'SetDefaultMultiplierBps(uint16)'(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter
        SetDefaultMultiplierBps(multiplierBps?: null): SetDefaultMultiplierBpsEventFilter

        'SetPriceFeed(address)'(priceFeed?: null): SetPriceFeedEventFilter
        SetPriceFeed(priceFeed?: null): SetPriceFeedEventFilter

        'SetSupportedOptionTypes(uint32,uint8[])'(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter
        SetSupportedOptionTypes(dstEid?: null, optionTypes?: null): SetSupportedOptionTypesEventFilter

        'SetWorkerLib(address)'(workerLib?: null): SetWorkerLibEventFilter
        SetWorkerLib(workerLib?: null): SetWorkerLibEventFilter

        'Unpaused(address)'(account?: null): UnpausedEventFilter
        Unpaused(account?: null): UnpausedEventFilter

        'Withdraw(address,address,uint256)'(lib?: null, to?: null, amount?: null): WithdrawEventFilter
        Withdraw(lib?: null, to?: null, amount?: null): WithdrawEventFilter
    }

    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

        allowlistSize(overrides?: CallOverrides): Promise<BigNumber>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<BigNumber>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

        getSupportedOptionTypes(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        paused(overrides?: CallOverrides): Promise<BigNumber>

        priceFeed(overrides?: CallOverrides): Promise<BigNumber>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDefaultMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setPaused(
            _paused: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setWorkerFeeLib(
            _workerFeeLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        workerFeeLib(overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

        allowlistSize(overrides?: CallOverrides): Promise<PopulatedTransaction>

        defaultMultiplierBps(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        getSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        grantRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        hasAcl(_sender: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

        priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        revokeRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDefaultMultiplierBps(
            _multiplierBps: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setPaused(
            _paused: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setPriceFeed(
            _priceFeed: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setSupportedOptionTypes(
            _eid: PromiseOrValue<BigNumberish>,
            _optionTypes: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setWorkerFeeLib(
            _workerFeeLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        withdrawFee(
            _lib: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        workerFeeLib(overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
