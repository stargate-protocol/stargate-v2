/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export declare namespace MultiCall {
    export type CallStruct = {
        target: PromiseOrValue<string>
        data: PromiseOrValue<BytesLike>
        gasLimit: PromiseOrValue<BigNumberish>
        value: PromiseOrValue<BigNumberish>
        revertOnError: PromiseOrValue<boolean>
    }

    export type CallStructOutput = [string, string, BigNumber, BigNumber, boolean] & {
        target: string
        data: string
        gasLimit: BigNumber
        value: BigNumber
        revertOnError: boolean
    }
}

export interface MultiCallInterface extends utils.Interface {
    functions: {
        'multiCall((address,bytes,uint256,uint256,bool)[])': FunctionFragment
    }

    getFunction(nameOrSignatureOrTopic: 'multiCall'): FunctionFragment

    encodeFunctionData(functionFragment: 'multiCall', values: [MultiCall.CallStruct[]]): string

    decodeFunctionResult(functionFragment: 'multiCall', data: BytesLike): Result

    events: {}
}

export interface MultiCall extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: MultiCallInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        multiCall(
            _calls: MultiCall.CallStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    multiCall(
        _calls: MultiCall.CallStruct[],
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        multiCall(
            _calls: MultiCall.CallStruct[],
            overrides?: CallOverrides
        ): Promise<[boolean[], string[]] & { successes: boolean[]; results: string[] }>
    }

    filters: {}

    estimateGas: {
        multiCall(
            _calls: MultiCall.CallStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        multiCall(
            _calls: MultiCall.CallStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
