/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export declare namespace MultiCall {
    export type CallStruct = {
        target: PromiseOrValue<string>
        data: PromiseOrValue<BytesLike>
        gasLimit: PromiseOrValue<BigNumberish>
        value: PromiseOrValue<BigNumberish>
        revertOnError: PromiseOrValue<boolean>
    }

    export type CallStructOutput = [string, string, BigNumber, BigNumber, boolean] & {
        target: string
        data: string
        gasLimit: BigNumber
        value: BigNumber
        revertOnError: boolean
    }
}

export interface EssenceDVNWrapperInterface extends utils.Interface {
    functions: {
        'DEFAULT_ADMIN_ROLE()': FunctionFragment
        'adminCount()': FunctionFragment
        'getRoleAdmin(bytes32)': FunctionFragment
        'grantRole(bytes32,address)': FunctionFragment
        'hasRole(bytes32,address)': FunctionFragment
        'multiCall((address,bytes,uint256,uint256,bool)[])': FunctionFragment
        'renounceRole(bytes32,address)': FunctionFragment
        'revokeRole(bytes32,address)': FunctionFragment
        'supportsInterface(bytes4)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'DEFAULT_ADMIN_ROLE'
            | 'adminCount'
            | 'getRoleAdmin'
            | 'grantRole'
            | 'hasRole'
            | 'multiCall'
            | 'renounceRole'
            | 'revokeRole'
            | 'supportsInterface'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string
    encodeFunctionData(functionFragment: 'adminCount', values?: undefined): string
    encodeFunctionData(functionFragment: 'getRoleAdmin', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(
        functionFragment: 'grantRole',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'hasRole', values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'multiCall', values: [MultiCall.CallStruct[]]): string
    encodeFunctionData(
        functionFragment: 'renounceRole',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'revokeRole',
        values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string

    decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'adminCount', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'multiCall', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result

    events: {
        'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
        'RoleGranted(bytes32,address,address)': EventFragment
        'RoleRevoked(bytes32,address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
}

export interface RoleAdminChangedEventObject {
    role: string
    previousAdminRole: string
    newAdminRole: string
}
export type RoleAdminChangedEvent = TypedEvent<[string, string, string], RoleAdminChangedEventObject>

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>

export interface RoleGrantedEventObject {
    role: string
    account: string
    sender: string
}
export type RoleGrantedEvent = TypedEvent<[string, string, string], RoleGrantedEventObject>

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>

export interface RoleRevokedEventObject {
    role: string
    account: string
    sender: string
}
export type RoleRevokedEvent = TypedEvent<[string, string, string], RoleRevokedEventObject>

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>

export interface EssenceDVNWrapper extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: EssenceDVNWrapperInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

        adminCount(overrides?: CallOverrides): Promise<[BigNumber]>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[string]>

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        multiCall(
            _calls: MultiCall.CallStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[void]>

        revokeRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>
    }

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    adminCount(overrides?: CallOverrides): Promise<BigNumber>

    getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

    grantRole(
        _role: PromiseOrValue<BytesLike>,
        _account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    hasRole(
        role: PromiseOrValue<BytesLike>,
        account: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<boolean>

    multiCall(
        _calls: MultiCall.CallStruct[],
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceRole(
        arg0: PromiseOrValue<BytesLike>,
        arg1: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<void>

    revokeRole(
        _role: PromiseOrValue<BytesLike>,
        _account: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    callStatic: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

        adminCount(overrides?: CallOverrides): Promise<BigNumber>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<string>

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        multiCall(
            _calls: MultiCall.CallStruct[],
            overrides?: CallOverrides
        ): Promise<[boolean[], string[]] & { successes: boolean[]; results: string[] }>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        revokeRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>
    }

    filters: {
        'RoleAdminChanged(bytes32,bytes32,bytes32)'(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null
        ): RoleAdminChangedEventFilter
        RoleAdminChanged(
            role?: PromiseOrValue<BytesLike> | null,
            previousAdminRole?: PromiseOrValue<BytesLike> | null,
            newAdminRole?: PromiseOrValue<BytesLike> | null
        ): RoleAdminChangedEventFilter

        'RoleGranted(bytes32,address,address)'(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleGrantedEventFilter
        RoleGranted(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleGrantedEventFilter

        'RoleRevoked(bytes32,address,address)'(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleRevokedEventFilter
        RoleRevoked(
            role?: PromiseOrValue<BytesLike> | null,
            account?: PromiseOrValue<string> | null,
            sender?: PromiseOrValue<string> | null
        ): RoleRevokedEventFilter
    }

    estimateGas: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

        adminCount(overrides?: CallOverrides): Promise<BigNumber>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        multiCall(
            _calls: MultiCall.CallStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        revokeRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

        adminCount(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getRoleAdmin(role: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        grantRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        hasRole(
            role: PromiseOrValue<BytesLike>,
            account: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        multiCall(
            _calls: MultiCall.CallStruct[],
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        renounceRole(
            arg0: PromiseOrValue<BytesLike>,
            arg1: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        revokeRole(
            _role: PromiseOrValue<BytesLike>,
            _account: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>
    }
}
