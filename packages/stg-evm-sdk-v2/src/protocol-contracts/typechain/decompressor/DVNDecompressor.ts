/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type DVNParamStruct = {
    idx: PromiseOrValue<BigNumberish>
    addr: PromiseOrValue<string>
}

export type DVNParamStructOutput = [number, string] & {
    idx: number
    addr: string
}

export type TargetParamStruct = {
    idx: PromiseOrValue<BigNumberish>
    addr: PromiseOrValue<string>
}

export type TargetParamStructOutput = [number, string] & {
    idx: number
    addr: string
}

export interface DVNDecompressorInterface extends utils.Interface {
    functions: {
        'MAX_DICT_LEN()': FunctionFragment
        'RESERVE_DICT_LEN()': FunctionFragment
        'addDVNs((uint16,address)[])': FunctionFragment
        'addTargets((uint8,address)[])': FunctionFragment
        'decompress()': FunctionFragment
        'decompressed()': FunctionFragment
        'dvns(uint16)': FunctionFragment
        'execute(bytes)': FunctionFragment
        'getData(uint256,uint256)': FunctionFragment
        'owner()': FunctionFragment
        'removeDVNs(uint16[])': FunctionFragment
        'removeTargets(uint8[])': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'targets(uint8)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'vid()': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'MAX_DICT_LEN'
            | 'RESERVE_DICT_LEN'
            | 'addDVNs'
            | 'addTargets'
            | 'decompress'
            | 'decompressed'
            | 'dvns'
            | 'execute'
            | 'getData'
            | 'owner'
            | 'removeDVNs'
            | 'removeTargets'
            | 'renounceOwnership'
            | 'targets'
            | 'transferOwnership'
            | 'vid'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'MAX_DICT_LEN', values?: undefined): string
    encodeFunctionData(functionFragment: 'RESERVE_DICT_LEN', values?: undefined): string
    encodeFunctionData(functionFragment: 'addDVNs', values: [DVNParamStruct[]]): string
    encodeFunctionData(functionFragment: 'addTargets', values: [TargetParamStruct[]]): string
    encodeFunctionData(functionFragment: 'decompress', values?: undefined): string
    encodeFunctionData(functionFragment: 'decompressed', values?: undefined): string
    encodeFunctionData(functionFragment: 'dvns', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'execute', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(
        functionFragment: 'getData',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'removeDVNs', values: [PromiseOrValue<BigNumberish>[]]): string
    encodeFunctionData(functionFragment: 'removeTargets', values: [PromiseOrValue<BigNumberish>[]]): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'targets', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'vid', values?: undefined): string

    decodeFunctionResult(functionFragment: 'MAX_DICT_LEN', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'RESERVE_DICT_LEN', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'addDVNs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'addTargets', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'decompress', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'decompressed', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'dvns', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'execute', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getData', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'removeDVNs', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'removeTargets', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'targets', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'vid', data: BytesLike): Result

    events: {
        'OwnershipTransferred(address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface DVNDecompressor extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: DVNDecompressorInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<[BigNumber]>

        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<[BigNumber]>

        addDVNs(
            _dvns: DVNParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        addTargets(
            _targets: TargetParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        decompress(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        decompressed(overrides?: CallOverrides): Promise<[string] & { raw: string }>

        dvns(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & { dvn: string }>

        execute(
            _encoded: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        getData(
            begin: PromiseOrValue<BigNumberish>,
            end: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string[]] & { res: string[] }>

        owner(overrides?: CallOverrides): Promise<[string]>

        removeDVNs(
            _idx: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        removeTargets(
            _idx: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        targets(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & { target: string }>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        vid(overrides?: CallOverrides): Promise<[number]>
    }

    MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>

    RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>

    addDVNs(
        _dvns: DVNParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    addTargets(
        _targets: TargetParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    decompress(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    decompressed(overrides?: CallOverrides): Promise<string>

    dvns(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    execute(
        _encoded: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getData(
        begin: PromiseOrValue<BigNumberish>,
        end: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string[]>

    owner(overrides?: CallOverrides): Promise<string>

    removeDVNs(
        _idx: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    removeTargets(
        _idx: PromiseOrValue<BigNumberish>[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    targets(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    vid(overrides?: CallOverrides): Promise<number>

    callStatic: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>

        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>

        addDVNs(_dvns: DVNParamStruct[], overrides?: CallOverrides): Promise<void>

        addTargets(_targets: TargetParamStruct[], overrides?: CallOverrides): Promise<void>

        decompress(overrides?: CallOverrides): Promise<void>

        decompressed(overrides?: CallOverrides): Promise<string>

        dvns(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

        execute(_encoded: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>

        getData(
            begin: PromiseOrValue<BigNumberish>,
            end: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string[]>

        owner(overrides?: CallOverrides): Promise<string>

        removeDVNs(_idx: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>

        removeTargets(_idx: PromiseOrValue<BigNumberish>[], overrides?: CallOverrides): Promise<void>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        targets(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        vid(overrides?: CallOverrides): Promise<number>
    }

    filters: {
        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
    }

    estimateGas: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>

        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<BigNumber>

        addDVNs(_dvns: DVNParamStruct[], overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        addTargets(
            _targets: TargetParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        decompress(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        decompressed(overrides?: CallOverrides): Promise<BigNumber>

        dvns(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        execute(
            _encoded: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        getData(
            begin: PromiseOrValue<BigNumberish>,
            end: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        removeDVNs(
            _idx: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        removeTargets(
            _idx: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        targets(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        vid(overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        MAX_DICT_LEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

        RESERVE_DICT_LEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

        addDVNs(
            _dvns: DVNParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        addTargets(
            _targets: TargetParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        decompress(overrides?: PayableOverrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        decompressed(overrides?: CallOverrides): Promise<PopulatedTransaction>

        dvns(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        execute(
            _encoded: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        getData(
            begin: PromiseOrValue<BigNumberish>,
            end: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        removeDVNs(
            _idx: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        removeTargets(
            _idx: PromiseOrValue<BigNumberish>[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        targets(index: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        vid(overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
