/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type PacketStruct = {
    nonce: PromiseOrValue<BigNumberish>
    srcEid: PromiseOrValue<BigNumberish>
    sender: PromiseOrValue<string>
    dstEid: PromiseOrValue<BigNumberish>
    receiver: PromiseOrValue<BytesLike>
    guid: PromiseOrValue<BytesLike>
    message: PromiseOrValue<BytesLike>
}

export type PacketStructOutput = [BigNumber, number, string, number, string, string, string] & {
    nonce: BigNumber
    srcEid: number
    sender: string
    dstEid: number
    receiver: string
    guid: string
    message: string
}

export type MessagingFeeStruct = {
    nativeFee: PromiseOrValue<BigNumberish>
    lzTokenFee: PromiseOrValue<BigNumberish>
}

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
    nativeFee: BigNumber
    lzTokenFee: BigNumber
}

export interface SimpleMessageLibInterface extends utils.Interface {
    functions: {
        'PACKET_VERSION()': FunctionFragment
        'defaultOption()': FunctionFragment
        'endpoint()': FunctionFragment
        'isSupportedEid(uint32)': FunctionFragment
        'localEid()': FunctionFragment
        'lzTokenFee()': FunctionFragment
        'messageLibType()': FunctionFragment
        'nativeFee()': FunctionFragment
        'owner()': FunctionFragment
        'quote((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'send((uint64,uint32,address,uint32,bytes32,bytes32,bytes),bytes,bool)': FunctionFragment
        'setDefaultOption(bytes)': FunctionFragment
        'setMessagingFee(uint256,uint256)': FunctionFragment
        'setWhitelistCaller(address)': FunctionFragment
        'supportsInterface(bytes4)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'treasury()': FunctionFragment
        'validatePacket(bytes)': FunctionFragment
        'version()': FunctionFragment
        'whitelistCaller()': FunctionFragment
        'withdrawFee(address,uint256)': FunctionFragment
        'withdrawLzTokenFee(address,uint256)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'PACKET_VERSION'
            | 'defaultOption'
            | 'endpoint'
            | 'isSupportedEid'
            | 'localEid'
            | 'lzTokenFee'
            | 'messageLibType'
            | 'nativeFee'
            | 'owner'
            | 'quote'
            | 'renounceOwnership'
            | 'send'
            | 'setDefaultOption'
            | 'setMessagingFee'
            | 'setWhitelistCaller'
            | 'supportsInterface'
            | 'transferOwnership'
            | 'treasury'
            | 'validatePacket'
            | 'version'
            | 'whitelistCaller'
            | 'withdrawFee'
            | 'withdrawLzTokenFee'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'PACKET_VERSION', values?: undefined): string
    encodeFunctionData(functionFragment: 'defaultOption', values?: undefined): string
    encodeFunctionData(functionFragment: 'endpoint', values?: undefined): string
    encodeFunctionData(functionFragment: 'isSupportedEid', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'localEid', values?: undefined): string
    encodeFunctionData(functionFragment: 'lzTokenFee', values?: undefined): string
    encodeFunctionData(functionFragment: 'messageLibType', values?: undefined): string
    encodeFunctionData(functionFragment: 'nativeFee', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'quote',
        values: [PacketStruct, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'send',
        values: [PacketStruct, PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(functionFragment: 'setDefaultOption', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(
        functionFragment: 'setMessagingFee',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'setWhitelistCaller', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'treasury', values?: undefined): string
    encodeFunctionData(functionFragment: 'validatePacket', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(functionFragment: 'version', values?: undefined): string
    encodeFunctionData(functionFragment: 'whitelistCaller', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'withdrawFee',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'withdrawLzTokenFee',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string

    decodeFunctionResult(functionFragment: 'PACKET_VERSION', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'defaultOption', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'endpoint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isSupportedEid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'localEid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lzTokenFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'messageLibType', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nativeFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultOption', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setMessagingFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setWhitelistCaller', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'treasury', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'validatePacket', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'whitelistCaller', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawFee', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'withdrawLzTokenFee', data: BytesLike): Result

    events: {
        'OwnershipTransferred(address,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
}

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface SimpleMessageLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: SimpleMessageLibInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        PACKET_VERSION(overrides?: CallOverrides): Promise<[number]>

        defaultOption(overrides?: CallOverrides): Promise<[string]>

        endpoint(overrides?: CallOverrides): Promise<[string]>

        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>

        localEid(overrides?: CallOverrides): Promise<[number]>

        lzTokenFee(overrides?: CallOverrides): Promise<[BigNumber]>

        messageLibType(overrides?: CallOverrides): Promise<[number]>

        nativeFee(overrides?: CallOverrides): Promise<[BigNumber]>

        owner(overrides?: CallOverrides): Promise<[string]>

        quote(
            arg0: PacketStruct,
            arg1: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput]>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDefaultOption(
            _defaultOption: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setMessagingFee(
            _nativeFee: PromiseOrValue<BigNumberish>,
            _lzTokenFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setWhitelistCaller(
            _whitelistCaller: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        treasury(overrides?: CallOverrides): Promise<[string]>

        validatePacket(
            packetBytes: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        whitelistCaller(overrides?: CallOverrides): Promise<[string]>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        withdrawLzTokenFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    PACKET_VERSION(overrides?: CallOverrides): Promise<number>

    defaultOption(overrides?: CallOverrides): Promise<string>

    endpoint(overrides?: CallOverrides): Promise<string>

    isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

    localEid(overrides?: CallOverrides): Promise<number>

    lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>

    messageLibType(overrides?: CallOverrides): Promise<number>

    nativeFee(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    quote(
        arg0: PacketStruct,
        arg1: PromiseOrValue<BytesLike>,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    send(
        _packet: PacketStruct,
        _options: PromiseOrValue<BytesLike>,
        _payInLzToken: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDefaultOption(
        _defaultOption: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setMessagingFee(
        _nativeFee: PromiseOrValue<BigNumberish>,
        _lzTokenFee: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setWhitelistCaller(
        _whitelistCaller: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    treasury(overrides?: CallOverrides): Promise<string>

    validatePacket(
        packetBytes: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    version(overrides?: CallOverrides): Promise<
        [BigNumber, number, number] & {
            major: BigNumber
            minor: number
            endpointVersion: number
        }
    >

    whitelistCaller(overrides?: CallOverrides): Promise<string>

    withdrawFee(
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    withdrawLzTokenFee(
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        PACKET_VERSION(overrides?: CallOverrides): Promise<number>

        defaultOption(overrides?: CallOverrides): Promise<string>

        endpoint(overrides?: CallOverrides): Promise<string>

        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

        localEid(overrides?: CallOverrides): Promise<number>

        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>

        messageLibType(overrides?: CallOverrides): Promise<number>

        nativeFee(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<string>

        quote(
            arg0: PacketStruct,
            arg1: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<MessagingFeeStructOutput>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<
            [MessagingFeeStructOutput, string, string] & {
                fee: MessagingFeeStructOutput
                encodedPacket: string
                options: string
            }
        >

        setDefaultOption(_defaultOption: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>

        setMessagingFee(
            _nativeFee: PromiseOrValue<BigNumberish>,
            _lzTokenFee: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        setWhitelistCaller(_whitelistCaller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        treasury(overrides?: CallOverrides): Promise<string>

        validatePacket(packetBytes: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >

        whitelistCaller(overrides?: CallOverrides): Promise<string>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        withdrawLzTokenFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
    }

    estimateGas: {
        PACKET_VERSION(overrides?: CallOverrides): Promise<BigNumber>

        defaultOption(overrides?: CallOverrides): Promise<BigNumber>

        endpoint(overrides?: CallOverrides): Promise<BigNumber>

        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        localEid(overrides?: CallOverrides): Promise<BigNumber>

        lzTokenFee(overrides?: CallOverrides): Promise<BigNumber>

        messageLibType(overrides?: CallOverrides): Promise<BigNumber>

        nativeFee(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        quote(
            arg0: PacketStruct,
            arg1: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDefaultOption(
            _defaultOption: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setMessagingFee(
            _nativeFee: PromiseOrValue<BigNumberish>,
            _lzTokenFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setWhitelistCaller(
            _whitelistCaller: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        treasury(overrides?: CallOverrides): Promise<BigNumber>

        validatePacket(
            packetBytes: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        version(overrides?: CallOverrides): Promise<BigNumber>

        whitelistCaller(overrides?: CallOverrides): Promise<BigNumber>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        withdrawLzTokenFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        PACKET_VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>

        defaultOption(overrides?: CallOverrides): Promise<PopulatedTransaction>

        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>

        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        localEid(overrides?: CallOverrides): Promise<PopulatedTransaction>

        lzTokenFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>

        nativeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        quote(
            arg0: PacketStruct,
            arg1: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        send(
            _packet: PacketStruct,
            _options: PromiseOrValue<BytesLike>,
            _payInLzToken: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDefaultOption(
            _defaultOption: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setMessagingFee(
            _nativeFee: PromiseOrValue<BigNumberish>,
            _lzTokenFee: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setWhitelistCaller(
            _whitelistCaller: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>

        validatePacket(
            packetBytes: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>

        whitelistCaller(overrides?: CallOverrides): Promise<PopulatedTransaction>

        withdrawFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        withdrawLzTokenFee(
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
