/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export interface BlockedMessageLibInterface extends utils.Interface {
    functions: {
        'isSupportedEid(uint32)': FunctionFragment
        'messageLibType()': FunctionFragment
        'supportsInterface(bytes4)': FunctionFragment
        'version()': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic: 'isSupportedEid' | 'messageLibType' | 'supportsInterface' | 'version'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'isSupportedEid', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'messageLibType', values?: undefined): string
    encodeFunctionData(functionFragment: 'supportsInterface', values: [PromiseOrValue<BytesLike>]): string
    encodeFunctionData(functionFragment: 'version', values?: undefined): string

    decodeFunctionResult(functionFragment: 'isSupportedEid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'messageLibType', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result

    events: {}
}

export interface BlockedMessageLib extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: BlockedMessageLibInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>

        messageLibType(overrides?: CallOverrides): Promise<[number]>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<[boolean]>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >
    }

    isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

    messageLibType(overrides?: CallOverrides): Promise<number>

    supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

    version(overrides?: CallOverrides): Promise<
        [BigNumber, number, number] & {
            major: BigNumber
            minor: number
            endpointVersion: number
        }
    >

    callStatic: {
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

        messageLibType(overrides?: CallOverrides): Promise<number>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<boolean>

        version(overrides?: CallOverrides): Promise<
            [BigNumber, number, number] & {
                major: BigNumber
                minor: number
                endpointVersion: number
            }
        >
    }

    filters: {}

    estimateGas: {
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        messageLibType(overrides?: CallOverrides): Promise<BigNumber>

        supportsInterface(interfaceId: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<BigNumber>

        version(overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        isSupportedEid(arg0: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        messageLibType(overrides?: CallOverrides): Promise<PopulatedTransaction>

        supportsInterface(
            interfaceId: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        version(overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
