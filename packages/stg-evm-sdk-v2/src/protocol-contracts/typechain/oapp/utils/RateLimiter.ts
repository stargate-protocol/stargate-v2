/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export declare namespace RateLimiter {
    export type RateLimitConfigStruct = {
        dstEid: PromiseOrValue<BigNumberish>
        limit: PromiseOrValue<BigNumberish>
        window: PromiseOrValue<BigNumberish>
    }

    export type RateLimitConfigStructOutput = [number, BigNumber, BigNumber] & {
        dstEid: number
        limit: BigNumber
        window: BigNumber
    }
}

export interface RateLimiterInterface extends utils.Interface {
    functions: {
        'getAmountCanBeSent(uint32)': FunctionFragment
        'rateLimits(uint32)': FunctionFragment
    }

    getFunction(nameOrSignatureOrTopic: 'getAmountCanBeSent' | 'rateLimits'): FunctionFragment

    encodeFunctionData(functionFragment: 'getAmountCanBeSent', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'rateLimits', values: [PromiseOrValue<BigNumberish>]): string

    decodeFunctionResult(functionFragment: 'getAmountCanBeSent', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'rateLimits', data: BytesLike): Result

    events: {
        'RateLimitsChanged(tuple[])': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'RateLimitsChanged'): EventFragment
}

export interface RateLimitsChangedEventObject {
    rateLimitConfigs: RateLimiter.RateLimitConfigStructOutput[]
}
export type RateLimitsChangedEvent = TypedEvent<
    [RateLimiter.RateLimitConfigStructOutput[]],
    RateLimitsChangedEventObject
>

export type RateLimitsChangedEventFilter = TypedEventFilter<RateLimitsChangedEvent>

export interface RateLimiter extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: RateLimiterInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        getAmountCanBeSent(
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                currentAmountInFlight: BigNumber
                amountCanBeSent: BigNumber
            }
        >

        rateLimits(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
                amountInFlight: BigNumber
                lastUpdated: BigNumber
                limit: BigNumber
                window: BigNumber
            }
        >
    }

    getAmountCanBeSent(
        _dstEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber] & {
            currentAmountInFlight: BigNumber
            amountCanBeSent: BigNumber
        }
    >

    rateLimits(
        dstEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInFlight: BigNumber
            lastUpdated: BigNumber
            limit: BigNumber
            window: BigNumber
        }
    >

    callStatic: {
        getAmountCanBeSent(
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber] & {
                currentAmountInFlight: BigNumber
                amountCanBeSent: BigNumber
            }
        >

        rateLimits(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
                amountInFlight: BigNumber
                lastUpdated: BigNumber
                limit: BigNumber
                window: BigNumber
            }
        >
    }

    filters: {
        'RateLimitsChanged(tuple[])'(rateLimitConfigs?: null): RateLimitsChangedEventFilter
        RateLimitsChanged(rateLimitConfigs?: null): RateLimitsChangedEventFilter
    }

    estimateGas: {
        getAmountCanBeSent(_dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        rateLimits(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>
    }

    populateTransaction: {
        getAmountCanBeSent(
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        rateLimits(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>
    }
}
