/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../../common'

export type EnforcedOptionParamStruct = {
    eid: PromiseOrValue<BigNumberish>
    msgType: PromiseOrValue<BigNumberish>
    options: PromiseOrValue<BytesLike>
}

export type EnforcedOptionParamStructOutput = [number, number, string] & {
    eid: number
    msgType: number
    options: string
}

export interface IOAppOptionsType3Interface extends utils.Interface {
    functions: {
        'combineOptions(uint32,uint16,bytes)': FunctionFragment
        'setEnforcedOptions((uint32,uint16,bytes)[])': FunctionFragment
    }

    getFunction(nameOrSignatureOrTopic: 'combineOptions' | 'setEnforcedOptions'): FunctionFragment

    encodeFunctionData(
        functionFragment: 'combineOptions',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(functionFragment: 'setEnforcedOptions', values: [EnforcedOptionParamStruct[]]): string

    decodeFunctionResult(functionFragment: 'combineOptions', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setEnforcedOptions', data: BytesLike): Result

    events: {
        'EnforcedOptionSet(tuple[])': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'EnforcedOptionSet'): EventFragment
}

export interface EnforcedOptionSetEventObject {
    _enforcedOptions: EnforcedOptionParamStructOutput[]
}
export type EnforcedOptionSetEvent = TypedEvent<[EnforcedOptionParamStructOutput[]], EnforcedOptionSetEventObject>

export type EnforcedOptionSetEventFilter = TypedEventFilter<EnforcedOptionSetEvent>

export interface IOAppOptionsType3 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: IOAppOptionsType3Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        combineOptions(
            _eid: PromiseOrValue<BigNumberish>,
            _msgType: PromiseOrValue<BigNumberish>,
            _extraOptions: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[string] & { options: string }>

        setEnforcedOptions(
            _enforcedOptions: EnforcedOptionParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    combineOptions(
        _eid: PromiseOrValue<BigNumberish>,
        _msgType: PromiseOrValue<BigNumberish>,
        _extraOptions: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<string>

    setEnforcedOptions(
        _enforcedOptions: EnforcedOptionParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        combineOptions(
            _eid: PromiseOrValue<BigNumberish>,
            _msgType: PromiseOrValue<BigNumberish>,
            _extraOptions: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>

        setEnforcedOptions(_enforcedOptions: EnforcedOptionParamStruct[], overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'EnforcedOptionSet(tuple[])'(_enforcedOptions?: null): EnforcedOptionSetEventFilter
        EnforcedOptionSet(_enforcedOptions?: null): EnforcedOptionSetEventFilter
    }

    estimateGas: {
        combineOptions(
            _eid: PromiseOrValue<BigNumberish>,
            _msgType: PromiseOrValue<BigNumberish>,
            _extraOptions: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        setEnforcedOptions(
            _enforcedOptions: EnforcedOptionParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        combineOptions(
            _eid: PromiseOrValue<BigNumberish>,
            _msgType: PromiseOrValue<BigNumberish>,
            _extraOptions: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        setEnforcedOptions(
            _enforcedOptions: EnforcedOptionParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
