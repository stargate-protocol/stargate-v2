/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from '../common'

export type OriginStruct = {
    srcEid: PromiseOrValue<BigNumberish>
    sender: PromiseOrValue<BytesLike>
    nonce: PromiseOrValue<BigNumberish>
}

export type OriginStructOutput = [number, string, BigNumber] & {
    srcEid: number
    sender: string
    nonce: BigNumber
}

export interface OAppReadInterface extends utils.Interface {
    functions: {
        'allowInitializePath((uint32,bytes32,uint64))': FunctionFragment
        'endpoint()': FunctionFragment
        'isComposeMsgSender((uint32,bytes32,uint64),bytes,address)': FunctionFragment
        'lzReceive((uint32,bytes32,uint64),bytes32,bytes,address,bytes)': FunctionFragment
        'nextNonce(uint32,bytes32)': FunctionFragment
        'oAppVersion()': FunctionFragment
        'owner()': FunctionFragment
        'peers(uint32)': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'setDelegate(address)': FunctionFragment
        'setPeer(uint32,bytes32)': FunctionFragment
        'setReadChannel(uint32,bool)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'allowInitializePath'
            | 'endpoint'
            | 'isComposeMsgSender'
            | 'lzReceive'
            | 'nextNonce'
            | 'oAppVersion'
            | 'owner'
            | 'peers'
            | 'renounceOwnership'
            | 'setDelegate'
            | 'setPeer'
            | 'setReadChannel'
            | 'transferOwnership'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'allowInitializePath', values: [OriginStruct]): string
    encodeFunctionData(functionFragment: 'endpoint', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'isComposeMsgSender',
        values: [OriginStruct, PromiseOrValue<BytesLike>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'lzReceive',
        values: [
            OriginStruct,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'nextNonce',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(functionFragment: 'oAppVersion', values?: undefined): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'peers', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'setDelegate', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'setPeer',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'setReadChannel',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
    ): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string

    decodeFunctionResult(functionFragment: 'allowInitializePath', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'endpoint', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isComposeMsgSender', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lzReceive', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nextNonce', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'oAppVersion', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'peers', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDelegate', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setPeer', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setReadChannel', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result

    events: {
        'OwnershipTransferred(address,address)': EventFragment
        'PeerSet(uint32,bytes32)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PeerSet'): EventFragment
}

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PeerSetEventObject {
    eid: number
    peer: string
}
export type PeerSetEvent = TypedEvent<[number, string], PeerSetEventObject>

export type PeerSetEventFilter = TypedEventFilter<PeerSetEvent>

export interface OAppRead extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: OAppReadInterface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        allowInitializePath(origin: OriginStruct, overrides?: CallOverrides): Promise<[boolean]>

        endpoint(overrides?: CallOverrides): Promise<[string]>

        isComposeMsgSender(
            arg0: OriginStruct,
            arg1: PromiseOrValue<BytesLike>,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        lzReceive(
            _origin: OriginStruct,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _executor: PromiseOrValue<string>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        nextNonce(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { nonce: BigNumber }>

        oAppVersion(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber] & {
                senderVersion: BigNumber
                receiverVersion: BigNumber
            }
        >

        owner(overrides?: CallOverrides): Promise<[string]>

        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string] & { peer: string }>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        setDelegate(
            _delegate: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setPeer(
            _eid: PromiseOrValue<BigNumberish>,
            _peer: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setReadChannel(
            _channelId: PromiseOrValue<BigNumberish>,
            _active: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    allowInitializePath(origin: OriginStruct, overrides?: CallOverrides): Promise<boolean>

    endpoint(overrides?: CallOverrides): Promise<string>

    isComposeMsgSender(
        arg0: OriginStruct,
        arg1: PromiseOrValue<BytesLike>,
        _sender: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<boolean>

    lzReceive(
        _origin: OriginStruct,
        _guid: PromiseOrValue<BytesLike>,
        _message: PromiseOrValue<BytesLike>,
        _executor: PromiseOrValue<string>,
        _extraData: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    nextNonce(
        arg0: PromiseOrValue<BigNumberish>,
        arg1: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    oAppVersion(overrides?: CallOverrides): Promise<
        [BigNumber, BigNumber] & {
            senderVersion: BigNumber
            receiverVersion: BigNumber
        }
    >

    owner(overrides?: CallOverrides): Promise<string>

    peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    setDelegate(
        _delegate: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPeer(
        _eid: PromiseOrValue<BigNumberish>,
        _peer: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setReadChannel(
        _channelId: PromiseOrValue<BigNumberish>,
        _active: PromiseOrValue<boolean>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        allowInitializePath(origin: OriginStruct, overrides?: CallOverrides): Promise<boolean>

        endpoint(overrides?: CallOverrides): Promise<string>

        isComposeMsgSender(
            arg0: OriginStruct,
            arg1: PromiseOrValue<BytesLike>,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        lzReceive(
            _origin: OriginStruct,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _executor: PromiseOrValue<string>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        nextNonce(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        oAppVersion(overrides?: CallOverrides): Promise<
            [BigNumber, BigNumber] & {
                senderVersion: BigNumber
                receiverVersion: BigNumber
            }
        >

        owner(overrides?: CallOverrides): Promise<string>

        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setPeer(
            _eid: PromiseOrValue<BigNumberish>,
            _peer: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        setReadChannel(
            _channelId: PromiseOrValue<BigNumberish>,
            _active: PromiseOrValue<boolean>,
            overrides?: CallOverrides
        ): Promise<void>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>
    }

    filters: {
        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'PeerSet(uint32,bytes32)'(eid?: null, peer?: null): PeerSetEventFilter
        PeerSet(eid?: null, peer?: null): PeerSetEventFilter
    }

    estimateGas: {
        allowInitializePath(origin: OriginStruct, overrides?: CallOverrides): Promise<BigNumber>

        endpoint(overrides?: CallOverrides): Promise<BigNumber>

        isComposeMsgSender(
            arg0: OriginStruct,
            arg1: PromiseOrValue<BytesLike>,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        lzReceive(
            _origin: OriginStruct,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _executor: PromiseOrValue<string>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        nextNonce(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        oAppVersion(overrides?: CallOverrides): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        setDelegate(
            _delegate: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setPeer(
            _eid: PromiseOrValue<BigNumberish>,
            _peer: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setReadChannel(
            _channelId: PromiseOrValue<BigNumberish>,
            _active: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        allowInitializePath(origin: OriginStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>

        endpoint(overrides?: CallOverrides): Promise<PopulatedTransaction>

        isComposeMsgSender(
            arg0: OriginStruct,
            arg1: PromiseOrValue<BytesLike>,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        lzReceive(
            _origin: OriginStruct,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _executor: PromiseOrValue<string>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        nextNonce(
            arg0: PromiseOrValue<BigNumberish>,
            arg1: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        oAppVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        peers(eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        setDelegate(
            _delegate: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setPeer(
            _eid: PromiseOrValue<BigNumberish>,
            _peer: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setReadChannel(
            _channelId: PromiseOrValue<BigNumberish>,
            _active: PromiseOrValue<boolean>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
