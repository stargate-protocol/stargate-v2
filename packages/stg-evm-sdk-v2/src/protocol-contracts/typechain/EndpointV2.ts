/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumber,
    BigNumberish,
    BytesLike,
    CallOverrides,
    ContractTransaction,
    Overrides,
    PayableOverrides,
    PopulatedTransaction,
    Signer,
    utils,
} from 'ethers'
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common'

export type OriginStruct = {
    srcEid: PromiseOrValue<BigNumberish>
    sender: PromiseOrValue<BytesLike>
    nonce: PromiseOrValue<BigNumberish>
}

export type OriginStructOutput = [number, string, BigNumber] & {
    srcEid: number
    sender: string
    nonce: BigNumber
}

export type MessagingParamsStruct = {
    dstEid: PromiseOrValue<BigNumberish>
    receiver: PromiseOrValue<BytesLike>
    message: PromiseOrValue<BytesLike>
    options: PromiseOrValue<BytesLike>
    payInLzToken: PromiseOrValue<boolean>
}

export type MessagingParamsStructOutput = [number, string, string, string, boolean] & {
    dstEid: number
    receiver: string
    message: string
    options: string
    payInLzToken: boolean
}

export type MessagingFeeStruct = {
    nativeFee: PromiseOrValue<BigNumberish>
    lzTokenFee: PromiseOrValue<BigNumberish>
}

export type MessagingFeeStructOutput = [BigNumber, BigNumber] & {
    nativeFee: BigNumber
    lzTokenFee: BigNumber
}

export type MessagingReceiptStruct = {
    guid: PromiseOrValue<BytesLike>
    nonce: PromiseOrValue<BigNumberish>
    fee: MessagingFeeStruct
}

export type MessagingReceiptStructOutput = [string, BigNumber, MessagingFeeStructOutput] & {
    guid: string
    nonce: BigNumber
    fee: MessagingFeeStructOutput
}

export type SetConfigParamStruct = {
    eid: PromiseOrValue<BigNumberish>
    configType: PromiseOrValue<BigNumberish>
    config: PromiseOrValue<BytesLike>
}

export type SetConfigParamStructOutput = [number, number, string] & {
    eid: number
    configType: number
    config: string
}

export interface EndpointV2Interface extends utils.Interface {
    functions: {
        'EMPTY_PAYLOAD_HASH()': FunctionFragment
        'NIL_PAYLOAD_HASH()': FunctionFragment
        'blockedLibrary()': FunctionFragment
        'burn(address,uint32,bytes32,uint64,bytes32)': FunctionFragment
        'clear(address,(uint32,bytes32,uint64),bytes32,bytes)': FunctionFragment
        'composeQueue(address,address,bytes32,uint16)': FunctionFragment
        'defaultReceiveLibrary(uint32)': FunctionFragment
        'defaultReceiveLibraryTimeout(uint32)': FunctionFragment
        'defaultSendLibrary(uint32)': FunctionFragment
        'delegates(address)': FunctionFragment
        'eid()': FunctionFragment
        'getConfig(address,address,uint32,uint32)': FunctionFragment
        'getReceiveLibrary(address,uint32)': FunctionFragment
        'getRegisteredLibraries()': FunctionFragment
        'getSendContext()': FunctionFragment
        'getSendLibrary(address,uint32)': FunctionFragment
        'inboundNonce(address,uint32,bytes32)': FunctionFragment
        'inboundPayloadHash(address,uint32,bytes32,uint64)': FunctionFragment
        'initializable((uint32,bytes32,uint64),address)': FunctionFragment
        'isDefaultSendLibrary(address,uint32)': FunctionFragment
        'isRegisteredLibrary(address)': FunctionFragment
        'isSendingMessage()': FunctionFragment
        'isSupportedEid(uint32)': FunctionFragment
        'isValidReceiveLibrary(address,uint32,address)': FunctionFragment
        'lazyInboundNonce(address,uint32,bytes32)': FunctionFragment
        'lzCompose(address,address,bytes32,uint16,bytes,bytes)': FunctionFragment
        'lzComposeAlert(address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)': FunctionFragment
        'lzReceive((uint32,bytes32,uint64),address,bytes32,bytes,bytes)': FunctionFragment
        'lzReceiveAlert((uint32,bytes32,uint64),address,bytes32,uint256,uint256,bytes,bytes,bytes)': FunctionFragment
        'lzToken()': FunctionFragment
        'nativeToken()': FunctionFragment
        'nextGuid(address,uint32,bytes32)': FunctionFragment
        'nilify(address,uint32,bytes32,uint64,bytes32)': FunctionFragment
        'outboundNonce(address,uint32,bytes32)': FunctionFragment
        'owner()': FunctionFragment
        'quote((uint32,bytes32,bytes,bytes,bool),address)': FunctionFragment
        'receiveLibraryTimeout(address,uint32)': FunctionFragment
        'recoverToken(address,address,uint256)': FunctionFragment
        'registerLibrary(address)': FunctionFragment
        'renounceOwnership()': FunctionFragment
        'send((uint32,bytes32,bytes,bytes,bool),address)': FunctionFragment
        'sendCompose(address,bytes32,uint16,bytes)': FunctionFragment
        'setConfig(address,address,(uint32,uint32,bytes)[])': FunctionFragment
        'setDefaultReceiveLibrary(uint32,address,uint256)': FunctionFragment
        'setDefaultReceiveLibraryTimeout(uint32,address,uint256)': FunctionFragment
        'setDefaultSendLibrary(uint32,address)': FunctionFragment
        'setDelegate(address)': FunctionFragment
        'setLzToken(address)': FunctionFragment
        'setReceiveLibrary(address,uint32,address,uint256)': FunctionFragment
        'setReceiveLibraryTimeout(address,uint32,address,uint256)': FunctionFragment
        'setSendLibrary(address,uint32,address)': FunctionFragment
        'skip(address,uint32,bytes32,uint64)': FunctionFragment
        'transferOwnership(address)': FunctionFragment
        'verifiable((uint32,bytes32,uint64),address)': FunctionFragment
        'verify((uint32,bytes32,uint64),address,bytes32)': FunctionFragment
    }

    getFunction(
        nameOrSignatureOrTopic:
            | 'EMPTY_PAYLOAD_HASH'
            | 'NIL_PAYLOAD_HASH'
            | 'blockedLibrary'
            | 'burn'
            | 'clear'
            | 'composeQueue'
            | 'defaultReceiveLibrary'
            | 'defaultReceiveLibraryTimeout'
            | 'defaultSendLibrary'
            | 'delegates'
            | 'eid'
            | 'getConfig'
            | 'getReceiveLibrary'
            | 'getRegisteredLibraries'
            | 'getSendContext'
            | 'getSendLibrary'
            | 'inboundNonce'
            | 'inboundPayloadHash'
            | 'initializable'
            | 'isDefaultSendLibrary'
            | 'isRegisteredLibrary'
            | 'isSendingMessage'
            | 'isSupportedEid'
            | 'isValidReceiveLibrary'
            | 'lazyInboundNonce'
            | 'lzCompose'
            | 'lzComposeAlert'
            | 'lzReceive'
            | 'lzReceiveAlert'
            | 'lzToken'
            | 'nativeToken'
            | 'nextGuid'
            | 'nilify'
            | 'outboundNonce'
            | 'owner'
            | 'quote'
            | 'receiveLibraryTimeout'
            | 'recoverToken'
            | 'registerLibrary'
            | 'renounceOwnership'
            | 'send'
            | 'sendCompose'
            | 'setConfig'
            | 'setDefaultReceiveLibrary'
            | 'setDefaultReceiveLibraryTimeout'
            | 'setDefaultSendLibrary'
            | 'setDelegate'
            | 'setLzToken'
            | 'setReceiveLibrary'
            | 'setReceiveLibraryTimeout'
            | 'setSendLibrary'
            | 'skip'
            | 'transferOwnership'
            | 'verifiable'
            | 'verify'
    ): FunctionFragment

    encodeFunctionData(functionFragment: 'EMPTY_PAYLOAD_HASH', values?: undefined): string
    encodeFunctionData(functionFragment: 'NIL_PAYLOAD_HASH', values?: undefined): string
    encodeFunctionData(functionFragment: 'blockedLibrary', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'burn',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'clear',
        values: [PromiseOrValue<string>, OriginStruct, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'composeQueue',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'defaultReceiveLibrary', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'defaultReceiveLibraryTimeout', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'defaultSendLibrary', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(functionFragment: 'delegates', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'eid', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'getConfig',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'getReceiveLibrary',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'getRegisteredLibraries', values?: undefined): string
    encodeFunctionData(functionFragment: 'getSendContext', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'getSendLibrary',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'inboundNonce',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'inboundPayloadHash',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'initializable', values: [OriginStruct, PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'isDefaultSendLibrary',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'isRegisteredLibrary', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'isSendingMessage', values?: undefined): string
    encodeFunctionData(functionFragment: 'isSupportedEid', values: [PromiseOrValue<BigNumberish>]): string
    encodeFunctionData(
        functionFragment: 'isValidReceiveLibrary',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'lazyInboundNonce',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'lzCompose',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'lzComposeAlert',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'lzReceive',
        values: [
            OriginStruct,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'lzReceiveAlert',
        values: [
            OriginStruct,
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'lzToken', values?: undefined): string
    encodeFunctionData(functionFragment: 'nativeToken', values?: undefined): string
    encodeFunctionData(
        functionFragment: 'nextGuid',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(
        functionFragment: 'nilify',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'outboundNonce',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
    ): string
    encodeFunctionData(functionFragment: 'owner', values?: undefined): string
    encodeFunctionData(functionFragment: 'quote', values: [MessagingParamsStruct, PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'receiveLibraryTimeout',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'recoverToken',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(functionFragment: 'registerLibrary', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
    encodeFunctionData(functionFragment: 'send', values: [MessagingParamsStruct, PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'sendCompose',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setConfig',
        values: [PromiseOrValue<string>, PromiseOrValue<string>, SetConfigParamStruct[]]
    ): string
    encodeFunctionData(
        functionFragment: 'setDefaultReceiveLibrary',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'setDefaultReceiveLibraryTimeout',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
    ): string
    encodeFunctionData(
        functionFragment: 'setDefaultSendLibrary',
        values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(functionFragment: 'setDelegate', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'setLzToken', values: [PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'setReceiveLibrary',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setReceiveLibraryTimeout',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
        ]
    ): string
    encodeFunctionData(
        functionFragment: 'setSendLibrary',
        values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
    ): string
    encodeFunctionData(
        functionFragment: 'skip',
        values: [
            PromiseOrValue<string>,
            PromiseOrValue<BigNumberish>,
            PromiseOrValue<BytesLike>,
            PromiseOrValue<BigNumberish>,
        ]
    ): string
    encodeFunctionData(functionFragment: 'transferOwnership', values: [PromiseOrValue<string>]): string
    encodeFunctionData(functionFragment: 'verifiable', values: [OriginStruct, PromiseOrValue<string>]): string
    encodeFunctionData(
        functionFragment: 'verify',
        values: [OriginStruct, PromiseOrValue<string>, PromiseOrValue<BytesLike>]
    ): string

    decodeFunctionResult(functionFragment: 'EMPTY_PAYLOAD_HASH', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'NIL_PAYLOAD_HASH', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'blockedLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'clear', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'composeQueue', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'defaultReceiveLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'defaultReceiveLibraryTimeout', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'defaultSendLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'delegates', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'eid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getReceiveLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getRegisteredLibraries', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getSendContext', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'getSendLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'inboundNonce', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'inboundPayloadHash', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'initializable', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isDefaultSendLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isRegisteredLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isSendingMessage', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isSupportedEid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'isValidReceiveLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lazyInboundNonce', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lzCompose', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lzComposeAlert', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lzReceive', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lzReceiveAlert', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'lzToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nativeToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nextGuid', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'nilify', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'outboundNonce', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'quote', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'receiveLibraryTimeout', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'recoverToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'registerLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'sendCompose', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultReceiveLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultReceiveLibraryTimeout', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDefaultSendLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setDelegate', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setLzToken', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setReceiveLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setReceiveLibraryTimeout', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'setSendLibrary', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'skip', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'verifiable', data: BytesLike): Result
    decodeFunctionResult(functionFragment: 'verify', data: BytesLike): Result

    events: {
        'ComposeDelivered(address,address,bytes32,uint16)': EventFragment
        'ComposeSent(address,address,bytes32,uint16,bytes)': EventFragment
        'DefaultReceiveLibrarySet(uint32,address)': EventFragment
        'DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)': EventFragment
        'DefaultSendLibrarySet(uint32,address)': EventFragment
        'DelegateSet(address,address)': EventFragment
        'InboundNonceSkipped(uint32,bytes32,address,uint64)': EventFragment
        'LibraryRegistered(address)': EventFragment
        'LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)': EventFragment
        'LzReceiveAlert(address,address,tuple,bytes32,uint256,uint256,bytes,bytes,bytes)': EventFragment
        'LzTokenSet(address)': EventFragment
        'OwnershipTransferred(address,address)': EventFragment
        'PacketBurnt(uint32,bytes32,address,uint64,bytes32)': EventFragment
        'PacketDelivered(tuple,address)': EventFragment
        'PacketNilified(uint32,bytes32,address,uint64,bytes32)': EventFragment
        'PacketSent(bytes,bytes,address)': EventFragment
        'PacketVerified(tuple,address,bytes32)': EventFragment
        'ReceiveLibrarySet(address,uint32,address)': EventFragment
        'ReceiveLibraryTimeoutSet(address,uint32,address,uint256)': EventFragment
        'SendLibrarySet(address,uint32,address)': EventFragment
    }

    getEvent(nameOrSignatureOrTopic: 'ComposeDelivered'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ComposeSent'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DefaultReceiveLibrarySet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DefaultReceiveLibraryTimeoutSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DefaultSendLibrarySet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'DelegateSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'InboundNonceSkipped'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LibraryRegistered'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LzComposeAlert'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LzReceiveAlert'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'LzTokenSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PacketBurnt'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PacketDelivered'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PacketNilified'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PacketSent'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'PacketVerified'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ReceiveLibrarySet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'ReceiveLibraryTimeoutSet'): EventFragment
    getEvent(nameOrSignatureOrTopic: 'SendLibrarySet'): EventFragment
}

export interface ComposeDeliveredEventObject {
    from: string
    to: string
    guid: string
    index: number
}
export type ComposeDeliveredEvent = TypedEvent<[string, string, string, number], ComposeDeliveredEventObject>

export type ComposeDeliveredEventFilter = TypedEventFilter<ComposeDeliveredEvent>

export interface ComposeSentEventObject {
    from: string
    to: string
    guid: string
    index: number
    message: string
}
export type ComposeSentEvent = TypedEvent<[string, string, string, number, string], ComposeSentEventObject>

export type ComposeSentEventFilter = TypedEventFilter<ComposeSentEvent>

export interface DefaultReceiveLibrarySetEventObject {
    eid: number
    newLib: string
}
export type DefaultReceiveLibrarySetEvent = TypedEvent<[number, string], DefaultReceiveLibrarySetEventObject>

export type DefaultReceiveLibrarySetEventFilter = TypedEventFilter<DefaultReceiveLibrarySetEvent>

export interface DefaultReceiveLibraryTimeoutSetEventObject {
    eid: number
    oldLib: string
    expiry: BigNumber
}
export type DefaultReceiveLibraryTimeoutSetEvent = TypedEvent<
    [number, string, BigNumber],
    DefaultReceiveLibraryTimeoutSetEventObject
>

export type DefaultReceiveLibraryTimeoutSetEventFilter = TypedEventFilter<DefaultReceiveLibraryTimeoutSetEvent>

export interface DefaultSendLibrarySetEventObject {
    eid: number
    newLib: string
}
export type DefaultSendLibrarySetEvent = TypedEvent<[number, string], DefaultSendLibrarySetEventObject>

export type DefaultSendLibrarySetEventFilter = TypedEventFilter<DefaultSendLibrarySetEvent>

export interface DelegateSetEventObject {
    sender: string
    delegate: string
}
export type DelegateSetEvent = TypedEvent<[string, string], DelegateSetEventObject>

export type DelegateSetEventFilter = TypedEventFilter<DelegateSetEvent>

export interface InboundNonceSkippedEventObject {
    srcEid: number
    sender: string
    receiver: string
    nonce: BigNumber
}
export type InboundNonceSkippedEvent = TypedEvent<[number, string, string, BigNumber], InboundNonceSkippedEventObject>

export type InboundNonceSkippedEventFilter = TypedEventFilter<InboundNonceSkippedEvent>

export interface LibraryRegisteredEventObject {
    newLib: string
}
export type LibraryRegisteredEvent = TypedEvent<[string], LibraryRegisteredEventObject>

export type LibraryRegisteredEventFilter = TypedEventFilter<LibraryRegisteredEvent>

export interface LzComposeAlertEventObject {
    from: string
    to: string
    executor: string
    guid: string
    index: number
    gas: BigNumber
    value: BigNumber
    message: string
    extraData: string
    reason: string
}
export type LzComposeAlertEvent = TypedEvent<
    [string, string, string, string, number, BigNumber, BigNumber, string, string, string],
    LzComposeAlertEventObject
>

export type LzComposeAlertEventFilter = TypedEventFilter<LzComposeAlertEvent>

export interface LzReceiveAlertEventObject {
    receiver: string
    executor: string
    origin: OriginStructOutput
    guid: string
    gas: BigNumber
    value: BigNumber
    message: string
    extraData: string
    reason: string
}
export type LzReceiveAlertEvent = TypedEvent<
    [string, string, OriginStructOutput, string, BigNumber, BigNumber, string, string, string],
    LzReceiveAlertEventObject
>

export type LzReceiveAlertEventFilter = TypedEventFilter<LzReceiveAlertEvent>

export interface LzTokenSetEventObject {
    token: string
}
export type LzTokenSetEvent = TypedEvent<[string], LzTokenSetEventObject>

export type LzTokenSetEventFilter = TypedEventFilter<LzTokenSetEvent>

export interface OwnershipTransferredEventObject {
    previousOwner: string
    newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<[string, string], OwnershipTransferredEventObject>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PacketBurntEventObject {
    srcEid: number
    sender: string
    receiver: string
    nonce: BigNumber
    payloadHash: string
}
export type PacketBurntEvent = TypedEvent<[number, string, string, BigNumber, string], PacketBurntEventObject>

export type PacketBurntEventFilter = TypedEventFilter<PacketBurntEvent>

export interface PacketDeliveredEventObject {
    origin: OriginStructOutput
    receiver: string
}
export type PacketDeliveredEvent = TypedEvent<[OriginStructOutput, string], PacketDeliveredEventObject>

export type PacketDeliveredEventFilter = TypedEventFilter<PacketDeliveredEvent>

export interface PacketNilifiedEventObject {
    srcEid: number
    sender: string
    receiver: string
    nonce: BigNumber
    payloadHash: string
}
export type PacketNilifiedEvent = TypedEvent<[number, string, string, BigNumber, string], PacketNilifiedEventObject>

export type PacketNilifiedEventFilter = TypedEventFilter<PacketNilifiedEvent>

export interface PacketSentEventObject {
    encodedPayload: string
    options: string
    sendLibrary: string
}
export type PacketSentEvent = TypedEvent<[string, string, string], PacketSentEventObject>

export type PacketSentEventFilter = TypedEventFilter<PacketSentEvent>

export interface PacketVerifiedEventObject {
    origin: OriginStructOutput
    receiver: string
    payloadHash: string
}
export type PacketVerifiedEvent = TypedEvent<[OriginStructOutput, string, string], PacketVerifiedEventObject>

export type PacketVerifiedEventFilter = TypedEventFilter<PacketVerifiedEvent>

export interface ReceiveLibrarySetEventObject {
    receiver: string
    eid: number
    newLib: string
}
export type ReceiveLibrarySetEvent = TypedEvent<[string, number, string], ReceiveLibrarySetEventObject>

export type ReceiveLibrarySetEventFilter = TypedEventFilter<ReceiveLibrarySetEvent>

export interface ReceiveLibraryTimeoutSetEventObject {
    receiver: string
    eid: number
    oldLib: string
    timeout: BigNumber
}
export type ReceiveLibraryTimeoutSetEvent = TypedEvent<
    [string, number, string, BigNumber],
    ReceiveLibraryTimeoutSetEventObject
>

export type ReceiveLibraryTimeoutSetEventFilter = TypedEventFilter<ReceiveLibraryTimeoutSetEvent>

export interface SendLibrarySetEventObject {
    sender: string
    eid: number
    newLib: string
}
export type SendLibrarySetEvent = TypedEvent<[string, number, string], SendLibrarySetEventObject>

export type SendLibrarySetEventFilter = TypedEventFilter<SendLibrarySetEvent>

export interface EndpointV2 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this
    attach(addressOrName: string): this
    deployed(): Promise<this>

    interface: EndpointV2Interface

    queryFilter<TEvent extends TypedEvent>(
        event: TypedEventFilter<TEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TEvent>>

    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
    listeners(eventName?: string): Array<Listener>
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
    removeAllListeners(eventName?: string): this
    off: OnEvent<this>
    on: OnEvent<this>
    once: OnEvent<this>
    removeListener: OnEvent<this>

    functions: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>

        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<[string]>

        blockedLibrary(overrides?: CallOverrides): Promise<[string]>

        burn(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        clear(
            _oapp: PromiseOrValue<string>,
            _origin: OriginStruct,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        composeQueue(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            guid: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string] & { messageHash: string }>

        defaultReceiveLibrary(
            srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string] & { lib: string }>

        defaultReceiveLibraryTimeout(
            srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string, BigNumber] & { lib: string; expiry: BigNumber }>

        defaultSendLibrary(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string] & { lib: string }>

        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string] & { delegate: string }>

        eid(overrides?: CallOverrides): Promise<[number]>

        getConfig(
            _oapp: PromiseOrValue<string>,
            _lib: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string] & { config: string }>

        getReceiveLibrary(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string, boolean] & { lib: string; isDefault: boolean }>

        getRegisteredLibraries(overrides?: CallOverrides): Promise<[string[]]>

        getSendContext(overrides?: CallOverrides): Promise<[number, string]>

        getSendLibrary(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string] & { lib: string }>

        inboundNonce(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber]>

        inboundPayloadHash(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            sender: PromiseOrValue<BytesLike>,
            inboundNonce: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string] & { payloadHash: string }>

        initializable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        isDefaultSendLibrary(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[boolean]>

        isSendingMessage(overrides?: CallOverrides): Promise<[boolean]>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[boolean]>

        isValidReceiveLibrary(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _actualReceiveLib: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        lazyInboundNonce(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            sender: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { nonce: BigNumber }>

        lzCompose(
            _from: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        lzComposeAlert(
            _from: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            _value: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            _reason: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        lzReceive(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        lzReceiveAlert(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _gas: PromiseOrValue<BigNumberish>,
            _value: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            _reason: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        lzToken(overrides?: CallOverrides): Promise<[string]>

        nativeToken(overrides?: CallOverrides): Promise<[string]>

        nextGuid(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            _receiver: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[string]>

        nilify(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        outboundNonce(
            sender: PromiseOrValue<string>,
            dstEid: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<[BigNumber] & { nonce: BigNumber }>

        owner(overrides?: CallOverrides): Promise<[string]>

        quote(
            _params: MessagingParamsStruct,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[MessagingFeeStructOutput]>

        receiveLibraryTimeout(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string, BigNumber] & { lib: string; expiry: BigNumber }>

        recoverToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        registerLibrary(
            _lib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

        send(
            _params: MessagingParamsStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        sendCompose(
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _lib: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDefaultReceiveLibrary(
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            _gracePeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDefaultReceiveLibraryTimeout(
            _eid: PromiseOrValue<BigNumberish>,
            _lib: PromiseOrValue<string>,
            _expiry: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDefaultSendLibrary(
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setDelegate(
            _delegate: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setLzToken(
            _lzToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setReceiveLibrary(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            _gracePeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setReceiveLibraryTimeout(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _lib: PromiseOrValue<string>,
            _expiry: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        setSendLibrary(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        skip(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>

        verifiable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<[boolean]>

        verify(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<ContractTransaction>
    }

    EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>

    NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>

    blockedLibrary(overrides?: CallOverrides): Promise<string>

    burn(
        _oapp: PromiseOrValue<string>,
        _srcEid: PromiseOrValue<BigNumberish>,
        _sender: PromiseOrValue<BytesLike>,
        _nonce: PromiseOrValue<BigNumberish>,
        _payloadHash: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    clear(
        _oapp: PromiseOrValue<string>,
        _origin: OriginStruct,
        _guid: PromiseOrValue<BytesLike>,
        _message: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    composeQueue(
        from: PromiseOrValue<string>,
        to: PromiseOrValue<string>,
        guid: PromiseOrValue<BytesLike>,
        index: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>

    defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    defaultReceiveLibraryTimeout(
        srcEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { lib: string; expiry: BigNumber }>

    defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

    eid(overrides?: CallOverrides): Promise<number>

    getConfig(
        _oapp: PromiseOrValue<string>,
        _lib: PromiseOrValue<string>,
        _eid: PromiseOrValue<BigNumberish>,
        _configType: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>

    getReceiveLibrary(
        _receiver: PromiseOrValue<string>,
        _srcEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<[string, boolean] & { lib: string; isDefault: boolean }>

    getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>

    getSendContext(overrides?: CallOverrides): Promise<[number, string]>

    getSendLibrary(
        _sender: PromiseOrValue<string>,
        _dstEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>

    inboundNonce(
        _receiver: PromiseOrValue<string>,
        _srcEid: PromiseOrValue<BigNumberish>,
        _sender: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    inboundPayloadHash(
        receiver: PromiseOrValue<string>,
        srcEid: PromiseOrValue<BigNumberish>,
        sender: PromiseOrValue<BytesLike>,
        inboundNonce: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<string>

    initializable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    isDefaultSendLibrary(
        _sender: PromiseOrValue<string>,
        _dstEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<boolean>

    isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    isSendingMessage(overrides?: CallOverrides): Promise<boolean>

    isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

    isValidReceiveLibrary(
        _receiver: PromiseOrValue<string>,
        _srcEid: PromiseOrValue<BigNumberish>,
        _actualReceiveLib: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<boolean>

    lazyInboundNonce(
        receiver: PromiseOrValue<string>,
        srcEid: PromiseOrValue<BigNumberish>,
        sender: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    lzCompose(
        _from: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _guid: PromiseOrValue<BytesLike>,
        _index: PromiseOrValue<BigNumberish>,
        _message: PromiseOrValue<BytesLike>,
        _extraData: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    lzComposeAlert(
        _from: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _guid: PromiseOrValue<BytesLike>,
        _index: PromiseOrValue<BigNumberish>,
        _gas: PromiseOrValue<BigNumberish>,
        _value: PromiseOrValue<BigNumberish>,
        _message: PromiseOrValue<BytesLike>,
        _extraData: PromiseOrValue<BytesLike>,
        _reason: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    lzReceive(
        _origin: OriginStruct,
        _receiver: PromiseOrValue<string>,
        _guid: PromiseOrValue<BytesLike>,
        _message: PromiseOrValue<BytesLike>,
        _extraData: PromiseOrValue<BytesLike>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    lzReceiveAlert(
        _origin: OriginStruct,
        _receiver: PromiseOrValue<string>,
        _guid: PromiseOrValue<BytesLike>,
        _gas: PromiseOrValue<BigNumberish>,
        _value: PromiseOrValue<BigNumberish>,
        _message: PromiseOrValue<BytesLike>,
        _extraData: PromiseOrValue<BytesLike>,
        _reason: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    lzToken(overrides?: CallOverrides): Promise<string>

    nativeToken(overrides?: CallOverrides): Promise<string>

    nextGuid(
        _sender: PromiseOrValue<string>,
        _dstEid: PromiseOrValue<BigNumberish>,
        _receiver: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<string>

    nilify(
        _oapp: PromiseOrValue<string>,
        _srcEid: PromiseOrValue<BigNumberish>,
        _sender: PromiseOrValue<BytesLike>,
        _nonce: PromiseOrValue<BigNumberish>,
        _payloadHash: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    outboundNonce(
        sender: PromiseOrValue<string>,
        dstEid: PromiseOrValue<BigNumberish>,
        receiver: PromiseOrValue<BytesLike>,
        overrides?: CallOverrides
    ): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<string>

    quote(
        _params: MessagingParamsStruct,
        _sender: PromiseOrValue<string>,
        overrides?: CallOverrides
    ): Promise<MessagingFeeStructOutput>

    receiveLibraryTimeout(
        receiver: PromiseOrValue<string>,
        srcEid: PromiseOrValue<BigNumberish>,
        overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { lib: string; expiry: BigNumber }>

    recoverToken(
        _token: PromiseOrValue<string>,
        _to: PromiseOrValue<string>,
        _amount: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    registerLibrary(
        _lib: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    send(
        _params: MessagingParamsStruct,
        _refundAddress: PromiseOrValue<string>,
        overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    sendCompose(
        _to: PromiseOrValue<string>,
        _guid: PromiseOrValue<BytesLike>,
        _index: PromiseOrValue<BigNumberish>,
        _message: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setConfig(
        _oapp: PromiseOrValue<string>,
        _lib: PromiseOrValue<string>,
        _params: SetConfigParamStruct[],
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDefaultReceiveLibrary(
        _eid: PromiseOrValue<BigNumberish>,
        _newLib: PromiseOrValue<string>,
        _gracePeriod: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDefaultReceiveLibraryTimeout(
        _eid: PromiseOrValue<BigNumberish>,
        _lib: PromiseOrValue<string>,
        _expiry: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDefaultSendLibrary(
        _eid: PromiseOrValue<BigNumberish>,
        _newLib: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setDelegate(
        _delegate: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setLzToken(
        _lzToken: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setReceiveLibrary(
        _oapp: PromiseOrValue<string>,
        _eid: PromiseOrValue<BigNumberish>,
        _newLib: PromiseOrValue<string>,
        _gracePeriod: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setReceiveLibraryTimeout(
        _oapp: PromiseOrValue<string>,
        _eid: PromiseOrValue<BigNumberish>,
        _lib: PromiseOrValue<string>,
        _expiry: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setSendLibrary(
        _oapp: PromiseOrValue<string>,
        _eid: PromiseOrValue<BigNumberish>,
        _newLib: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    skip(
        _oapp: PromiseOrValue<string>,
        _srcEid: PromiseOrValue<BigNumberish>,
        _sender: PromiseOrValue<BytesLike>,
        _nonce: PromiseOrValue<BigNumberish>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
        newOwner: PromiseOrValue<string>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    verifiable(_origin: OriginStruct, _receiver: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

    verify(
        _origin: OriginStruct,
        _receiver: PromiseOrValue<string>,
        _payloadHash: PromiseOrValue<BytesLike>,
        overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    callStatic: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>

        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<string>

        blockedLibrary(overrides?: CallOverrides): Promise<string>

        burn(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        clear(
            _oapp: PromiseOrValue<string>,
            _origin: OriginStruct,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        composeQueue(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            guid: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>

        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

        defaultReceiveLibraryTimeout(
            srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string, BigNumber] & { lib: string; expiry: BigNumber }>

        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>

        eid(overrides?: CallOverrides): Promise<number>

        getConfig(
            _oapp: PromiseOrValue<string>,
            _lib: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>

        getReceiveLibrary(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string, boolean] & { lib: string; isDefault: boolean }>

        getRegisteredLibraries(overrides?: CallOverrides): Promise<string[]>

        getSendContext(overrides?: CallOverrides): Promise<[number, string]>

        getSendLibrary(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>

        inboundNonce(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        inboundPayloadHash(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            sender: PromiseOrValue<BytesLike>,
            inboundNonce: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<string>

        initializable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        isDefaultSendLibrary(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<boolean>

        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<boolean>

        isSendingMessage(overrides?: CallOverrides): Promise<boolean>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<boolean>

        isValidReceiveLibrary(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _actualReceiveLib: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        lazyInboundNonce(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            sender: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        lzCompose(
            _from: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        lzComposeAlert(
            _from: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            _value: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            _reason: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        lzReceive(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        lzReceiveAlert(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _gas: PromiseOrValue<BigNumberish>,
            _value: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            _reason: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        lzToken(overrides?: CallOverrides): Promise<string>

        nativeToken(overrides?: CallOverrides): Promise<string>

        nextGuid(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            _receiver: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<string>

        nilify(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        outboundNonce(
            sender: PromiseOrValue<string>,
            dstEid: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<string>

        quote(
            _params: MessagingParamsStruct,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<MessagingFeeStructOutput>

        receiveLibraryTimeout(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<[string, BigNumber] & { lib: string; expiry: BigNumber }>

        recoverToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        registerLibrary(_lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        renounceOwnership(overrides?: CallOverrides): Promise<void>

        send(
            _params: MessagingParamsStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<MessagingReceiptStructOutput>

        sendCompose(
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _lib: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: CallOverrides
        ): Promise<void>

        setDefaultReceiveLibrary(
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            _gracePeriod: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        setDefaultReceiveLibraryTimeout(
            _eid: PromiseOrValue<BigNumberish>,
            _lib: PromiseOrValue<string>,
            _expiry: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        setDefaultSendLibrary(
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        setDelegate(_delegate: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setLzToken(_lzToken: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        setReceiveLibrary(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            _gracePeriod: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        setReceiveLibraryTimeout(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _lib: PromiseOrValue<string>,
            _expiry: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        setSendLibrary(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<void>

        skip(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<void>

        transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

        verifiable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<boolean>

        verify(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<void>
    }

    filters: {
        'ComposeDelivered(address,address,bytes32,uint16)'(
            from?: null,
            to?: null,
            guid?: null,
            index?: null
        ): ComposeDeliveredEventFilter
        ComposeDelivered(from?: null, to?: null, guid?: null, index?: null): ComposeDeliveredEventFilter

        'ComposeSent(address,address,bytes32,uint16,bytes)'(
            from?: null,
            to?: null,
            guid?: null,
            index?: null,
            message?: null
        ): ComposeSentEventFilter
        ComposeSent(from?: null, to?: null, guid?: null, index?: null, message?: null): ComposeSentEventFilter

        'DefaultReceiveLibrarySet(uint32,address)'(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter
        DefaultReceiveLibrarySet(eid?: null, newLib?: null): DefaultReceiveLibrarySetEventFilter

        'DefaultReceiveLibraryTimeoutSet(uint32,address,uint256)'(
            eid?: null,
            oldLib?: null,
            expiry?: null
        ): DefaultReceiveLibraryTimeoutSetEventFilter
        DefaultReceiveLibraryTimeoutSet(
            eid?: null,
            oldLib?: null,
            expiry?: null
        ): DefaultReceiveLibraryTimeoutSetEventFilter

        'DefaultSendLibrarySet(uint32,address)'(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter
        DefaultSendLibrarySet(eid?: null, newLib?: null): DefaultSendLibrarySetEventFilter

        'DelegateSet(address,address)'(sender?: null, delegate?: null): DelegateSetEventFilter
        DelegateSet(sender?: null, delegate?: null): DelegateSetEventFilter

        'InboundNonceSkipped(uint32,bytes32,address,uint64)'(
            srcEid?: null,
            sender?: null,
            receiver?: null,
            nonce?: null
        ): InboundNonceSkippedEventFilter
        InboundNonceSkipped(srcEid?: null, sender?: null, receiver?: null, nonce?: null): InboundNonceSkippedEventFilter

        'LibraryRegistered(address)'(newLib?: null): LibraryRegisteredEventFilter
        LibraryRegistered(newLib?: null): LibraryRegisteredEventFilter

        'LzComposeAlert(address,address,address,bytes32,uint16,uint256,uint256,bytes,bytes,bytes)'(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            executor?: PromiseOrValue<string> | null,
            guid?: null,
            index?: null,
            gas?: null,
            value?: null,
            message?: null,
            extraData?: null,
            reason?: null
        ): LzComposeAlertEventFilter
        LzComposeAlert(
            from?: PromiseOrValue<string> | null,
            to?: PromiseOrValue<string> | null,
            executor?: PromiseOrValue<string> | null,
            guid?: null,
            index?: null,
            gas?: null,
            value?: null,
            message?: null,
            extraData?: null,
            reason?: null
        ): LzComposeAlertEventFilter

        'LzReceiveAlert(address,address,tuple,bytes32,uint256,uint256,bytes,bytes,bytes)'(
            receiver?: PromiseOrValue<string> | null,
            executor?: PromiseOrValue<string> | null,
            origin?: null,
            guid?: null,
            gas?: null,
            value?: null,
            message?: null,
            extraData?: null,
            reason?: null
        ): LzReceiveAlertEventFilter
        LzReceiveAlert(
            receiver?: PromiseOrValue<string> | null,
            executor?: PromiseOrValue<string> | null,
            origin?: null,
            guid?: null,
            gas?: null,
            value?: null,
            message?: null,
            extraData?: null,
            reason?: null
        ): LzReceiveAlertEventFilter

        'LzTokenSet(address)'(token?: null): LzTokenSetEventFilter
        LzTokenSet(token?: null): LzTokenSetEventFilter

        'OwnershipTransferred(address,address)'(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter
        OwnershipTransferred(
            previousOwner?: PromiseOrValue<string> | null,
            newOwner?: PromiseOrValue<string> | null
        ): OwnershipTransferredEventFilter

        'PacketBurnt(uint32,bytes32,address,uint64,bytes32)'(
            srcEid?: null,
            sender?: null,
            receiver?: null,
            nonce?: null,
            payloadHash?: null
        ): PacketBurntEventFilter
        PacketBurnt(
            srcEid?: null,
            sender?: null,
            receiver?: null,
            nonce?: null,
            payloadHash?: null
        ): PacketBurntEventFilter

        'PacketDelivered(tuple,address)'(origin?: null, receiver?: null): PacketDeliveredEventFilter
        PacketDelivered(origin?: null, receiver?: null): PacketDeliveredEventFilter

        'PacketNilified(uint32,bytes32,address,uint64,bytes32)'(
            srcEid?: null,
            sender?: null,
            receiver?: null,
            nonce?: null,
            payloadHash?: null
        ): PacketNilifiedEventFilter
        PacketNilified(
            srcEid?: null,
            sender?: null,
            receiver?: null,
            nonce?: null,
            payloadHash?: null
        ): PacketNilifiedEventFilter

        'PacketSent(bytes,bytes,address)'(
            encodedPayload?: null,
            options?: null,
            sendLibrary?: null
        ): PacketSentEventFilter
        PacketSent(encodedPayload?: null, options?: null, sendLibrary?: null): PacketSentEventFilter

        'PacketVerified(tuple,address,bytes32)'(
            origin?: null,
            receiver?: null,
            payloadHash?: null
        ): PacketVerifiedEventFilter
        PacketVerified(origin?: null, receiver?: null, payloadHash?: null): PacketVerifiedEventFilter

        'ReceiveLibrarySet(address,uint32,address)'(
            receiver?: null,
            eid?: null,
            newLib?: null
        ): ReceiveLibrarySetEventFilter
        ReceiveLibrarySet(receiver?: null, eid?: null, newLib?: null): ReceiveLibrarySetEventFilter

        'ReceiveLibraryTimeoutSet(address,uint32,address,uint256)'(
            receiver?: null,
            eid?: null,
            oldLib?: null,
            timeout?: null
        ): ReceiveLibraryTimeoutSetEventFilter
        ReceiveLibraryTimeoutSet(
            receiver?: null,
            eid?: null,
            oldLib?: null,
            timeout?: null
        ): ReceiveLibraryTimeoutSetEventFilter

        'SendLibrarySet(address,uint32,address)'(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter
        SendLibrarySet(sender?: null, eid?: null, newLib?: null): SendLibrarySetEventFilter
    }

    estimateGas: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>

        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<BigNumber>

        blockedLibrary(overrides?: CallOverrides): Promise<BigNumber>

        burn(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        clear(
            _oapp: PromiseOrValue<string>,
            _origin: OriginStruct,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        composeQueue(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            guid: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        defaultReceiveLibrary(srcEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        defaultReceiveLibraryTimeout(
            srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        defaultSendLibrary(dstEid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        eid(overrides?: CallOverrides): Promise<BigNumber>

        getConfig(
            _oapp: PromiseOrValue<string>,
            _lib: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getReceiveLibrary(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        getRegisteredLibraries(overrides?: CallOverrides): Promise<BigNumber>

        getSendContext(overrides?: CallOverrides): Promise<BigNumber>

        getSendLibrary(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        inboundNonce(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        inboundPayloadHash(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            sender: PromiseOrValue<BytesLike>,
            inboundNonce: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        initializable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        isDefaultSendLibrary(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

        isSendingMessage(overrides?: CallOverrides): Promise<BigNumber>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

        isValidReceiveLibrary(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _actualReceiveLib: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        lazyInboundNonce(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            sender: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        lzCompose(
            _from: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        lzComposeAlert(
            _from: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            _value: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            _reason: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        lzReceive(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        lzReceiveAlert(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _gas: PromiseOrValue<BigNumberish>,
            _value: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            _reason: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        lzToken(overrides?: CallOverrides): Promise<BigNumber>

        nativeToken(overrides?: CallOverrides): Promise<BigNumber>

        nextGuid(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            _receiver: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        nilify(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        outboundNonce(
            sender: PromiseOrValue<string>,
            dstEid: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        owner(overrides?: CallOverrides): Promise<BigNumber>

        quote(
            _params: MessagingParamsStruct,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        receiveLibraryTimeout(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        recoverToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        registerLibrary(
            _lib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

        send(
            _params: MessagingParamsStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        sendCompose(
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _lib: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDefaultReceiveLibrary(
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            _gracePeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDefaultReceiveLibraryTimeout(
            _eid: PromiseOrValue<BigNumberish>,
            _lib: PromiseOrValue<string>,
            _expiry: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDefaultSendLibrary(
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setDelegate(
            _delegate: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setLzToken(
            _lzToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setReceiveLibrary(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            _gracePeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setReceiveLibraryTimeout(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _lib: PromiseOrValue<string>,
            _expiry: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        setSendLibrary(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        skip(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>

        verifiable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<BigNumber>

        verify(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<BigNumber>
    }

    populateTransaction: {
        EMPTY_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

        NIL_PAYLOAD_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

        blockedLibrary(overrides?: CallOverrides): Promise<PopulatedTransaction>

        burn(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        clear(
            _oapp: PromiseOrValue<string>,
            _origin: OriginStruct,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        composeQueue(
            from: PromiseOrValue<string>,
            to: PromiseOrValue<string>,
            guid: PromiseOrValue<BytesLike>,
            index: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        defaultReceiveLibrary(
            srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        defaultReceiveLibraryTimeout(
            srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        defaultSendLibrary(
            dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        delegates(oapp: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        eid(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getConfig(
            _oapp: PromiseOrValue<string>,
            _lib: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _configType: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getReceiveLibrary(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        getRegisteredLibraries(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getSendContext(overrides?: CallOverrides): Promise<PopulatedTransaction>

        getSendLibrary(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        inboundNonce(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        inboundPayloadHash(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            sender: PromiseOrValue<BytesLike>,
            inboundNonce: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        initializable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        isDefaultSendLibrary(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        isRegisteredLibrary(lib: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        isSendingMessage(overrides?: CallOverrides): Promise<PopulatedTransaction>

        isSupportedEid(_eid: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>

        isValidReceiveLibrary(
            _receiver: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _actualReceiveLib: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        lazyInboundNonce(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            sender: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        lzCompose(
            _from: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        lzComposeAlert(
            _from: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _gas: PromiseOrValue<BigNumberish>,
            _value: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            _reason: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        lzReceive(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        lzReceiveAlert(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _gas: PromiseOrValue<BigNumberish>,
            _value: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            _extraData: PromiseOrValue<BytesLike>,
            _reason: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        lzToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        nativeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

        nextGuid(
            _sender: PromiseOrValue<string>,
            _dstEid: PromiseOrValue<BigNumberish>,
            _receiver: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        nilify(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        outboundNonce(
            sender: PromiseOrValue<string>,
            dstEid: PromiseOrValue<BigNumberish>,
            receiver: PromiseOrValue<BytesLike>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

        quote(
            _params: MessagingParamsStruct,
            _sender: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        receiveLibraryTimeout(
            receiver: PromiseOrValue<string>,
            srcEid: PromiseOrValue<BigNumberish>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        recoverToken(
            _token: PromiseOrValue<string>,
            _to: PromiseOrValue<string>,
            _amount: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        registerLibrary(
            _lib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PopulatedTransaction>

        send(
            _params: MessagingParamsStruct,
            _refundAddress: PromiseOrValue<string>,
            overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        sendCompose(
            _to: PromiseOrValue<string>,
            _guid: PromiseOrValue<BytesLike>,
            _index: PromiseOrValue<BigNumberish>,
            _message: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setConfig(
            _oapp: PromiseOrValue<string>,
            _lib: PromiseOrValue<string>,
            _params: SetConfigParamStruct[],
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDefaultReceiveLibrary(
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            _gracePeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDefaultReceiveLibraryTimeout(
            _eid: PromiseOrValue<BigNumberish>,
            _lib: PromiseOrValue<string>,
            _expiry: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDefaultSendLibrary(
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setDelegate(
            _delegate: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setLzToken(
            _lzToken: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setReceiveLibrary(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            _gracePeriod: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setReceiveLibraryTimeout(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _lib: PromiseOrValue<string>,
            _expiry: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        setSendLibrary(
            _oapp: PromiseOrValue<string>,
            _eid: PromiseOrValue<BigNumberish>,
            _newLib: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        skip(
            _oapp: PromiseOrValue<string>,
            _srcEid: PromiseOrValue<BigNumberish>,
            _sender: PromiseOrValue<BytesLike>,
            _nonce: PromiseOrValue<BigNumberish>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        transferOwnership(
            newOwner: PromiseOrValue<string>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>

        verifiable(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            overrides?: CallOverrides
        ): Promise<PopulatedTransaction>

        verify(
            _origin: OriginStruct,
            _receiver: PromiseOrValue<string>,
            _payloadHash: PromiseOrValue<BytesLike>,
            overrides?: Overrides & { from?: PromiseOrValue<string> }
        ): Promise<PopulatedTransaction>
    }
}
