#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-'   `-`-'   `-`-'
#
#              Reusable workflow that tests deployment & configuration
#
#   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-.   .-.-  .-.-.   .-.-.   .-.-
#  / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ \ / / \ / / \ \ / / \ \ / / \
# `-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-`-'   `-'   `-`-'   `-`-'
name: Check deployment & configuration

on:
  workflow_call:

env:
  # We'll default the NPM_TOKEN to an empty value since we use it
  # in .npmrc file and if undefined, the node setup would fail
  NPM_TOKEN: ""

  # We'll add all the RPC URLs from secrets
  #
  # Mainnet
  RPC_URL_ARBITRUM_MAINNET: ${{ secrets.RPC_URL_ARBITRUM_MAINNET }}
  RPC_URL_AURORA_MAINNET: ${{ secrets.RPC_URL_AURORA_MAINNET }}
  RPC_URL_AVALANCHE_MAINNET: ${{ secrets.RPC_URL_AVALANCHE_MAINNET }}
  RPC_URL_BASE_MAINNET: ${{ secrets.RPC_URL_BASE_MAINNET }}
  RPC_URL_BSC_MAINNET: ${{ secrets.RPC_URL_BSC_MAINNET }}
  RPC_URL_EBI_MAINNET: ${{ secrets.RPC_URL_EBI_MAINNET }}
  RPC_URL_ETHEREUM_MAINNET: ${{ secrets.RPC_URL_ETHEREUM_MAINNET }}
  RPC_URL_KAVA_MAINNET: ${{ secrets.RPC_URL_KAVA_MAINNET }}
  RPC_URL_KLAYTN_MAINNET: ${{ secrets.RPC_URL_KLAYTN_MAINNET }}
  RPC_URL_MANTLE_MAINNET: ${{ secrets.RPC_URL_MANTLE_MAINNET }}
  RPC_URL_METIS_MAINNET: ${{ secrets.RPC_URL_METIS_MAINNET }}
  RPC_URL_OPTIMISM_MAINNET: ${{ secrets.RPC_URL_OPTIMISM_MAINNET }}
  RPC_URL_POLYGON_MAINNET: ${{ secrets.RPC_URL_POLYGON_MAINNET }}
  RPC_URL_SCROLL_MAINNET: ${{ secrets.RPC_URL_SCROLL_MAINNET }}
  RPC_URL_ZKCONSENSYS_MAINNET: ${{ secrets.RPC_URL_ZKCONSENSYS_MAINNET }}
  RPC_URL_ZKSYNC_MAINNET: ${{ secrets.RPC_URL_ZKSYNC_MAINNET }}
  # Testnet
  RPC_URL_OPTIMISM_TESTNET: ${{ secrets.RPC_URL_OPTIMISM_TESTNET }}

jobs:
  deploy-sandbox:
    name: Deploy and configure sandbox
    runs-on: ubuntu-latest-4xlarge
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        uses: ./.github/workflows/actions/build

      - name: Login to Amazon ECR
        run: docker login --username AWS --password $(aws ecr get-login-password --region us-east-1) 438003944538.dkr.ecr.us-east-1.amazonaws.com
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy sandbox
        run: make deploy-sandbox DEPLOY_ARGS_COMMON=--ci

      - name: Configure sandbox
        run: make configure-sandbox CONFIGURE_ARGS_COMMON=--ci
        env:
          # We'll setup devtools for the fastest configuation since the sandbox RPCs are reliable
          LZ_ENABLE_EXPERIMENTAL_PARALLEL_EXECUTION: 1
          LZ_ENABLE_EXPERIMENTAL_RETRY: 1
          LZ_ENABLE_EXPERIMENTAL_BATCHED_WAIT: 1

  deploy-testnet:
    name: Deploy and configure testnet (simulation)
    runs-on: ubuntu-latest-4xlarge
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        uses: ./.github/workflows/actions/build

      - name: Start simulation
        run: pnpm --filter @stargatefinance/stg-evm-v2 run hardhat lz:test:simulation:start --daemon --stage testnet
        env:
          LZ_ENABLE_EXPERIMENTAL_SIMULATION: 1

      - name: Deploy testnet (simulation)
        run: make deploy-testnet DEPLOY_ARGS_COMMON="--ci --reset"
        env:
          # Run under simulation
          LZ_EXPERIMENTAL_WITH_SIMULATION: 1

      - name: Configure testnet (simulation)
        run: make configure-testnet CONFIGURE_ARGS_COMMON=--ci
        env:
          # We'll setup devtools for the fastest configuation since the sandbox RPCs are reliable
          LZ_ENABLE_EXPERIMENTAL_PARALLEL_EXECUTION: 1
          LZ_ENABLE_EXPERIMENTAL_RETRY: 1
          LZ_ENABLE_EXPERIMENTAL_BATCHED_WAIT: 1
          # Run under simulation
          LZ_EXPERIMENTAL_WITH_SIMULATION: 1

  deploy-mainnet:
    name: Deploy and configure mainnet (simulation)
    runs-on: ubuntu-latest-4xlarge
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        uses: ./.github/workflows/actions/build

      - name: Start simulation
        run: pnpm --filter @stargatefinance/stg-evm-v2 run hardhat lz:test:simulation:start --daemon --stage mainnet
        env:
          LZ_ENABLE_EXPERIMENTAL_SIMULATION: 1

      - name: Deploy mainnet (simulation)
        run: make deploy-mainnet DEPLOY_ARGS_COMMON="--ci --reset"
        env:
          # Run under simulation
          LZ_EXPERIMENTAL_WITH_SIMULATION: 1

      - name: Configure mainnet (simulation)
        run: make configure-mainnet CONFIGURE_ARGS_COMMON=--ci
        env:
          LZ_ENABLE_EXPERIMENTAL_PARALLEL_EXECUTION: 1
          LZ_ENABLE_EXPERIMENTAL_RETRY: 1
          LZ_ENABLE_EXPERIMENTAL_BATCHED_WAIT: 1
          # Run under simulation
          LZ_EXPERIMENTAL_WITH_SIMULATION: 1

      - name: Transfer mainnet ownership (simulation)
        run: make transfer-mainnet CONFIGURE_ARGS_COMMON=--ci
        env:
          LZ_ENABLE_EXPERIMENTAL_PARALLEL_EXECUTION: 1
          LZ_ENABLE_EXPERIMENTAL_RETRY: 1
          LZ_ENABLE_EXPERIMENTAL_BATCHED_WAIT: 1
          # Run under simulation
          LZ_EXPERIMENTAL_WITH_SIMULATION: 1
